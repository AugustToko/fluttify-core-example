package me.yohom.amap_base_flutter

import android.os.Bundle
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel
import io.flutter.plugin.common.PluginRegistry.Registrar

val REF_MAP = mutableMapOf<Int, Any>()

@Suppress("FunctionName", "UsePropertyAccessSyntax", "RedundantUnitReturnType", "UNUSED_PARAMETER", "SpellCheckingInspection", "ConvertToStringTemplate", "DEPRECATION", "UNUSED_VARIABLE")
class AmapBaseFlutterPlugin(private val registrar: Registrar): MethodChannel.MethodCallHandler {

    companion object {
        @JvmStatic
        fun registerWith(registrar: Registrar) {
            val channel = MethodChannel(registrar.messenger(), "me.yohom/amap_base_flutter")
            channel.setMethodCallHandler(AmapBaseFlutterPlugin(registrar))

            // 注册View
            registrar
                    .platformViewRegistry()
                    .registerViewFactory("me.yohom/com.amap.api.maps.offlinemap.DownloadProgressView", DownloadProgressViewFactory(registrar))
            
            registrar
                    .platformViewRegistry()
                    .registerViewFactory("me.yohom/com.amap.api.maps.TextureMapView", TextureMapViewFactory(registrar))
            
            registrar
                    .platformViewRegistry()
                    .registerViewFactory("me.yohom/com.amap.api.maps.WearMapView", WearMapViewFactory(registrar))
            
            registrar
                    .platformViewRegistry()
                    .registerViewFactory("me.yohom/com.amap.api.maps.MapView", MapViewFactory(registrar))
            
        }
    }

    private val handlerMap = mapOf<String, (Registrar, Map<String, Any>, MethodChannel.Result) -> Unit>(
        "com.autonavi.ae.gmap.maploader.ProcessingTile::get_mKeyName" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.maploader.ProcessingTile
        
            methodResult.success(ref.mKeyName)
        },
        "com.autonavi.ae.gmap.maploader.ProcessingTile::get_mCreateTime" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.maploader.ProcessingTile
        
            methodResult.success(ref.mCreateTime)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_name" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.name)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_poiid" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.poiid)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_angle" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.angle)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_strWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.strWidth)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_strHeight" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.strHeight)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_iconID" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.iconID)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_labelx" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.labelx)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_labely" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.labely)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_pixel20X" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.pixel20X)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_pixel20Y" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.pixel20Y)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_pixel20Z" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.pixel20Z)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_fontColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.fontColor)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_borderColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.borderColor)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_type" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.type)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_anchor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.anchor)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_fontSize" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.fontSize)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_mSublayerId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.mSublayerId)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_mIsFouces" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.mIsFouces)
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::get_timeStamp" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            methodResult.success(ref.timeStamp)
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::get_needMove" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            methodResult.success(ref.needMove)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_fromXValue" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            methodResult.success(ref.fromXValue)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_toXValue" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            methodResult.success(ref.toXValue)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_fromYValue" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            methodResult.success(ref.fromYValue)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_toYValue" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            methodResult.success(ref.toYValue)
        },
        "com.autonavi.ae.gmap.style.StyleItem::get_mainKey" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleItem
        
            methodResult.success(ref.mainKey)
        },
        "com.autonavi.ae.gmap.style.StyleElement::get_styleElementType" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            methodResult.success(ref.styleElementType)
        },
        "com.autonavi.ae.gmap.style.StyleElement::get_value" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            methodResult.success(ref.value)
        },
        "com.autonavi.ae.gmap.style.StyleElement::get_textureId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            methodResult.success(ref.textureId)
        },
        "com.autonavi.ae.gmap.style.StyleElement::get_opacity" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            methodResult.success(ref.opacity)
        },
        "com.autonavi.ae.gmap.style.StyleElement::get_lineWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            methodResult.success(ref.lineWidth)
        },
        "com.autonavi.ae.gmap.style.StyleElement::get_visible" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            methodResult.success(ref.visible)
        },
        "com.autonavi.ae.gmap.GLMapRender::get_mGLMapView" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            methodResult.success(ref.mGLMapView)
        },
        "com.autonavi.ae.gmap.GLMapRender::get_mSurfacedestoryed" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            methodResult.success(ref.mSurfacedestoryed)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_engineId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.engineId)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_width" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.width)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_height" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.height)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_screenWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.screenWidth)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_screenHeight" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.screenHeight)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_screenScale" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.screenScale)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_textScale" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.textScale)
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_mapZoomScale" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            methodResult.success(ref.mapZoomScale)
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mGestureState" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            methodResult.success(ref.mGestureState)
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mGestureType" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            methodResult.success(ref.mGestureType)
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mScale" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            methodResult.success(ref.mScale)
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mRotation" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            methodResult.success(ref.mRotation)
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mVeLocityFloat" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            methodResult.success(ref.mVeLocityFloat)
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            methodResult.success(ref.mId)
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mBitmap" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            methodResult.success(ref.mBitmap)
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mAnchor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            methodResult.success(ref.mAnchor)
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mXRatio" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            methodResult.success(ref.mXRatio)
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mYRatio" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            methodResult.success(ref.mYRatio)
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_isGenMimps" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            methodResult.success(ref.isGenMimps)
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_isRepeat" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            methodResult.success(ref.isRepeat)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::get_mOverlayHashCode" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits
        
            methodResult.success(ref.mOverlayHashCode)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::get_mHitedIndex" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits
        
            methodResult.success(ref.mHitedIndex)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::get_mHitedTimes" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits
        
            methodResult.success(ref.mHitedTimes)
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_stAreaColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            methodResult.success(ref.stAreaColor)
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_stArrowBorderColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            methodResult.success(ref.stArrowBorderColor)
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_fArrowBorderWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            methodResult.success(ref.fArrowBorderWidth)
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_fArrowLineWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            methodResult.success(ref.fArrowLineWidth)
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_stArrowLineColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            methodResult.success(ref.stArrowLineColor)
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_dayMode" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            methodResult.success(ref.dayMode)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mFilledResId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mFilledResId)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DFillResId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mSimple3DFillResId)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mFilledColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mFilledColor)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mBgResId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mBgResId)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mBgColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mBgColor)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mLineWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mLineWidth)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mBorderLineWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mBorderLineWidth)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mX1" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mX1)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mY1" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mY1)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mX2" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mX2)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mY2" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mY2)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mGLStart" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mGLStart)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mTextureLen" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mTextureLen)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DX1" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mSimple3DX1)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DY1" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mSimple3DY1)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DX2" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mSimple3DX2)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DY2" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mSimple3DY2)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DGLStart" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mSimple3DGLStart)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DTextureLen" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mSimple3DTextureLen)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapX1" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mCapX1)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapY1" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mCapY1)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapX2" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mCapX2)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapY2" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mCapY2)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isLineExtract" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.isLineExtract)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isCanCovered" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.isCanCovered)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isUseColor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.isUseColor)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isUseCap" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.isUseCap)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mShowArrow" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mShowArrow)
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mbTexPreMulAlpha" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            methodResult.success(ref.mbTexPreMulAlpha)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mResId" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mResId)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mWidth)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mHeight" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mHeight)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mResWidth" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mResWidth)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mResHeight" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mResHeight)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mAnchorXRatio" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mAnchorXRatio)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mAnchorYRatio" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mAnchorYRatio)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mAnchor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            methodResult.success(ref.mAnchor)
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mRootPath" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            methodResult.success(ref.mRootPath)
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mConfigPath" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            methodResult.success(ref.mConfigPath)
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mConfigContent" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            methodResult.success(ref.mConfigContent)
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mOfflineDataPath" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            methodResult.success(ref.mOfflineDataPath)
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mP3dCrossPath" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            methodResult.success(ref.mP3dCrossPath)
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_requestUrl" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            methodResult.success(ref.requestUrl)
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_handler" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            methodResult.success(ref.handler)
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_nRequestType" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            methodResult.success(ref.nRequestType)
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_nCompress" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            methodResult.success(ref.nCompress)
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_requestBaseUrl" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            methodResult.success(ref.requestBaseUrl)
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader::get_isFinish" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            methodResult.success(ref.isFinish)
        },
        "com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake::get_mIsAborted" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake
        
            methodResult.success(ref.mIsAborted)
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mFromXDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            methodResult.success(ref.mFromXDelta)
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mFromYDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            methodResult.success(ref.mFromYDelta)
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mToXDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            methodResult.success(ref.mToXDelta)
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mToYDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            methodResult.success(ref.mToYDelta)
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mCurXDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            methodResult.success(ref.mCurXDelta)
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mCurYDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            methodResult.success(ref.mCurYDelta)
        },
        "com.autonavi.amap.mapcore.animation.GLAlphaAnimation::get_mFromAlpha" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAlphaAnimation
        
            methodResult.success(ref.mFromAlpha)
        },
        "com.autonavi.amap.mapcore.animation.GLAlphaAnimation::get_mToAlpha" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAlphaAnimation
        
            methodResult.success(ref.mToAlpha)
        },
        "com.autonavi.amap.mapcore.animation.GLAlphaAnimation::get_mCurAlpha" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAlphaAnimation
        
            methodResult.success(ref.mCurAlpha)
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::get_alpha" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            methodResult.success(ref.alpha)
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::get_rotate" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            methodResult.success(ref.rotate)
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::get_scaleX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            methodResult.success(ref.scaleX)
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::get_scaleY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            methodResult.success(ref.scaleY)
        },
        "com.autonavi.amap.mapcore.animation.GLEmergeAnimation::get_mStartPoint" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLEmergeAnimation
        
            methodResult.success(ref.mStartPoint)
        },
        "com.autonavi.amap.mapcore.MapConfig::get_maxZoomLevel" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            methodResult.success(ref.maxZoomLevel)
        },
        "com.autonavi.amap.mapcore.MapConfig::get_minZoomLevel" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            methodResult.success(ref.minZoomLevel)
        },
        "com.autonavi.amap.mapcore.message.HoverGestureMapMessage::get_angleDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.HoverGestureMapMessage
        
            methodResult.success(ref.angleDelta)
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::get_touchDeltaX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.MoveGestureMapMessage
        
            methodResult.success(ref.touchDeltaX)
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::get_touchDeltaY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.MoveGestureMapMessage
        
            methodResult.success(ref.touchDeltaY)
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::get_scaleDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            methodResult.success(ref.scaleDelta)
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::get_pivotX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            methodResult.success(ref.pivotX)
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::get_pivotY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            methodResult.success(ref.pivotY)
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_width" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            methodResult.success(ref.width)
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_height" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            methodResult.success(ref.height)
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_isGestureScaleByMapCenter" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            methodResult.success(ref.isGestureScaleByMapCenter)
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_isUseAnchor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            methodResult.success(ref.isUseAnchor)
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_anchorX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            methodResult.success(ref.anchorX)
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_anchorY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            methodResult.success(ref.anchorY)
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::get_pivotX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            methodResult.success(ref.pivotX)
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::get_pivotY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            methodResult.success(ref.pivotY)
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::get_angleDelta" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            methodResult.success(ref.angleDelta)
        },
        "com.autonavi.amap.mapcore.Rectangle::get_left" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            methodResult.success(ref.left)
        },
        "com.autonavi.amap.mapcore.Rectangle::get_right" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            methodResult.success(ref.right)
        },
        "com.autonavi.amap.mapcore.Rectangle::get_bottom" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            methodResult.success(ref.bottom)
        },
        "com.autonavi.amap.mapcore.Rectangle::get_top" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            methodResult.success(ref.top)
        },
        "com.autonavi.amap.mapcore.FPoint3::get_colorIndex" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.FPoint3
        
            methodResult.success(ref.colorIndex)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_xPixel" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.xPixel)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_yPixel" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.yPixel)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_amount" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.amount)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_cameraPosition" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.cameraPosition)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_bounds" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.bounds)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_focus" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.focus)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_zoom" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.zoom)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_tilt" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.tilt)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_bearing" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.bearing)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_geoPoint" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.geoPoint)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_isUseAnchor" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.isUseAnchor)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_anchorX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.anchorX)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_anchorY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.anchorY)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_isChangeFinished" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.isChangeFinished)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingLeft" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.paddingLeft)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingRight" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.paddingRight)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingTop" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.paddingTop)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingBottom" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.paddingBottom)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_mDuration" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.mDuration)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_width" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.width)
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_height" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            methodResult.success(ref.height)
        },
        "com.amap.api.maps.model.Tile::get_width" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Tile
        
            methodResult.success(ref.width)
        },
        "com.amap.api.maps.model.Tile::get_height" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Tile
        
            methodResult.success(ref.height)
        },
        "com.amap.api.maps.model.CameraPosition::get_zoom" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CameraPosition
        
            methodResult.success(ref.zoom)
        },
        "com.amap.api.maps.model.CameraPosition::get_tilt" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CameraPosition
        
            methodResult.success(ref.tilt)
        },
        "com.amap.api.maps.model.CameraPosition::get_bearing" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CameraPosition
        
            methodResult.success(ref.bearing)
        },
        "com.amap.api.maps.model.CameraPosition::get_isAbroad" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CameraPosition
        
            methodResult.success(ref.isAbroad)
        },
        "com.amap.api.maps.model.animation.Animation::get_glAnimation" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            methodResult.success(ref.glAnimation)
        },
        "com.amap.api.maps.model.LatLng::get_latitude" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.LatLng
        
            methodResult.success(ref.latitude)
        },
        "com.amap.api.maps.model.LatLng::get_longitude" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.LatLng
        
            methodResult.success(ref.longitude)
        },
        "com.amap.api.maps.model.TileProjection::get_offsetX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProjection
        
            methodResult.success(ref.offsetX)
        },
        "com.amap.api.maps.model.TileProjection::get_offsetY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProjection
        
            methodResult.success(ref.offsetY)
        },
        "com.amap.api.maps.model.TileProjection::get_minX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProjection
        
            methodResult.success(ref.minX)
        },
        "com.amap.api.maps.model.TileProjection::get_maxX" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProjection
        
            methodResult.success(ref.maxX)
        },
        "com.amap.api.maps.model.TileProjection::get_minY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProjection
        
            methodResult.success(ref.minY)
        },
        "com.amap.api.maps.model.TileProjection::get_maxY" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProjection
        
            methodResult.success(ref.maxY)
        },
        "com.amap.api.maps.model.WeightedLatLng::get_intensity" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.WeightedLatLng
        
            methodResult.success(ref.intensity)
        },
        "com.amap.api.maps.model.particle.SizeOverLife::get_DEFAULT_SIZE" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.SizeOverLife
        
            methodResult.success(ref.DEFAULT_SIZE)
        },
        "com.amap.api.maps.model.IndoorBuildingInfo::get_activeFloorName" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.IndoorBuildingInfo
        
            methodResult.success(ref.activeFloorName)
        },
        "com.amap.api.maps.model.IndoorBuildingInfo::get_activeFloorIndex" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.IndoorBuildingInfo
        
            methodResult.success(ref.activeFloorIndex)
        },
        "com.amap.api.maps.model.IndoorBuildingInfo::get_poiid" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.IndoorBuildingInfo
        
            methodResult.success(ref.poiid)
        },
        "com.autonavi.ae.gmap.maploader.ProcessingTile::set_mKeyName" to { registrar, args, methodResult ->
            val mKeyName = args["mKeyName"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.maploader.ProcessingTile
        
            ref.mKeyName = mKeyName
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.maploader.ProcessingTile::set_mCreateTime" to { registrar, args, methodResult ->
            val mCreateTime = args["mCreateTime"] as Long
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.maploader.ProcessingTile
        
            ref.mCreateTime = mCreateTime
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_name" to { registrar, args, methodResult ->
            val name = args["name"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.name = name
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_poiid" to { registrar, args, methodResult ->
            val poiid = args["poiid"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.poiid = poiid
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_angle" to { registrar, args, methodResult ->
            val angle = args["angle"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.angle = angle
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_strWidth" to { registrar, args, methodResult ->
            val strWidth = args["strWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.strWidth = strWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_strHeight" to { registrar, args, methodResult ->
            val strHeight = args["strHeight"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.strHeight = strHeight
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_iconID" to { registrar, args, methodResult ->
            val iconID = args["iconID"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.iconID = iconID
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_labelx" to { registrar, args, methodResult ->
            val labelx = args["labelx"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.labelx = labelx
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_labely" to { registrar, args, methodResult ->
            val labely = args["labely"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.labely = labely
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_pixel20X" to { registrar, args, methodResult ->
            val pixel20X = args["pixel20X"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.pixel20X = pixel20X
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_pixel20Y" to { registrar, args, methodResult ->
            val pixel20Y = args["pixel20Y"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.pixel20Y = pixel20Y
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_pixel20Z" to { registrar, args, methodResult ->
            val pixel20Z = args["pixel20Z"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.pixel20Z = pixel20Z
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_fontColor" to { registrar, args, methodResult ->
            val fontColor = args["fontColor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.fontColor = fontColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_borderColor" to { registrar, args, methodResult ->
            val borderColor = args["borderColor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.borderColor = borderColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_type" to { registrar, args, methodResult ->
            val type = args["type"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.type = type
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_anchor" to { registrar, args, methodResult ->
            val anchor = args["anchor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.anchor = anchor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_fontSize" to { registrar, args, methodResult ->
            val fontSize = args["fontSize"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.fontSize = fontSize
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_mSublayerId" to { registrar, args, methodResult ->
            val mSublayerId = args["mSublayerId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.mSublayerId = mSublayerId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_mIsFouces" to { registrar, args, methodResult ->
            val mIsFouces = args["mIsFouces"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.mIsFouces = mIsFouces
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glinterface.MapLabelItem::set_timeStamp" to { registrar, args, methodResult ->
            val timeStamp = args["timeStamp"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glinterface.MapLabelItem
        
            ref.timeStamp = timeStamp
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::set_needMove" to { registrar, args, methodResult ->
            val needMove = args["needMove"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            ref.needMove = needMove
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_fromXValue" to { registrar, args, methodResult ->
            val fromXValue = args["fromXValue"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            ref.fromXValue = fromXValue
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_toXValue" to { registrar, args, methodResult ->
            val toXValue = args["toXValue"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            ref.toXValue = toXValue
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_fromYValue" to { registrar, args, methodResult ->
            val fromYValue = args["fromYValue"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            ref.fromYValue = fromYValue
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_toYValue" to { registrar, args, methodResult ->
            val toYValue = args["toYValue"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            ref.toYValue = toYValue
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleItem::set_mainKey" to { registrar, args, methodResult ->
            val mainKey = args["mainKey"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleItem
        
            ref.mainKey = mainKey
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleElement::set_styleElementType" to { registrar, args, methodResult ->
            val styleElementType = args["styleElementType"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            ref.styleElementType = styleElementType
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleElement::set_value" to { registrar, args, methodResult ->
            val value = args["value"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            ref.value = value
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleElement::set_textureId" to { registrar, args, methodResult ->
            val textureId = args["textureId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            ref.textureId = textureId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleElement::set_opacity" to { registrar, args, methodResult ->
            val opacity = args["opacity"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            ref.opacity = opacity.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleElement::set_lineWidth" to { registrar, args, methodResult ->
            val lineWidth = args["lineWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            ref.lineWidth = lineWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleElement::set_visible" to { registrar, args, methodResult ->
            val visible = args["visible"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleElement
        
            ref.visible = visible
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::set_mGLMapView" to { registrar, args, methodResult ->
            val mGLMapView = args["mGLMapView"] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            ref.mGLMapView = mGLMapView
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::set_mSurfacedestoryed" to { registrar, args, methodResult ->
            val mSurfacedestoryed = args["mSurfacedestoryed"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            ref.mSurfacedestoryed = mSurfacedestoryed
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_engineId" to { registrar, args, methodResult ->
            val engineId = args["engineId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.engineId = engineId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_width" to { registrar, args, methodResult ->
            val width = args["width"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.width = width
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_height" to { registrar, args, methodResult ->
            val height = args["height"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.height = height
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_screenWidth" to { registrar, args, methodResult ->
            val screenWidth = args["screenWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.screenWidth = screenWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_screenHeight" to { registrar, args, methodResult ->
            val screenHeight = args["screenHeight"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.screenHeight = screenHeight
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_screenScale" to { registrar, args, methodResult ->
            val screenScale = args["screenScale"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.screenScale = screenScale.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_textScale" to { registrar, args, methodResult ->
            val textScale = args["textScale"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.textScale = textScale.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_mapZoomScale" to { registrar, args, methodResult ->
            val mapZoomScale = args["mapZoomScale"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            ref.mapZoomScale = mapZoomScale.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mGestureState" to { registrar, args, methodResult ->
            val mGestureState = args["mGestureState"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            ref.mGestureState = mGestureState
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mGestureType" to { registrar, args, methodResult ->
            val mGestureType = args["mGestureType"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            ref.mGestureType = mGestureType
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mScale" to { registrar, args, methodResult ->
            val mScale = args["mScale"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            ref.mScale = mScale.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mRotation" to { registrar, args, methodResult ->
            val mRotation = args["mRotation"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            ref.mRotation = mRotation.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mVeLocityFloat" to { registrar, args, methodResult ->
            val mVeLocityFloat = args["mVeLocityFloat"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            ref.mVeLocityFloat = mVeLocityFloat.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mId" to { registrar, args, methodResult ->
            val mId = args["mId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            ref.mId = mId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mBitmap" to { registrar, args, methodResult ->
            val mBitmap = args["mBitmap"] as android.graphics.Bitmap
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            ref.mBitmap = mBitmap
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mAnchor" to { registrar, args, methodResult ->
            val mAnchor = args["mAnchor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            ref.mAnchor = mAnchor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mXRatio" to { registrar, args, methodResult ->
            val mXRatio = args["mXRatio"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            ref.mXRatio = mXRatio.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mYRatio" to { registrar, args, methodResult ->
            val mYRatio = args["mYRatio"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            ref.mYRatio = mYRatio.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_isGenMimps" to { registrar, args, methodResult ->
            val isGenMimps = args["isGenMimps"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            ref.isGenMimps = isGenMimps
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_isRepeat" to { registrar, args, methodResult ->
            val isRepeat = args["isRepeat"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            ref.isRepeat = isRepeat
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::set_mOverlayHashCode" to { registrar, args, methodResult ->
            val mOverlayHashCode = args["mOverlayHashCode"] as Long
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits
        
            ref.mOverlayHashCode = mOverlayHashCode
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::set_mHitedIndex" to { registrar, args, methodResult ->
            val mHitedIndex = args["mHitedIndex"] as Long
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits
        
            ref.mHitedIndex = mHitedIndex
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::set_mHitedTimes" to { registrar, args, methodResult ->
            val mHitedTimes = args["mHitedTimes"] as Long
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits
        
            ref.mHitedTimes = mHitedTimes
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_stAreaColor" to { registrar, args, methodResult ->
            val stAreaColor = args["stAreaColor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            ref.stAreaColor = stAreaColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_stArrowBorderColor" to { registrar, args, methodResult ->
            val stArrowBorderColor = args["stArrowBorderColor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            ref.stArrowBorderColor = stArrowBorderColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_fArrowBorderWidth" to { registrar, args, methodResult ->
            val fArrowBorderWidth = args["fArrowBorderWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            ref.fArrowBorderWidth = fArrowBorderWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_fArrowLineWidth" to { registrar, args, methodResult ->
            val fArrowLineWidth = args["fArrowLineWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            ref.fArrowLineWidth = fArrowLineWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_stArrowLineColor" to { registrar, args, methodResult ->
            val stArrowLineColor = args["stArrowLineColor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            ref.stArrowLineColor = stArrowLineColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_dayMode" to { registrar, args, methodResult ->
            val dayMode = args["dayMode"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            ref.dayMode = dayMode
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mFilledResId" to { registrar, args, methodResult ->
            val mFilledResId = args["mFilledResId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mFilledResId = mFilledResId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DFillResId" to { registrar, args, methodResult ->
            val mSimple3DFillResId = args["mSimple3DFillResId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mSimple3DFillResId = mSimple3DFillResId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mFilledColor" to { registrar, args, methodResult ->
            val mFilledColor = args["mFilledColor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mFilledColor = mFilledColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mBgResId" to { registrar, args, methodResult ->
            val mBgResId = args["mBgResId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mBgResId = mBgResId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mBgColor" to { registrar, args, methodResult ->
            val mBgColor = args["mBgColor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mBgColor = mBgColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mLineWidth" to { registrar, args, methodResult ->
            val mLineWidth = args["mLineWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mLineWidth = mLineWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mBorderLineWidth" to { registrar, args, methodResult ->
            val mBorderLineWidth = args["mBorderLineWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mBorderLineWidth = mBorderLineWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mX1" to { registrar, args, methodResult ->
            val mX1 = args["mX1"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mX1 = mX1.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mY1" to { registrar, args, methodResult ->
            val mY1 = args["mY1"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mY1 = mY1.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mX2" to { registrar, args, methodResult ->
            val mX2 = args["mX2"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mX2 = mX2.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mY2" to { registrar, args, methodResult ->
            val mY2 = args["mY2"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mY2 = mY2.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mGLStart" to { registrar, args, methodResult ->
            val mGLStart = args["mGLStart"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mGLStart = mGLStart.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mTextureLen" to { registrar, args, methodResult ->
            val mTextureLen = args["mTextureLen"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mTextureLen = mTextureLen.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DX1" to { registrar, args, methodResult ->
            val mSimple3DX1 = args["mSimple3DX1"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mSimple3DX1 = mSimple3DX1.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DY1" to { registrar, args, methodResult ->
            val mSimple3DY1 = args["mSimple3DY1"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mSimple3DY1 = mSimple3DY1.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DX2" to { registrar, args, methodResult ->
            val mSimple3DX2 = args["mSimple3DX2"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mSimple3DX2 = mSimple3DX2.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DY2" to { registrar, args, methodResult ->
            val mSimple3DY2 = args["mSimple3DY2"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mSimple3DY2 = mSimple3DY2.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DGLStart" to { registrar, args, methodResult ->
            val mSimple3DGLStart = args["mSimple3DGLStart"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mSimple3DGLStart = mSimple3DGLStart.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DTextureLen" to { registrar, args, methodResult ->
            val mSimple3DTextureLen = args["mSimple3DTextureLen"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mSimple3DTextureLen = mSimple3DTextureLen.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapX1" to { registrar, args, methodResult ->
            val mCapX1 = args["mCapX1"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mCapX1 = mCapX1.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapY1" to { registrar, args, methodResult ->
            val mCapY1 = args["mCapY1"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mCapY1 = mCapY1.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapX2" to { registrar, args, methodResult ->
            val mCapX2 = args["mCapX2"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mCapX2 = mCapX2.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapY2" to { registrar, args, methodResult ->
            val mCapY2 = args["mCapY2"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mCapY2 = mCapY2.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isLineExtract" to { registrar, args, methodResult ->
            val isLineExtract = args["isLineExtract"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.isLineExtract = isLineExtract
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isCanCovered" to { registrar, args, methodResult ->
            val isCanCovered = args["isCanCovered"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.isCanCovered = isCanCovered
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isUseColor" to { registrar, args, methodResult ->
            val isUseColor = args["isUseColor"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.isUseColor = isUseColor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isUseCap" to { registrar, args, methodResult ->
            val isUseCap = args["isUseCap"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.isUseCap = isUseCap
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mShowArrow" to { registrar, args, methodResult ->
            val mShowArrow = args["mShowArrow"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mShowArrow = mShowArrow
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mbTexPreMulAlpha" to { registrar, args, methodResult ->
            val mbTexPreMulAlpha = args["mbTexPreMulAlpha"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLRouteProperty
        
            ref.mbTexPreMulAlpha = mbTexPreMulAlpha
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mResId" to { registrar, args, methodResult ->
            val mResId = args["mResId"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mResId = mResId
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mWidth" to { registrar, args, methodResult ->
            val mWidth = args["mWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mWidth = mWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mHeight" to { registrar, args, methodResult ->
            val mHeight = args["mHeight"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mHeight = mHeight
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mResWidth" to { registrar, args, methodResult ->
            val mResWidth = args["mResWidth"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mResWidth = mResWidth
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mResHeight" to { registrar, args, methodResult ->
            val mResHeight = args["mResHeight"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mResHeight = mResHeight
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mAnchorXRatio" to { registrar, args, methodResult ->
            val mAnchorXRatio = args["mAnchorXRatio"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mAnchorXRatio = mAnchorXRatio.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mAnchorYRatio" to { registrar, args, methodResult ->
            val mAnchorYRatio = args["mAnchorYRatio"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mAnchorYRatio = mAnchorYRatio.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mAnchor" to { registrar, args, methodResult ->
            val mAnchor = args["mAnchor"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlayTexture
        
            ref.mAnchor = mAnchor
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mRootPath" to { registrar, args, methodResult ->
            val mRootPath = args["mRootPath"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            ref.mRootPath = mRootPath
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mConfigPath" to { registrar, args, methodResult ->
            val mConfigPath = args["mConfigPath"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            ref.mConfigPath = mConfigPath
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mConfigContent" to { registrar, args, methodResult ->
            val mConfigContent = args["mConfigContent"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            ref.mConfigContent = mConfigContent
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mOfflineDataPath" to { registrar, args, methodResult ->
            val mOfflineDataPath = args["mOfflineDataPath"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            ref.mOfflineDataPath = mOfflineDataPath
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mP3dCrossPath" to { registrar, args, methodResult ->
            val mP3dCrossPath = args["mP3dCrossPath"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            ref.mP3dCrossPath = mP3dCrossPath
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_requestUrl" to { registrar, args, methodResult ->
            val requestUrl = args["requestUrl"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            ref.requestUrl = requestUrl
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_handler" to { registrar, args, methodResult ->
            val handler = args["handler"] as Long
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            ref.handler = handler
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_nRequestType" to { registrar, args, methodResult ->
            val nRequestType = args["nRequestType"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            ref.nRequestType = nRequestType
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_nCompress" to { registrar, args, methodResult ->
            val nCompress = args["nCompress"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            ref.nCompress = nCompress
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_requestBaseUrl" to { registrar, args, methodResult ->
            val requestBaseUrl = args["requestBaseUrl"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam
        
            ref.requestBaseUrl = requestBaseUrl
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader::set_isFinish" to { registrar, args, methodResult ->
            val isFinish = args["isFinish"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            ref.isFinish = isFinish
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake::set_mIsAborted" to { registrar, args, methodResult ->
            val mIsAborted = args["mIsAborted"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake
        
            ref.mIsAborted = mIsAborted
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mFromXDelta" to { registrar, args, methodResult ->
            val mFromXDelta = args["mFromXDelta"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            ref.mFromXDelta = mFromXDelta
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mFromYDelta" to { registrar, args, methodResult ->
            val mFromYDelta = args["mFromYDelta"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            ref.mFromYDelta = mFromYDelta
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mToXDelta" to { registrar, args, methodResult ->
            val mToXDelta = args["mToXDelta"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            ref.mToXDelta = mToXDelta
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mToYDelta" to { registrar, args, methodResult ->
            val mToYDelta = args["mToYDelta"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            ref.mToYDelta = mToYDelta
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mCurXDelta" to { registrar, args, methodResult ->
            val mCurXDelta = args["mCurXDelta"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            ref.mCurXDelta = mCurXDelta
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mCurYDelta" to { registrar, args, methodResult ->
            val mCurYDelta = args["mCurYDelta"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            ref.mCurYDelta = mCurYDelta
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAlphaAnimation::set_mFromAlpha" to { registrar, args, methodResult ->
            val mFromAlpha = args["mFromAlpha"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAlphaAnimation
        
            ref.mFromAlpha = mFromAlpha.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAlphaAnimation::set_mToAlpha" to { registrar, args, methodResult ->
            val mToAlpha = args["mToAlpha"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAlphaAnimation
        
            ref.mToAlpha = mToAlpha.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAlphaAnimation::set_mCurAlpha" to { registrar, args, methodResult ->
            val mCurAlpha = args["mCurAlpha"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAlphaAnimation
        
            ref.mCurAlpha = mCurAlpha.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::set_alpha" to { registrar, args, methodResult ->
            val alpha = args["alpha"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            ref.alpha = alpha
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::set_rotate" to { registrar, args, methodResult ->
            val rotate = args["rotate"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            ref.rotate = rotate
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::set_scaleX" to { registrar, args, methodResult ->
            val scaleX = args["scaleX"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            ref.scaleX = scaleX
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::set_scaleY" to { registrar, args, methodResult ->
            val scaleY = args["scaleY"] as Double
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            ref.scaleY = scaleY
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLEmergeAnimation::set_mStartPoint" to { registrar, args, methodResult ->
            val mStartPoint = args["mStartPoint"] as com.amap.api.maps.model.LatLng
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLEmergeAnimation
        
            ref.mStartPoint = mStartPoint
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::set_maxZoomLevel" to { registrar, args, methodResult ->
            val maxZoomLevel = args["maxZoomLevel"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            ref.maxZoomLevel = maxZoomLevel.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::set_minZoomLevel" to { registrar, args, methodResult ->
            val minZoomLevel = args["minZoomLevel"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            ref.minZoomLevel = minZoomLevel.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.HoverGestureMapMessage::set_angleDelta" to { registrar, args, methodResult ->
            val angleDelta = args["angleDelta"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.HoverGestureMapMessage
        
            ref.angleDelta = angleDelta.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::set_touchDeltaX" to { registrar, args, methodResult ->
            val touchDeltaX = args["touchDeltaX"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.MoveGestureMapMessage
        
            ref.touchDeltaX = touchDeltaX.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::set_touchDeltaY" to { registrar, args, methodResult ->
            val touchDeltaY = args["touchDeltaY"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.MoveGestureMapMessage
        
            ref.touchDeltaY = touchDeltaY.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::set_scaleDelta" to { registrar, args, methodResult ->
            val scaleDelta = args["scaleDelta"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            ref.scaleDelta = scaleDelta.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::set_pivotX" to { registrar, args, methodResult ->
            val pivotX = args["pivotX"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            ref.pivotX = pivotX
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::set_pivotY" to { registrar, args, methodResult ->
            val pivotY = args["pivotY"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            ref.pivotY = pivotY
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_width" to { registrar, args, methodResult ->
            val width = args["width"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            ref.width = width
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_height" to { registrar, args, methodResult ->
            val height = args["height"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            ref.height = height
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_isGestureScaleByMapCenter" to { registrar, args, methodResult ->
            val isGestureScaleByMapCenter = args["isGestureScaleByMapCenter"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            ref.isGestureScaleByMapCenter = isGestureScaleByMapCenter
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_isUseAnchor" to { registrar, args, methodResult ->
            val isUseAnchor = args["isUseAnchor"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            ref.isUseAnchor = isUseAnchor
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_anchorX" to { registrar, args, methodResult ->
            val anchorX = args["anchorX"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            ref.anchorX = anchorX
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_anchorY" to { registrar, args, methodResult ->
            val anchorY = args["anchorY"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            ref.anchorY = anchorY
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::set_pivotX" to { registrar, args, methodResult ->
            val pivotX = args["pivotX"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            ref.pivotX = pivotX
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::set_pivotY" to { registrar, args, methodResult ->
            val pivotY = args["pivotY"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            ref.pivotY = pivotY
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::set_angleDelta" to { registrar, args, methodResult ->
            val angleDelta = args["angleDelta"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            ref.angleDelta = angleDelta.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Rectangle::set_left" to { registrar, args, methodResult ->
            val left = args["left"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            ref.left = left.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Rectangle::set_right" to { registrar, args, methodResult ->
            val right = args["right"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            ref.right = right.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Rectangle::set_bottom" to { registrar, args, methodResult ->
            val bottom = args["bottom"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            ref.bottom = bottom.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Rectangle::set_top" to { registrar, args, methodResult ->
            val top = args["top"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            ref.top = top.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.FPoint3::set_colorIndex" to { registrar, args, methodResult ->
            val colorIndex = args["colorIndex"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.FPoint3
        
            ref.colorIndex = colorIndex
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_xPixel" to { registrar, args, methodResult ->
            val xPixel = args["xPixel"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.xPixel = xPixel.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_yPixel" to { registrar, args, methodResult ->
            val yPixel = args["yPixel"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.yPixel = yPixel.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_amount" to { registrar, args, methodResult ->
            val amount = args["amount"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.amount = amount.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_cameraPosition" to { registrar, args, methodResult ->
            val cameraPosition = args["cameraPosition"] as com.amap.api.maps.model.CameraPosition
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.cameraPosition = cameraPosition
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_bounds" to { registrar, args, methodResult ->
            val bounds = args["bounds"] as com.amap.api.maps.model.LatLngBounds
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.bounds = bounds
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_focus" to { registrar, args, methodResult ->
            val focus = args["focus"] as android.graphics.Point
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.focus = focus
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_zoom" to { registrar, args, methodResult ->
            val zoom = args["zoom"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.zoom = zoom.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_tilt" to { registrar, args, methodResult ->
            val tilt = args["tilt"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.tilt = tilt.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_bearing" to { registrar, args, methodResult ->
            val bearing = args["bearing"] as Float
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.bearing = bearing.toFloat()
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_geoPoint" to { registrar, args, methodResult ->
            val geoPoint = args["geoPoint"] as android.graphics.Point
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.geoPoint = geoPoint
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_isUseAnchor" to { registrar, args, methodResult ->
            val isUseAnchor = args["isUseAnchor"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.isUseAnchor = isUseAnchor
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_anchorX" to { registrar, args, methodResult ->
            val anchorX = args["anchorX"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.anchorX = anchorX
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_anchorY" to { registrar, args, methodResult ->
            val anchorY = args["anchorY"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.anchorY = anchorY
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_isChangeFinished" to { registrar, args, methodResult ->
            val isChangeFinished = args["isChangeFinished"] as Boolean
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.isChangeFinished = isChangeFinished
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_paddingLeft" to { registrar, args, methodResult ->
            val paddingLeft = args["paddingLeft"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.paddingLeft = paddingLeft
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_paddingRight" to { registrar, args, methodResult ->
            val paddingRight = args["paddingRight"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.paddingRight = paddingRight
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_paddingTop" to { registrar, args, methodResult ->
            val paddingTop = args["paddingTop"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.paddingTop = paddingTop
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_paddingBottom" to { registrar, args, methodResult ->
            val paddingBottom = args["paddingBottom"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.paddingBottom = paddingBottom
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_mDuration" to { registrar, args, methodResult ->
            val mDuration = args["mDuration"] as Long
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.mDuration = mDuration
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_width" to { registrar, args, methodResult ->
            val width = args["width"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.width = width
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_height" to { registrar, args, methodResult ->
            val height = args["height"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            ref.height = height
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation::set_glAnimation" to { registrar, args, methodResult ->
            val glAnimation = args["glAnimation"] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            ref.glAnimation = glAnimation
            methodResult.success("success")
        },
        "com.amap.api.maps.model.IndoorBuildingInfo::set_activeFloorName" to { registrar, args, methodResult ->
            val activeFloorName = args["activeFloorName"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.IndoorBuildingInfo
        
            ref.activeFloorName = activeFloorName
            methodResult.success("success")
        },
        "com.amap.api.maps.model.IndoorBuildingInfo::set_activeFloorIndex" to { registrar, args, methodResult ->
            val activeFloorIndex = args["activeFloorIndex"] as Int
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.IndoorBuildingInfo
        
            ref.activeFloorIndex = activeFloorIndex
            methodResult.success("success")
        },
        "com.amap.api.maps.model.IndoorBuildingInfo::set_poiid" to { registrar, args, methodResult ->
            val poiid = args["poiid"] as String
        
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.IndoorBuildingInfo
        
            ref.poiid = poiid
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.maploader.ProcessingTile::obtain" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.maploader.ProcessingTile::obtain([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.maploader.ProcessingTile.obtain(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.ae.gmap.GLMapEngine::reloadMapResource" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::reloadMapResource([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.reloadMapResource(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::generateRequestId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::generateRequestId([])")
        
            // 开始调用
            val result = ref.generateRequestId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::requireMapRender" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::requireMapRender([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.requireMapRender(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::onMapRender" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::onMapRender([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onMapRender(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::getMapDataTaskIsCancel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getMapDataTaskIsCancel([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.getMapDataTaskIsCancel(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::finishDownLoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::finishDownLoad([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.finishDownLoad(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::netError" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Long
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::netError([\"var1\":$var1, \"var2\":$var2, \"var4\":$var4])")
        
            // 开始调用
            ref.netError(var1, var2, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setMapLoaderToTask" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Long
            // 引用参数
            val var4 = REF_MAP[args["var4"] as Int] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setMapLoaderToTask([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setMapLoaderToTask(var1, var2, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::getContext" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getContext([])")
        
            // 开始调用
            val result = ref.getContext()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getUserAgent" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getUserAgent([])")
        
            // 开始调用
            val result = ref.getUserAgent()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::setParamater" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setParamater([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6])")
        
            // 开始调用
            ref.setParamater(var1, var2, var3, var4, var5, var6)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::onClearCache" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::onClearCache([\"var1\":$var1])")
        
            // 开始调用
            ref.onClearCache(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::isInMapAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::isInMapAction([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.isInMapAction(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getNativeInstance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getNativeInstance([])")
        
            // 开始调用
            val result = ref.getNativeInstance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::canStopMapRender" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::canStopMapRender([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.canStopMapRender(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getEngineIDWithType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getEngineIDWithType([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getEngineIDWithType(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::isEngineCreated" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::isEngineCreated([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.isEngineCreated(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getMapStateInstance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getMapStateInstance([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getMapStateInstance(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getEngineIDWithGestureInfo" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getEngineIDWithGestureInfo([])")
        
            // 开始调用
            val result = ref.getEngineIDWithGestureInfo(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::setServiceViewRect" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Int
            // jsonable参数
            val var7 = args["var7"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setServiceViewRect([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6, \"var7\":$var7])")
        
            // 开始调用
            ref.setServiceViewRect(var1, var2, var3, var4, var5, var6, var7)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setSrvViewStateBoolValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setSrvViewStateBoolValue([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.setSrvViewStateBoolValue(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::getSrvViewStateBoolValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getSrvViewStateBoolValue([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.getSrvViewStateBoolValue(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getIsProcessBuildingMark" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getIsProcessBuildingMark([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getIsProcessBuildingMark(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::setIndoorBuildingToBeActive" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setIndoorBuildingToBeActive([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            ref.setIndoorBuildingToBeActive(var1, var2, var3, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setMapListener" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.interfaces.IAMapListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setMapListener([])")
        
            // 开始调用
            ref.setMapListener(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::getMapState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getMapState([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getMapState(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getNewMapState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getNewMapState([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getNewMapState(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getCloneMapState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getCloneMapState([])")
        
            // 开始调用
            val result = ref.getCloneMapState()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.ae.gmap.GLMapEngine::setMapState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setMapState([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapState(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::addGestureMessage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
            // jsonable参数
            val var3 = args["var3"] as Boolean
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::addGestureMessage([\"var1\":$var1, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5])")
        
            // 开始调用
            ref.addGestureMessage(var1, var2, var3, var4, var5)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::interruptAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::interruptAnimation([])")
        
            // 开始调用
            ref.interruptAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::addGroupAnimation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Int
            // jsonable参数
            val var7 = args["var7"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::addGroupAnimation([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6, \"var7\":$var7])")
        
            // 开始调用
            ref.addGroupAnimation(var1, var2, var3.toFloat(), var4, var5, var6, var7, object : com.amap.api.maps.AMap.CancelableCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.ae.gmap.GLMapEngine::addGroupAnimation_Callback" + refId)
        
                // 回调方法们
                override fun onFinish(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onFinish([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onFinish",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCancel(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCancel([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCancel",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::isInMapAnimation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::isInMapAnimation([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.isInMapAnimation(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getAnimateionsCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getAnimateionsCount([])")
        
            // 开始调用
            val result = ref.getAnimateionsCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::clearAllMessages" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::clearAllMessages([\"var1\":$var1])")
        
            // 开始调用
            ref.clearAllMessages(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::clearAnimations" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::clearAnimations([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.clearAnimations(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::startMapSlidAnim" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as android.graphics.Point
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::startMapSlidAnim([\"var1\":$var1, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            ref.startMapSlidAnim(var1, var2, var3.toFloat(), var4.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::startPivotZoomRotateAnim" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as android.graphics.Point
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::startPivotZoomRotateAnim([\"var1\":$var1, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5])")
        
            // 开始调用
            ref.startPivotZoomRotateAnim(var1, var2, var3.toFloat(), var4, var5)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::getStateMessageCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getStateMessageCount([])")
        
            // 开始调用
            val result = ref.getStateMessageCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::addMessage" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::addMessage([\"var2\":$var2])")
        
            // 开始调用
            ref.addMessage(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::getStateMessage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getStateMessage([])")
        
            // 开始调用
            val result = ref.getStateMessage()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.ae.gmap.GLMapEngine::setMapOpenLayer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setMapOpenLayer([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapOpenLayer(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::pushRendererState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::pushRendererState([])")
        
            // 开始调用
            ref.pushRendererState()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::popRendererState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::popRendererState([])")
        
            // 开始调用
            ref.popRendererState()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::networkStateChanged" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::networkStateChanged([])")
        
            // 开始调用
            ref.networkStateChanged(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::createOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::createOverlay([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.createOverlay(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::addNativeOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::addNativeOverlay([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = ref.addNativeOverlay(var1, var2, var3)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::getGlOverlayMgrPtr" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::getGlOverlayMgrPtr([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getGlOverlayMgrPtr(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapEngine::addOverlayTexture" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::addOverlayTexture([\"var1\":$var1])")
        
            // 开始调用
            ref.addOverlayTexture(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::destroyOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine::destroyOverlay([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapEngine.destroyOverlay(var0, var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setSimple3DEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setSimple3DEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setSimple3DEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setRoadArrowEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setRoadArrowEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setRoadArrowEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setTrafficEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setTrafficEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setTrafficEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setBuildingEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setBuildingEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setBuildingEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setLabelEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setLabelEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setLabelEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setAllContentEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setAllContentEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setAllContentEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setProjectionCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setProjectionCenter([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.setProjectionCenter(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setTrafficStyle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setTrafficStyle([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6])")
        
            // 开始调用
            ref.setTrafficStyle(var1, var2, var3, var4, var5, var6)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::startCheckEngineRenderComplete" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::startCheckEngineRenderComplete([])")
        
            // 开始调用
            ref.startCheckEngineRenderComplete()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setIndoorEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setIndoorEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setIndoorEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setOfflineDataEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setOfflineDataEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setOfflineDataEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setHighlightSubwayEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setHighlightSubwayEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setHighlightSubwayEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::setBuildingTextureEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::setBuildingTextureEnable([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setBuildingTextureEnable(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::initNativeTexture" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::initNativeTexture([\"var1\":$var1])")
        
            // 开始调用
            ref.initNativeTexture(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::AddOverlayTexture" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as android.graphics.Bitmap
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::AddOverlayTexture([\"var1\":$var1, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            ref.AddOverlayTexture(var1, var2, var3, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::removeNativeOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::removeNativeOverlay([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.removeNativeOverlay(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::removeNativeAllOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::removeNativeAllOverlay([\"var1\":$var1])")
        
            // 开始调用
            ref.removeNativeAllOverlay(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::createAMapInstance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapEngine.InitParam
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::createAMapInstance([])")
        
            // 开始调用
            ref.createAMapInstance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::createAMapEngineWithFrame" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::createAMapEngineWithFrame([])")
        
            // 开始调用
            ref.createAMapEngineWithFrame(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::changeSurface" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::changeSurface([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.changeSurface(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::renderAMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::renderAMap([])")
        
            // 开始调用
            ref.renderAMap()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::releaseNetworkState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::releaseNetworkState([])")
        
            // 开始调用
            ref.releaseNetworkState()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::cancelAllAMapDownload" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::cancelAllAMapDownload([])")
        
            // 开始调用
            ref.cancelAllAMapDownload()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::destroyAMapEngine" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapEngine
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine@$refId::destroyAMapEngine([])")
        
            // 开始调用
            ref.destroyAMapEngine()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapEngine::nativeGetMapEngineVersion" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapEngine::nativeGetMapEngineVersion([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapEngine.nativeGetMapEngineVersion(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.listener.AMapWidgetListener::invalidateScaleView" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.listener.AMapWidgetListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.listener.AMapWidgetListener@$refId::invalidateScaleView([])")
        
            // 开始调用
            ref.invalidateScaleView()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.listener.AMapWidgetListener::invalidateCompassView" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.listener.AMapWidgetListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.listener.AMapWidgetListener@$refId::invalidateCompassView([])")
        
            // 开始调用
            ref.invalidateCompassView()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.listener.AMapWidgetListener::invalidateZoomController" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.listener.AMapWidgetListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.listener.AMapWidgetListener@$refId::invalidateZoomController([\"var1\":$var1])")
        
            // 开始调用
            ref.invalidateZoomController(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.listener.AMapWidgetListener::setFrontViewVisibility" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.listener.AMapWidgetListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.listener.AMapWidgetListener@$refId::setFrontViewVisibility([\"var1\":$var1])")
        
            // 开始调用
            ref.setFrontViewVisibility(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.AbstractMapMessage::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.AbstractMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.AbstractMapMessage@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::setMapCoreListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr@$refId::setMapCoreListener([])")
        
            // 开始调用
            ref.setMapCoreListener()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::clearAnimations" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr@$refId::clearAnimations([])")
        
            // 开始调用
            ref.clearAnimations()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::getAnimationsCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr@$refId::getAnimationsCount([])")
        
            // 开始调用
            val result = ref.getAnimationsCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::doAnimations" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr@$refId::doAnimations([])")
        
            // 开始调用
            ref.doAnimations(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::addAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr@$refId::addAnimation([])")
        
            // 开始调用
            ref.addAnimation(var1, object : com.amap.api.maps.AMap.CancelableCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::addAnimation_Callback" + refId)
        
                // 回调方法们
                override fun onFinish(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onFinish([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onFinish",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCancel(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCancel([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCancel",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::setMapAnimationListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr@$refId::setMapAnimationListener([])")
        
            // 开始调用
            ref.setMapAnimationListener(object : com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr.MapAnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr::setMapAnimationListener_Callback" + refId)
        
                // 回调方法们
                override fun onMapAnimationFinish(var1: com.amap.api.maps.AMap.CancelableCallback): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapAnimationFinish([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr.MapAnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapAnimationFinish",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr.MapAnimationListener::onMapAnimationFinish" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr.MapAnimationListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr.MapAnimationListener@$refId::onMapAnimationFinish([])")
        
            // 开始调用
            ref.onMapAnimationFinish(object : com.amap.api.maps.AMap.CancelableCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr.MapAnimationListener::onMapAnimationFinish_Callback" + refId)
        
                // 回调方法们
                override fun onFinish(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onFinish([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onFinish",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCancel(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCancel([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCancel",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation2V::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation2V@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation2V::getCurValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation2V@$refId::getCurValue([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getCurValue(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation2V::getStartValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation2V@$refId::getStartValue([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getStartValue(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation2V::getEndValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation2V@$refId::getEndValue([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getEndValue(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimFling::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimFling
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimFling@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimFling::setPositionAndVelocity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimFling
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimFling@$refId::setPositionAndVelocity([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setPositionAndVelocity(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimation::isOver" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimation@$refId::isOver([])")
        
            // 开始调用
            val result = ref.isOver()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimation::isValid" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimation@$refId::isValid([])")
        
            // 开始调用
            val result = ref.isValid()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation1V::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation1V@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation1V::setAnimationValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation1V@$refId::setAnimationValue([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.setAnimationValue(var1.toFloat(), var2.toFloat(), var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation1V::getCurValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation1V@$refId::getCurValue([])")
        
            // 开始调用
            val result = ref.getCurValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation1V::getStartValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation1V@$refId::getStartValue([])")
        
            // 开始调用
            val result = ref.getStartValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglAnimation1V::getEndValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglAnimation1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglAnimation1V@$refId::getEndValue([])")
        
            // 开始调用
            val result = ref.getEndValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom::setToMapZoomAndPivot" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Int
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as android.graphics.Point
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom@$refId::setToMapZoomAndPivot([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setToMapZoomAndPivot(var1.toFloat(), var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam::needToCaculate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam@$refId::needToCaculate([])")
        
            // 开始调用
            val result = ref.needToCaculate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam::getCurMult" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam@$refId::getCurMult([])")
        
            // 开始调用
            val result = ref.getCurMult()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam::setNormalizedTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam@$refId::setNormalizedTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setNormalizedTime(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam::setInterpolatorType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam@$refId::setInterpolatorType([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setInterpolatorType(var1, var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam::getInterpolatorType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam@$refId::getInterpolatorType([])")
        
            // 开始调用
            val result = ref.getInterpolatorType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam::checkParam" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam@$refId::checkParam([])")
        
            // 开始调用
            ref.checkParam()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V::setFromValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V@$refId::setFromValue([\"var1\":$var1])")
        
            // 开始调用
            ref.setFromValue(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V::setToValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V@$refId::setToValue([\"var1\":$var1])")
        
            // 开始调用
            ref.setToValue(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V::getFromValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V@$refId::getFromValue([])")
        
            // 开始调用
            val result = ref.getFromValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V::getToValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V@$refId::getToValue([])")
        
            // 开始调用
            val result = ref.getToValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V::getCurValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V@$refId::getCurValue([])")
        
            // 开始调用
            val result = ref.getCurValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V::checkParam" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V@$refId::checkParam([])")
        
            // 开始调用
            ref.checkParam()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::isValid" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::isValid([])")
        
            // 开始调用
            val result = ref.isValid()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::setToMapAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::setToMapAngle([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setToMapAngle(var1.toFloat(), var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::setToMapCenterGeo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::setToMapCenterGeo([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.setToMapCenterGeo(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::setToMapLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::setToMapLevel([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setToMapLevel(var1.toFloat(), var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::setToCameraDegree" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::setToCameraDegree([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setToCameraDegree(var1.toFloat(), var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::checkLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::checkLevel([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup.checkLevel(var0.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::typeEqueal" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup@$refId::typeEqueal([])")
        
            // 开始调用
            val result = ref.typeEqueal(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::setFromValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::setFromValue([\"var1\":$var1, \"var3\":$var3])")
        
            // 开始调用
            ref.setFromValue(var1, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::setToValue" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::setToValue([\"var1\":$var1, \"var3\":$var3])")
        
            // 开始调用
            ref.setToValue(var1, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::getFromXValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::getFromXValue([])")
        
            // 开始调用
            val result = ref.getFromXValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::getFromYValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::getFromYValue([])")
        
            // 开始调用
            val result = ref.getFromYValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::getToXValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::getToXValue([])")
        
            // 开始调用
            val result = ref.getToXValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::getToYValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::getToYValue([])")
        
            // 开始调用
            val result = ref.getToYValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::getCurXValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::getCurXValue([])")
        
            // 开始调用
            val result = ref.getCurXValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::getCurYValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::getCurYValue([])")
        
            // 开始调用
            val result = ref.getCurYValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::checkParam" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V@$refId::checkParam([])")
        
            // 开始调用
            ref.checkParam()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleItem::get" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleItem
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.style.StyleItem@$refId::get([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.get(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.ae.gmap.style.StyleItem::put" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.style.StyleElement
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleItem
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.style.StyleItem@$refId::put([\"var1\":$var1])")
        
            // 开始调用
            ref.put(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.style.StyleItem::isValid" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.style.StyleItem
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.style.StyleItem@$refId::isValid([])")
        
            // 开始调用
            val result = ref.isValid()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapRender::setTrafficMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::setTrafficMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrafficMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::resetTickCount" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::resetTickCount([\"var1\":$var1])")
        
            // 开始调用
            ref.resetTickCount(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::isRenderPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::isRenderPause([])")
        
            // 开始调用
            val result = ref.isRenderPause()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapRender::setRenderFps" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::setRenderFps([\"var1\":$var1])")
        
            // 开始调用
            ref.setRenderFps(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::renderPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::renderPause([])")
        
            // 开始调用
            ref.renderPause()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::renderResume" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::renderResume([])")
        
            // 开始调用
            ref.renderResume()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::onAttachedToWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::onAttachedToWindow([])")
        
            // 开始调用
            ref.onAttachedToWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::onDetachedFromWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::onDetachedFromWindow([])")
        
            // 开始调用
            ref.onDetachedFromWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapRender::onSurfaceDestory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapRender
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapRender@$refId::onSurfaceDestory([])")
        
            // 开始调用
            ref.onSurfaceDestory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::lonlat2Geo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // 引用参数
            val var4 = REF_MAP[args["var4"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::lonlat2Geo([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.lonlat2Geo(var0, var2, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::geo2LonLat" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.amap.mapcore.DPoint
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::geo2LonLat([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.geo2LonLat(var0, var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::screenToP20Point" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as android.graphics.Point
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::screenToP20Point([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.screenToP20Point(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::p20ToScreenPoint" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as com.autonavi.amap.mapcore.FPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::p20ToScreenPoint([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.p20ToScreenPoint(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::getMapGeoCenter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getMapGeoCenter([])")
        
            // 开始调用
            ref.getMapGeoCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::setMapGeoCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::setMapGeoCenter([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setMapGeoCenter(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::setCameraDegree" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::setCameraDegree([\"var1\":$var1])")
        
            // 开始调用
            ref.setCameraDegree(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::setMapAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::setMapAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::setMapZoomer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::setMapZoomer([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapZoomer(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::getMapZoomer" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getMapZoomer([])")
        
            // 开始调用
            val result = ref.getMapZoomer()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::getCameraDegree" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getCameraDegree([])")
        
            // 开始调用
            val result = ref.getCameraDegree()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::getMapAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getMapAngle([])")
        
            // 开始调用
            val result = ref.getMapAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::recalculate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::recalculate([])")
        
            // 开始调用
            ref.recalculate()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::getMapLenWithWin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getMapLenWithWin([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getMapLenWithWin(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::getGLUnitWithWin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getGLUnitWithWin([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getGLUnitWithWin(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::getNativeInstance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getNativeInstance([])")
        
            // 开始调用
            val result = ref.getNativeInstance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::getSkyHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::getSkyHeight([])")
        
            // 开始调用
            val result = ref.getSkyHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::setNativeMapengineState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.GLMapState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState@$refId::setNativeMapengineState([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setNativeMapengineState(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::calMapZoomScalefactor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::calMapZoomScalefactor([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.calMapZoomScalefactor(var0, var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::nativeNewInstance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeNewInstance([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.nativeNewInstance(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::nativeScreenToP20Point" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // 引用参数
            val var4 = REF_MAP[args["var4"] as Int] as android.graphics.Point
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeScreenToP20Point([\"var0\":$var0, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeScreenToP20Point(var0, var2.toFloat(), var3.toFloat(), var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeP20ToScreenPoint" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
            // 引用参数
            val var5 = REF_MAP[args["var5"] as Int] as android.graphics.PointF
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeP20ToScreenPoint([\"var0\":$var0, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeP20ToScreenPoint(var0, var2, var3, var4, var5)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeSetMapCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeSetMapCenter([\"var0\":$var0, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeSetMapCenter(var0, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeGetMapCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as android.graphics.Point
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeGetMapCenter([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeGetMapCenter(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeGetMapZoomer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeGetMapZoomer([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.nativeGetMapZoomer(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::nativeSetMapZoomer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeSetMapZoomer([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeSetMapZoomer(var0, var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeSetMapAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeSetMapAngle([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeSetMapAngle(var0, var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeGetCameraDegree" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeGetCameraDegree([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.nativeGetCameraDegree(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::nativeGetMapAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeGetMapAngle([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.nativeGetMapAngle(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::nativeSetCameraDegree" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeSetCameraDegree([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeSetCameraDegree(var0, var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeRecalculate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeRecalculate([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeRecalculate(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeStateDestroy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeStateDestroy([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.ae.gmap.GLMapState.nativeStateDestroy(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.GLMapState::nativeGetSkyHeight" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeGetSkyHeight([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.nativeGetSkyHeight(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::nativeGetGLUnitWithWin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeGetGLUnitWithWin([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.nativeGetGLUnitWithWin(var0, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.GLMapState::nativeCalMapZoomScalefactor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.GLMapState::nativeCalMapZoomScalefactor([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = com.autonavi.ae.gmap.GLMapState.nativeCalMapZoomScalefactor(var0, var1, var2.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay::resumeMarker" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Bitmap
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay@$refId::resumeMarker([])")
        
            // 开始调用
            ref.resumeMarker(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay::removeRouteName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay@$refId::removeRouteName([])")
        
            // 开始调用
            ref.removeRouteName()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::addVectorRemainDis" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::addVectorRemainDis([\"var1\":$var1])")
        
            // 开始调用
            ref.addVectorRemainDis(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::addVectorCar" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::addVectorCar([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.addVectorCar(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::setRoadResId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::setRoadResId([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setRoadResId(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::setArrowResId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::setArrowResId([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setArrowResId(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::setCarResId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::setCarResId([\"var1\":$var1])")
        
            // 开始调用
            ref.setCarResId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::setBackgroundResId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::setBackgroundResId([\"var1\":$var1])")
        
            // 开始调用
            ref.setBackgroundResId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::setSkyResId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::setSkyResId([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setSkyResId(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::getFBOTextureId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::getFBOTextureId([])")
        
            // 开始调用
            val result = ref.getFBOTextureId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLCrossVector::initFBOTexture" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLCrossVector
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLCrossVector@$refId::initFBOTexture([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.initFBOTexture(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::resumeMarker" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Bitmap
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::resumeMarker([])")
        
            // 开始调用
            ref.resumeMarker(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::AddOverlayTexture" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Bitmap
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::AddOverlayTexture([\"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.AddOverlayTexture(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::dipToPixel" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::dipToPixel([\"var2\":$var2])")
        
            // 开始调用
            val result = ref.dipToPixel(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::setAttribute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::setAttribute([])")
        
            // 开始调用
            ref.setAttribute(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::setImageMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::setImageMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setImageMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::setGenerateCrossImageListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::setGenerateCrossImageListener([])")
        
            // 开始调用
            ref.setGenerateCrossImageListener(object : com.amap.api.maps.model.CrossOverlay.GenerateCrossImageListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::setGenerateCrossImageListener_Callback" + refId)
        
                // 回调方法们
                override fun onGenerateComplete(var1: android.graphics.Bitmap, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGenerateComplete([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.CrossOverlay.GenerateCrossImageListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onGenerateComplete",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 },
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::getTextureID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay@$refId::getTextureID([])")
        
            // 开始调用
            val result = ref.getTextureID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::getNativeInstatnce" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::getNativeInstatnce([])")
        
            // 开始调用
            val result = ref.getNativeInstatnce()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::getCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::getCode([])")
        
            // 开始调用
            val result = ref.getCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::getSubType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::getSubType([])")
        
            // 开始调用
            val result = ref.getSubType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::removeItem" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::removeItem([\"var1\":$var1])")
        
            // 开始调用
            ref.removeItem(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::removeAll" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::removeAll([])")
        
            // 开始调用
            ref.removeAll()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::getSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::getSize([])")
        
            // 开始调用
            val result = ref.getSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setClickable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setClickable([\"var1\":$var1])")
        
            // 开始调用
            ref.setClickable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::isClickable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::isClickable([])")
        
            // 开始调用
            val result = ref.isClickable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::clearFocus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::clearFocus([])")
        
            // 开始调用
            ref.clearFocus()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::getIsInBundle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::getIsInBundle([])")
        
            // 开始调用
            val result = ref.getIsInBundle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setMaxCountShown" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setMaxCountShown([\"var1\":$var1])")
        
            // 开始调用
            ref.setMaxCountShown(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setOverlayOnTop" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setOverlayOnTop([\"var1\":$var1])")
        
            // 开始调用
            ref.setOverlayOnTop(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setMinDisplayLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setMinDisplayLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMinDisplayLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setMaxDisplayLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setMaxDisplayLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMaxDisplayLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setOverlayPriority" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setOverlayPriority([\"var1\":$var1])")
        
            // 开始调用
            ref.setOverlayPriority(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::getOverlayPriority" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::getOverlayPriority([])")
        
            // 开始调用
            val result = ref.getOverlayPriority()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::setOverlayItemPriority" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::setOverlayItemPriority([\"var1\":$var1])")
        
            // 开始调用
            ref.setOverlayItemPriority(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.ae.gmap.gloverlay.GLOverlay::useNightStyle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.ae.gmap.gloverlay.GLOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.ae.gmap.gloverlay.GLOverlay@$refId::useNightStyle([\"var1\":$var1])")
        
            // 开始调用
            ref.useNightStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.NetworkState::setNetworkListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.NetworkState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.NetworkState@$refId::setNetworkListener([])")
        
            // 开始调用
            ref.setNetworkListener(object : com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.maploader.NetworkState::setNetworkListener_Callback" + refId)
        
                // 回调方法们
                override fun networkStateChanged(var1: android.content.Context): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: networkStateChanged([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::networkStateChanged",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.NetworkState::registerNetChangeReceiver" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.NetworkState
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.NetworkState@$refId::registerNetChangeReceiver([\"var2\":$var2])")
        
            // 开始调用
            ref.registerNetChangeReceiver(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.NetworkState::isNetworkConnected" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.NetworkState::isNetworkConnected([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.maploader.NetworkState.isNetworkConnected(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener::networkStateChanged" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener@$refId::networkStateChanged([])")
        
            // 开始调用
            ref.networkStateChanged(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader::onStop" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.AMapLoader@$refId::onStop([])")
        
            // 开始调用
            ref.onStop()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader::onFinish" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.AMapLoader@$refId::onFinish([])")
        
            // 开始调用
            ref.onFinish()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader::doRequest" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.AMapLoader@$refId::doRequest([])")
        
            // 开始调用
            ref.doRequest()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader::doCancel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.AMapLoader@$refId::doCancel([])")
        
            // 开始调用
            ref.doCancel()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.maploader.AMapLoader::getDeviceId" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.maploader.AMapLoader
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.maploader.AMapLoader@$refId::getDeviceId([])")
        
            // 开始调用
            val result = ref.getDeviceId(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapProjection::lonlat2Geo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // 引用参数
            val var4 = REF_MAP[args["var4"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapProjection::lonlat2Geo([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.MapProjection.lonlat2Geo(var0, var2, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapProjection::geo2LonLat" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.amap.mapcore.DPoint
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapProjection::geo2LonLat([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            com.autonavi.amap.mapcore.MapProjection.geo2LonLat(var0, var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationProtocol::getValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationProtocol
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationProtocol@$refId::getValue([])")
        
            // 开始调用
            val result = ref.getValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.tools.TextTextureGenerator::getNearstSize2N" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.tools.TextTextureGenerator::getNearstSize2N([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.tools.TextTextureGenerator.getNearstSize2N(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.tools.GlMapUtil::dipToPixel" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.tools.GlMapUtil::dipToPixel([\"var1\":$var1])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.tools.GlMapUtil.dipToPixel(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.tools.GlMapUtil::spToPixel" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.tools.GlMapUtil::spToPixel([\"var1\":$var1])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.tools.GlMapUtil.spToPixel(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.tools.GlMapUtil::getString" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.tools.GlMapUtil::getString([\"var1\":$var1])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.tools.GlMapUtil.getString(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.tools.GlMapUtil::isAssic" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.tools.GlMapUtil::isAssic([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.tools.GlMapUtil.isAssic(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.tools.GlMapUtil::getAppVersionName" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.tools.GlMapUtil::getAppVersionName([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.tools.GlMapUtil.getAppVersionName(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MsgProcessor::nativeInitMsg" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MsgProcessor
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MsgProcessor@$refId::nativeInitMsg([])")
        
            // 开始调用
            ref.nativeInitMsg()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MsgProcessor::nativeInit" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MsgProcessor
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MsgProcessor@$refId::nativeInit([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.nativeInit(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MsgProcessor::nativeMsgProcessor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MsgProcessor
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MsgProcessor@$refId::nativeMsgProcessor([\"var1\":$var1])")
        
            // 开始调用
            ref.nativeMsgProcessor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MsgProcessor::nativeCall" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MsgProcessor
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MsgProcessor@$refId::nativeCall([])")
        
            // 开始调用
            ref.nativeCall()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractNativeInstance::getNativeInstance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractNativeInstance
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AbstractNativeInstance@$refId::getNativeInstance([])")
        
            // 开始调用
            val result = ref.getNativeInstance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AbstractNativeInstance::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractNativeInstance
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AbstractNativeInstance@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.LinkInfo::getState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.LinkInfo
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.LinkInfo@$refId::getState([])")
        
            // 开始调用
            val result = ref.getState()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.LinkInfo::setState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.LinkInfo
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.LinkInfo@$refId::setState([\"var1\":$var1])")
        
            // 开始调用
            ref.setState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.LinkInfo::getTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.LinkInfo
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.LinkInfo@$refId::getTime([])")
        
            // 开始调用
            val result = ref.getTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.LinkInfo::setTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.LinkInfo
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.LinkInfo@$refId::setTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.LinkInfo::getLength" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.LinkInfo
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.LinkInfo@$refId::getLength([])")
        
            // 开始调用
            val result = ref.getLength()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.LinkInfo::setLength" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.LinkInfo
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.LinkInfo@$refId::setLength([\"var1\":$var1])")
        
            // 开始调用
            ref.setLength(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativePolyline::nativeCreate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativePolyline::nativeCreate([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativePolyline.nativeCreate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativePolyline::nativeSetGLShaderManager" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativePolyline::nativeSetGLShaderManager([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativePolyline.nativeSetGLShaderManager(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativePolyline::nativeDestroy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativePolyline::nativeDestroy([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativePolyline.nativeDestroy(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase::setLocationOption" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase@$refId::setLocationOption([])")
        
            // 开始调用
            ref.setLocationOption(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase::setLocationListener" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.Inner_3dMap_locationListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase@$refId::setLocationListener([])")
        
            // 开始调用
            ref.setLocationListener(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase::startLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase@$refId::startLocation([])")
        
            // 开始调用
            ref.startLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase::stopLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase@$refId::stopLocation([])")
        
            // 开始调用
            ref.stopLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase::unRegisterLocationListener" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.Inner_3dMap_locationListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase@$refId::unRegisterLocationListener([])")
        
            // 开始调用
            ref.unRegisterLocationListener(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase::getLastKnownLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase@$refId::getLastKnownLocation([])")
        
            // 开始调用
            val result = ref.getLastKnownLocation()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationManagerBase@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.IPoint::obtain" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.IPoint::obtain([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.IPoint.obtain()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager::nativeCreateGLShaderManager" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager::nativeCreateGLShaderManager([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager.nativeCreateGLShaderManager()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager::nativeDestroyGLShaderManager" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager::nativeDestroyGLShaderManager([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager.nativeDestroyGLShaderManager(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationListener::onLocationChanged" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationListener@$refId::onLocationChanged([])")
        
            // 开始调用
            ref.onLocationChanged(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.DPoint::obtain" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.DPoint::obtain([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.DPoint.obtain()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.AMapNativeRenderer::nativeDrawLineInit" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeRenderer::nativeDrawLineInit([])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeRenderer.nativeDrawLineInit()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.FileUtil::getMapBaseStorage" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FileUtil::getMapBaseStorage([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.FileUtil.getMapBaseStorage(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.FileUtil::getExternalStroragePath" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FileUtil::getExternalStroragePath([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.FileUtil.getExternalStroragePath(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.FileUtil::createNoMediaFileIfNotExist" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FileUtil::createNoMediaFileIfNotExist([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.FileUtil.createNoMediaFileIfNotExist(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.FileUtil::saveFile" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FileUtil::saveFile([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.FileUtil.saveFile(var0, var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.FileUtil::getName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FileUtil::getName([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.FileUtil.getName(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.FileUtil::indexOfLastSeparator" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FileUtil::indexOfLastSeparator([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.FileUtil.indexOfLastSeparator(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.IAMapEngineCallback::reloadMapResource" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.IAMapEngineCallback
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.IAMapEngineCallback@$refId::reloadMapResource([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.reloadMapResource(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.IAMapEngineCallback::requireMapRender" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.IAMapEngineCallback
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.IAMapEngineCallback@$refId::requireMapRender([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.requireMapRender(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.IAMapEngineCallback::onMapRender" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.IAMapEngineCallback
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.IAMapEngineCallback@$refId::onMapRender([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onMapRender(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.IAMapEngineCallback::generateRequestId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.IAMapEngineCallback
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.IAMapEngineCallback@$refId::generateRequestId([])")
        
            // 开始调用
            val result = ref.generateRequestId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLTranslateAnimation::setFromPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTranslateAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLTranslateAnimation@$refId::setFromPoint([])")
        
            // 开始调用
            ref.setFromPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLTransformation::clear" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLTransformation@$refId::clear([])")
        
            // 开始调用
            ref.clear()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::initialize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::initialize([])")
        
            // 开始调用
            ref.initialize()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::setFillAfter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::setFillAfter([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillAfter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::setFillBefore" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::setFillBefore([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillBefore(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::setRepeatMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::setRepeatMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setRepeatMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::setStartOffset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::setStartOffset([\"var1\":$var1])")
        
            // 开始调用
            ref.setStartOffset(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::hasAlpha" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::hasAlpha([])")
        
            // 开始调用
            val result = ref.hasAlpha()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::addAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::addAnimation([])")
        
            // 开始调用
            ref.addAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::setStartTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::setStartTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setStartTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::getStartTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::getStartTime([])")
        
            // 开始调用
            val result = ref.getStartTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::restrictDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::restrictDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.restrictDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::computeDurationHint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::computeDurationHint([])")
        
            // 开始调用
            val result = ref.computeDurationHint()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::getTransformation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::getTransformation([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getTransformation(var1, var3)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::scaleCurrentDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::scaleCurrentDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.scaleCurrentDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::willChangeTransformationMatrix" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::willChangeTransformationMatrix([])")
        
            // 开始调用
            val result = ref.willChangeTransformationMatrix()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::willChangeBounds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::willChangeBounds([])")
        
            // 开始调用
            val result = ref.willChangeBounds()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimationSet::cleanAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimationSet@$refId::cleanAnimation([])")
        
            // 开始调用
            ref.cleanAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::cancel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::cancel([])")
        
            // 开始调用
            ref.cancel()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::detach" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::detach([])")
        
            // 开始调用
            ref.detach()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::isInitialized" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::isInitialized([])")
        
            // 开始调用
            val result = ref.isInitialized()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::initialize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::initialize([])")
        
            // 开始调用
            ref.initialize()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setInterpolator" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setInterpolator([\"var2\":$var2])")
        
            // 开始调用
            ref.setInterpolator(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setStartOffset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setStartOffset([\"var1\":$var1])")
        
            // 开始调用
            ref.setStartOffset(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::restrictDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::restrictDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.restrictDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::scaleCurrentDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::scaleCurrentDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.scaleCurrentDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setStartTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setStartTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setStartTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::start" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::start([])")
        
            // 开始调用
            ref.start()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::startNow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::startNow([])")
        
            // 开始调用
            ref.startNow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setRepeatMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setRepeatMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setRepeatMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setRepeatCount" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setRepeatCount([\"var1\":$var1])")
        
            // 开始调用
            ref.setRepeatCount(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::isFillEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::isFillEnabled([])")
        
            // 开始调用
            val result = ref.isFillEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setFillEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setFillEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setFillBefore" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setFillBefore([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillBefore(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setFillAfter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setFillAfter([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillAfter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setZAdjustment" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setZAdjustment([\"var1\":$var1])")
        
            // 开始调用
            ref.setZAdjustment(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setBackgroundColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setBackgroundColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setBackgroundColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setDetachWallpaper" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setDetachWallpaper([\"var1\":$var1])")
        
            // 开始调用
            ref.setDetachWallpaper(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getStartTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getStartTime([])")
        
            // 开始调用
            val result = ref.getStartTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getStartOffset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getStartOffset([])")
        
            // 开始调用
            val result = ref.getStartOffset()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getRepeatMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getRepeatMode([])")
        
            // 开始调用
            val result = ref.getRepeatMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getRepeatCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getRepeatCount([])")
        
            // 开始调用
            val result = ref.getRepeatCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getFillBefore" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getFillBefore([])")
        
            // 开始调用
            val result = ref.getFillBefore()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getFillAfter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getFillAfter([])")
        
            // 开始调用
            val result = ref.getFillAfter()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getZAdjustment" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getZAdjustment([])")
        
            // 开始调用
            val result = ref.getZAdjustment()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getBackgroundColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getBackgroundColor([])")
        
            // 开始调用
            val result = ref.getBackgroundColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getDetachWallpaper" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getDetachWallpaper([])")
        
            // 开始调用
            val result = ref.getDetachWallpaper()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::willChangeTransformationMatrix" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::willChangeTransformationMatrix([])")
        
            // 开始调用
            val result = ref.willChangeTransformationMatrix()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::willChangeBounds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::willChangeBounds([])")
        
            // 开始调用
            val result = ref.willChangeBounds()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::setAnimationListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::setAnimationListener([])")
        
            // 开始调用
            ref.setAnimationListener(object : com.amap.api.maps.model.animation.Animation.AnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.animation.GLAnimation::setAnimationListener_Callback" + refId)
        
                // 回调方法们
                override fun onAnimationStart(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationStart([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationStart",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onAnimationEnd(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationEnd([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationEnd",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::computeDurationHint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::computeDurationHint([])")
        
            // 开始调用
            val result = ref.computeDurationHint()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::getTransformation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as com.autonavi.amap.mapcore.animation.GLTransformation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::getTransformation([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getTransformation(var1, var3)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::hasEnded" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::hasEnded([])")
        
            // 开始调用
            val result = ref.hasEnded()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::initializeInvalidateRegion" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::initializeInvalidateRegion([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            ref.initializeInvalidateRegion(var1, var2, var3, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.animation.GLAnimation::hasAlpha" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.animation.GLAnimation@$refId::hasAlpha([])")
        
            // 开始调用
            val result = ref.hasAlpha()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getAnchorY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getAnchorY([])")
        
            // 开始调用
            val result = ref.getAnchorY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setAnchorY" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setAnchorY([\"var1\":$var1])")
        
            // 开始调用
            ref.setAnchorY(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getAnchorX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getAnchorX([])")
        
            // 开始调用
            val result = ref.getAnchorX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setAnchorX" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setAnchorX([\"var1\":$var1])")
        
            // 开始调用
            ref.setAnchorX(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getChangedCounter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getChangedCounter([])")
        
            // 开始调用
            val result = ref.getChangedCounter()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::resetChangedCounter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::resetChangedCounter([])")
        
            // 开始调用
            ref.resetChangedCounter()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isMapStateChange" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isMapStateChange([])")
        
            // 开始调用
            val result = ref.isMapStateChange()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getChangeRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getChangeRatio([])")
        
            // 开始调用
            val result = ref.getChangeRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getChangeGridRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getChangeGridRatio([])")
        
            // 开始调用
            val result = ref.getChangeGridRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::isZoomChanged" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isZoomChanged([])")
        
            // 开始调用
            val result = ref.isZoomChanged()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::isTiltChanged" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isTiltChanged([])")
        
            // 开始调用
            val result = ref.isTiltChanged()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::isBearingChanged" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isBearingChanged([])")
        
            // 开始调用
            val result = ref.isBearingChanged()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::isIndoorEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isIndoorEnable([])")
        
            // 开始调用
            val result = ref.isIndoorEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setIndoorEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setIndoorEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setIndoorEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isBuildingEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isBuildingEnable([])")
        
            // 开始调用
            val result = ref.isBuildingEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setBuildingEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setBuildingEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setBuildingEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isMapTextEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isMapTextEnable([])")
        
            // 开始调用
            val result = ref.isMapTextEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapTextEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapTextEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapTextEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isTrafficEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isTrafficEnabled([])")
        
            // 开始调用
            val result = ref.isTrafficEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setTrafficEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setTrafficEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrafficEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isNeedUpdateZoomControllerState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isNeedUpdateZoomControllerState([])")
        
            // 开始调用
            val result = ref.isNeedUpdateZoomControllerState()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getSX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getSX([])")
        
            // 开始调用
            val result = ref.getSX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setSX" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setSX([\"var1\":$var1])")
        
            // 开始调用
            ref.setSX(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getSY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getSY([])")
        
            // 开始调用
            val result = ref.getSY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setSY" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setSY([\"var1\":$var1])")
        
            // 开始调用
            ref.setSY(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapGeoCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapGeoCenter([])")
        
            // 开始调用
            val result = ref.getMapGeoCenter()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.MapConfig::getSZ" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getSZ([])")
        
            // 开始调用
            val result = ref.getSZ()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setSZ" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setSZ([\"var1\":$var1])")
        
            // 开始调用
            ref.setSZ(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getSC" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getSC([])")
        
            // 开始调用
            val result = ref.getSC()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setSC" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setSC([\"var1\":$var1])")
        
            // 开始调用
            ref.setSC(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getSR" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getSR([])")
        
            // 开始调用
            val result = ref.getSR()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setSR" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setSR([\"var1\":$var1])")
        
            // 开始调用
            ref.setSR(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getGeoRectangle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getGeoRectangle([])")
        
            // 开始调用
            val result = ref.getGeoRectangle()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMaxZoomLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMaxZoomLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMaxZoomLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::setMinZoomLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMinZoomLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMinZoomLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMaxZoomLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMaxZoomLevel([])")
        
            // 开始调用
            val result = ref.getMaxZoomLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getMinZoomLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMinZoomLevel([])")
        
            // 开始调用
            val result = ref.getMinZoomLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::isSetLimitZoomLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isSetLimitZoomLevel([])")
        
            // 开始调用
            val result = ref.isSetLimitZoomLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getLimitLatLngBounds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getLimitLatLngBounds([])")
        
            // 开始调用
            val result = ref.getLimitLatLngBounds()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.MapConfig::setLimitLatLngBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setLimitLatLngBounds([])")
        
            // 开始调用
            ref.setLimitLatLngBounds(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::resetMinMaxZoomPreference" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::resetMinMaxZoomPreference([])")
        
            // 开始调用
            ref.resetMinMaxZoomPreference()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::updateMapRectNextFrame" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::updateMapRectNextFrame([\"var1\":$var1])")
        
            // 开始调用
            ref.updateMapRectNextFrame(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapPerPixelUnitLength" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapPerPixelUnitLength([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapPerPixelUnitLength(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapPerPixelUnitLength" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapPerPixelUnitLength([])")
        
            // 开始调用
            val result = ref.getMapPerPixelUnitLength()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setCustomStylePath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setCustomStylePath([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomStylePath(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getCustomStylePath" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getCustomStylePath([])")
        
            // 开始调用
            val result = ref.getCustomStylePath()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getCustomStyleID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getCustomStyleID([])")
        
            // 开始调用
            val result = ref.getCustomStyleID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setCustomStyleID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setCustomStyleID([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomStyleID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::setCustomStyleEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setCustomStyleEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomStyleEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isCustomStyleEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isCustomStyleEnable([])")
        
            // 开始调用
            val result = ref.isCustomStyleEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapStyleTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapStyleTime([])")
        
            // 开始调用
            val result = ref.getMapStyleTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapStyleTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapStyleTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapStyleTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapStyleMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapStyleMode([])")
        
            // 开始调用
            val result = ref.getMapStyleMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapStyleMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapStyleMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapStyleMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapStyleState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapStyleState([])")
        
            // 开始调用
            val result = ref.getMapStyleState()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapStyleState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapStyleState([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapStyleState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::setCustomTextureResourcePath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setCustomTextureResourcePath([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomTextureResourcePath(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getCustomTextureResourcePath" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getCustomTextureResourcePath([])")
        
            // 开始调用
            val result = ref.getCustomTextureResourcePath()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::isProFunctionAuthEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isProFunctionAuthEnable([])")
        
            // 开始调用
            val result = ref.isProFunctionAuthEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setProFunctionAuthEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setProFunctionAuthEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setProFunctionAuthEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isUseProFunction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isUseProFunction([])")
        
            // 开始调用
            val result = ref.isUseProFunction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setUseProFunction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setUseProFunction([\"var1\":$var1])")
        
            // 开始调用
            ref.setUseProFunction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::setCustomBackgroundColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setCustomBackgroundColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomBackgroundColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getCustomBackgroundColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getCustomBackgroundColor([])")
        
            // 开始调用
            val result = ref.getCustomBackgroundColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapZoomScale" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapZoomScale([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapZoomScale(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapZoomScale" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapZoomScale([])")
        
            // 开始调用
            val result = ref.getMapZoomScale()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapWidth(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapWidth([])")
        
            // 开始调用
            val result = ref.getMapWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapHeight" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapHeight([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapHeight(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapHeight([])")
        
            // 开始调用
            val result = ref.getMapHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setMapLanguage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setMapLanguage([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapLanguage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::getMapLanguage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getMapLanguage([])")
        
            // 开始调用
            val result = ref.getMapLanguage()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setHideLogoEnble" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setHideLogoEnble([\"var1\":$var1])")
        
            // 开始调用
            ref.setHideLogoEnble(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isHideLogoEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isHideLogoEnable([])")
        
            // 开始调用
            val result = ref.isHideLogoEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setWorldMapEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setWorldMapEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setWorldMapEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::isWorldMapEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::isWorldMapEnable([])")
        
            // 开始调用
            val result = ref.isWorldMapEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::getSkyHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::getSkyHeight([])")
        
            // 开始调用
            val result = ref.getSkyHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.MapConfig::setSkyHeight" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::setSkyHeight([\"var1\":$var1])")
        
            // 开始调用
            ref.setSkyHeight(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.MapConfig::updateFinalMatrix" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.MapConfig
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.MapConfig@$refId::updateFinalMatrix([])")
        
            // 开始调用
            ref.updateFinalMatrix()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.HoverGestureMapMessage::obtain" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.HoverGestureMapMessage::obtain([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.message.HoverGestureMapMessage.obtain(var0, var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.message.HoverGestureMapMessage::destory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.HoverGestureMapMessage::destory([])")
        
            // 开始调用
            com.autonavi.amap.mapcore.message.HoverGestureMapMessage.destory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.HoverGestureMapMessage::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.HoverGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.HoverGestureMapMessage@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.message.HoverGestureMapMessage::runCameraUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.HoverGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.HoverGestureMapMessage@$refId::runCameraUpdate([])")
        
            // 开始调用
            ref.runCameraUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::obtain" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.MoveGestureMapMessage::obtain([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.message.MoveGestureMapMessage.obtain(var0, var1.toFloat(), var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::destory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.MoveGestureMapMessage::destory([])")
        
            // 开始调用
            com.autonavi.amap.mapcore.message.MoveGestureMapMessage.destory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.MoveGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.MoveGestureMapMessage@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.message.MoveGestureMapMessage::runCameraUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.MoveGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.MoveGestureMapMessage@$refId::runCameraUpdate([])")
        
            // 开始调用
            ref.runCameraUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::obtain" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::obtain([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.message.ScaleGestureMapMessage.obtain(var0, var1.toFloat(), var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::destory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::destory([])")
        
            // 开始调用
            com.autonavi.amap.mapcore.message.ScaleGestureMapMessage.destory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.ScaleGestureMapMessage@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::runCameraUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.ScaleGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.ScaleGestureMapMessage@$refId::runCameraUpdate([])")
        
            // 开始调用
            ref.runCameraUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.AbstractGestureMapMessage@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::setState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.AbstractGestureMapMessage@$refId::setState([\"var1\":$var1])")
        
            // 开始调用
            ref.setState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::reset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.AbstractGestureMapMessage@$refId::reset([])")
        
            // 开始调用
            ref.reset()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::runCameraUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.AbstractGestureMapMessage@$refId::runCameraUpdate([])")
        
            // 开始调用
            ref.runCameraUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::getMapGestureState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.AbstractGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.AbstractGestureMapMessage@$refId::getMapGestureState([])")
        
            // 开始调用
            val result = ref.getMapGestureState()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::obtain" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.RotateGestureMapMessage::obtain([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.message.RotateGestureMapMessage.obtain(var0, var1.toFloat(), var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::destory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.RotateGestureMapMessage::destory([])")
        
            // 开始调用
            com.autonavi.amap.mapcore.message.RotateGestureMapMessage.destory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.RotateGestureMapMessage@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.message.RotateGestureMapMessage::runCameraUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.message.RotateGestureMapMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.message.RotateGestureMapMessage@$refId::runCameraUpdate([])")
        
            // 开始调用
            ref.runCameraUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.FPointBounds::builder" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FPointBounds::builder([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.FPointBounds.builder()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.FPointBounds::contains" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.FPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.FPointBounds
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FPointBounds@$refId::contains([])")
        
            // 开始调用
            val result = ref.contains(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.FPointBounds::intersects" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.FPointBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.FPointBounds
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FPointBounds@$refId::intersects([])")
        
            // 开始调用
            val result = ref.intersects(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AeUtil::loadLib" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AeUtil::loadLib([])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AeUtil.loadLib(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AeUtil::initResource" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AeUtil::initResource([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AeUtil.initResource(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.AeUtil::readAssetsFileAndSave" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
            // jsonable参数
            val var1 = args["var1"] as String
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AeUtil::readAssetsFileAndSave([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AeUtil.readAssetsFileAndSave(var0, var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.VirtualEarthProjection::clip" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.VirtualEarthProjection::clip([\"var0\":$var0, \"var2\":$var2, \"var4\":$var4])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.VirtualEarthProjection.clip(var0, var2, var4)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.VirtualEarthProjection::latLongToPixels" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.VirtualEarthProjection::latLongToPixels([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.VirtualEarthProjection.latLongToPixels(var0, var1, var2)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.VirtualEarthProjection::pixelsToLatLong" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.VirtualEarthProjection::pixelsToLatLong([\"var0\":$var0, \"var2\":$var2, \"var4\":$var4])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.VirtualEarthProjection.pixelsToLatLong(var0, var2, var4)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Rectangle::getBeyond180Mode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Rectangle@$refId::getBeyond180Mode([])")
        
            // 开始调用
            val result = ref.getBeyond180Mode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Rectangle::contains" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Rectangle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Rectangle@$refId::contains([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.contains(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getGpsAccuracyStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getGpsAccuracyStatus([])")
        
            // 开始调用
            val result = ref.getGpsAccuracyStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setGpsAccuracyStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setGpsAccuracyStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setGpsAccuracyStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getLocationType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getLocationType([])")
        
            // 开始调用
            val result = ref.getLocationType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setLocationType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setLocationType([\"var1\":$var1])")
        
            // 开始调用
            ref.setLocationType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getLocationDetail" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getLocationDetail([])")
        
            // 开始调用
            val result = ref.getLocationDetail()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setLocationDetail" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setLocationDetail([\"var1\":$var1])")
        
            // 开始调用
            ref.setLocationDetail(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getErrorCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getErrorCode([])")
        
            // 开始调用
            val result = ref.getErrorCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setErrorCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setErrorCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setErrorCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getErrorInfo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getErrorInfo([])")
        
            // 开始调用
            val result = ref.getErrorInfo()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setErrorInfo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setErrorInfo([\"var1\":$var1])")
        
            // 开始调用
            ref.setErrorInfo(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getCountry" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getCountry([])")
        
            // 开始调用
            val result = ref.getCountry()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setCountry" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setCountry([\"var1\":$var1])")
        
            // 开始调用
            ref.setCountry(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getRoad([])")
        
            // 开始调用
            val result = ref.getRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getAddress([])")
        
            // 开始调用
            val result = ref.getAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setAddress([\"var1\":$var1])")
        
            // 开始调用
            ref.setAddress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getProvince([])")
        
            // 开始调用
            val result = ref.getProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getDistrict([])")
        
            // 开始调用
            val result = ref.getDistrict()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setDistrict" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setDistrict([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrict(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getPoiName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getPoiName([])")
        
            // 开始调用
            val result = ref.getPoiName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setPoiName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setPoiName([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getLatitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getLatitude([])")
        
            // 开始调用
            val result = ref.getLatitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setLatitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setLatitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLatitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getLongitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getLongitude([])")
        
            // 开始调用
            val result = ref.getLongitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setLongitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setLongitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLongitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getSatellites" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getSatellites([])")
        
            // 开始调用
            val result = ref.getSatellites()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setSatellites" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setSatellites([\"var1\":$var1])")
        
            // 开始调用
            ref.setSatellites(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getStreet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getStreet([])")
        
            // 开始调用
            val result = ref.getStreet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setStreet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setStreet([\"var1\":$var1])")
        
            // 开始调用
            ref.setStreet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getStreetNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getStreetNum([])")
        
            // 开始调用
            val result = ref.getStreetNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setNumber" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setNumber([\"var1\":$var1])")
        
            // 开始调用
            ref.setNumber(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setOffset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setOffset([\"var1\":$var1])")
        
            // 开始调用
            ref.setOffset(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::isOffset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::isOffset([])")
        
            // 开始调用
            val result = ref.isOffset()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getAoiName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getAoiName([])")
        
            // 开始调用
            val result = ref.getAoiName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setAoiName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setAoiName([\"var1\":$var1])")
        
            // 开始调用
            ref.setAoiName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getBuildingId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getBuildingId([])")
        
            // 开始调用
            val result = ref.getBuildingId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setBuildingId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setBuildingId([\"var1\":$var1])")
        
            // 开始调用
            ref.setBuildingId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getFloor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getFloor([])")
        
            // 开始调用
            val result = ref.getFloor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::setFloor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::setFloor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFloor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::toStr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::toStr([])")
        
            // 开始调用
            val result = ref.toStr()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getAccuracy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getAccuracy([])")
        
            // 开始调用
            val result = ref.getAccuracy()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getBearing" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getBearing([])")
        
            // 开始调用
            val result = ref.getBearing()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getAltitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getAltitude([])")
        
            // 开始调用
            val result = ref.getAltitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getSpeed" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getSpeed([])")
        
            // 开始调用
            val result = ref.getSpeed()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::getProvider" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::getProvider([])")
        
            // 开始调用
            val result = ref.getProvider()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_location::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_location
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_location@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.FPoint3::setColorIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.FPoint3
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FPoint3@$refId::setColorIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setColorIndex(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.FPointBounds.Builder::build" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.FPointBounds.Builder
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FPointBounds.Builder@$refId::build([])")
        
            // 开始调用
            val result = ref.build()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::getAPIKEY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption::getAPIKEY([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.Inner_3dMap_locationOption.getAPIKEY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isMockEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isMockEnable([])")
        
            // 开始调用
            val result = ref.isMockEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setMockEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setMockEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setMockEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::getInterval" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::getInterval([])")
        
            // 开始调用
            val result = ref.getInterval()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setInterval" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setInterval([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setInterval(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isOnceLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isOnceLocation([])")
        
            // 开始调用
            val result = ref.isOnceLocation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setOnceLocation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setOnceLocation([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setOnceLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isNeedAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isNeedAddress([])")
        
            // 开始调用
            val result = ref.isNeedAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setNeedAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setNeedAddress([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setNeedAddress(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isWifiActiveScan" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isWifiActiveScan([])")
        
            // 开始调用
            val result = ref.isWifiActiveScan()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setWifiActiveScan" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setWifiActiveScan([\"var1\":$var1])")
        
            // 开始调用
            ref.setWifiActiveScan(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isWifiScan" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isWifiScan([])")
        
            // 开始调用
            val result = ref.isWifiScan()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setWifiScan" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setWifiScan([\"var1\":$var1])")
        
            // 开始调用
            ref.setWifiScan(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::getLocationMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::getLocationMode([])")
        
            // 开始调用
            val result = ref.getLocationMode()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::getLocationProtocol" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::getLocationProtocol([])")
        
            // 开始调用
            val result = ref.getLocationProtocol()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setLocationMode" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationMode.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setLocationMode([])")
        
            // 开始调用
            val result = ref.setLocationMode(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setLocationProtocol" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var0 = com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationProtocol.values()[args["var0"] as Int]
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setLocationProtocol([])")
        
            // 开始调用
            com.autonavi.amap.mapcore.Inner_3dMap_locationOption.setLocationProtocol(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isKillProcess" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isKillProcess([])")
        
            // 开始调用
            val result = ref.isKillProcess()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setKillProcess" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setKillProcess([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setKillProcess(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isGpsFirst" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isGpsFirst([])")
        
            // 开始调用
            val result = ref.isGpsFirst()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setGpsFirst" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setGpsFirst([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setGpsFirst(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::getHttpTimeOut" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::getHttpTimeOut([])")
        
            // 开始调用
            val result = ref.getHttpTimeOut()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setHttpTimeOut" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setHttpTimeOut([\"var1\":$var1])")
        
            // 开始调用
            ref.setHttpTimeOut(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isOffset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isOffset([])")
        
            // 开始调用
            val result = ref.isOffset()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setOffset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setOffset([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setOffset(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isLocationCacheEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isLocationCacheEnable([])")
        
            // 开始调用
            val result = ref.isLocationCacheEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setLocationCacheEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setLocationCacheEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setLocationCacheEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isOnceLocationLatest" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isOnceLocationLatest([])")
        
            // 开始调用
            val result = ref.isOnceLocationLatest()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setOnceLocationLatest" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setOnceLocationLatest([\"var1\":$var1])")
        
            // 开始调用
            ref.setOnceLocationLatest(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::isSensorEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::isSensorEnable([])")
        
            // 开始调用
            val result = ref.isSensorEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Inner_3dMap_locationOption::setSensorEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.Inner_3dMap_locationOption
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Inner_3dMap_locationOption@$refId::setSensorEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setSensorEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.FPoint::obtain" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.FPoint::obtain([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.FPoint.obtain()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreate([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeSetGLShaderManager" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeSetGLShaderManager([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeSetGLShaderManager(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeDestroy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeDestroy([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeDestroy(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setStartParticleSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setStartParticleSize([\"var0\":$var0, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setStartParticleSize(var0, var2.toFloat(), var3.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setMaxParticles" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setMaxParticles([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setMaxParticles(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setDuration([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setDuration(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleLifeTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleLifeTime([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setParticleLifeTime(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleStartSpeed" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleStartSpeed([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setParticleStartSpeed(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setLoop" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setLoop([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setLoop(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleShapeModule" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleShapeModule([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setParticleShapeModule(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleEmission" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleEmission([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setParticleEmission(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::getCurrentParticleNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::getCurrentParticleNum([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.getCurrentParticleNum(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleOverLifeModule" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setParticleOverLifeModule([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setParticleOverLifeModule(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setPreWram" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setPreWram([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setPreWram(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::setStartColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::setStartColor([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.setStartColor(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeSetTextureId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeSetTextureId([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeSetTextureId(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateParticleEmissionModule" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateParticleEmissionModule([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateParticleEmissionModule(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateSinglePointParticleShape" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateSinglePointParticleShape([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateSinglePointParticleShape(var0.toFloat(), var1.toFloat(), var2.toFloat(), var3)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateRectParticleShape" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateRectParticleShape([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateRectParticleShape(var0.toFloat(), var1.toFloat(), var2.toFloat(), var3.toFloat(), var4)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateRandomColorBetWeenTwoConstants" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
            // jsonable参数
            val var6 = args["var6"] as Double
            // jsonable参数
            val var7 = args["var7"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateRandomColorBetWeenTwoConstants([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6, \"var7\":$var7])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateRandomColorBetWeenTwoConstants(var0.toFloat(), var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5.toFloat(), var6.toFloat(), var7.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateParticleOverLifeModule" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateParticleOverLifeModule([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateParticleOverLifeModule()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateConstantRotationOverLife" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateConstantRotationOverLife([\"var0\":$var0])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateConstantRotationOverLife(var0.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateRandomVelocityBetweenTwoConstants" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateRandomVelocityBetweenTwoConstants([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateRandomVelocityBetweenTwoConstants(var0.toFloat(), var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateCurveSizeOverLife" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeCreateCurveSizeOverLife([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeCreateCurveSizeOverLife(var0.toFloat(), var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeSetOverLifeItem" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeSetOverLifeItem([\"var0\":$var0, \"var2\":$var2, \"var4\":$var4])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeSetOverLifeItem(var0, var2, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseVelocityOverLife" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseVelocityOverLife([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeReleaseVelocityOverLife(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseColorGenerate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseColorGenerate([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeReleaseColorGenerate(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseParticleEmissonModule" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseParticleEmissonModule([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeReleaseParticleEmissonModule(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseParticleOverLifeModule" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseParticleOverLifeModule([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeReleaseParticleOverLifeModule(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseParticleShapeModule" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseParticleShapeModule([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeReleaseParticleShapeModule(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseRotationOverLife" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseRotationOverLife([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeReleaseRotationOverLife(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseSizeOverLife" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeParticleSystem::nativeReleaseSizeOverLife([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeParticleSystem.nativeReleaseSizeOverLife(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AeUtil.ZipCompressProgressListener::onFinishProgress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AeUtil.ZipCompressProgressListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AeUtil.ZipCompressProgressListener@$refId::onFinishProgress([\"var1\":$var1])")
        
            // 开始调用
            ref.onFinishProgress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::runCameraUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AbstractCameraUpdateMessage@$refId::runCameraUpdate([])")
        
            // 开始调用
            ref.runCameraUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::mergeCameraUpdateDelegate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AbstractCameraUpdateMessage@$refId::mergeCameraUpdateDelegate([])")
        
            // 开始调用
            ref.mergeCameraUpdateDelegate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::generateMapAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapEngine
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.AbstractCameraUpdateMessage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AbstractCameraUpdateMessage@$refId::generateMapAnimation([])")
        
            // 开始调用
            ref.generateMapAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeCreate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeCreate([])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.AMapNativeBuildingRenderer.nativeCreate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeClearBuildingOptions" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeClearBuildingOptions([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeBuildingRenderer.nativeClearBuildingOptions(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::addBuildingOptions" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::addBuildingOptions([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeBuildingRenderer.addBuildingOptions(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeDestory" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeDestory([\"var0\":$var0])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeBuildingRenderer.nativeDestory(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeSetGLShaderManager" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.AMapNativeBuildingRenderer::nativeSetGLShaderManager([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            com.autonavi.amap.mapcore.AMapNativeBuildingRenderer.nativeSetGLShaderManager(var0, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.Convert::getBit" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Byte
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Convert::getBit([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.Convert.getBit(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.Convert::getNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Byte
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.Convert::getNum([\"var0\":$var0, \"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = com.autonavi.amap.mapcore.Convert.getNum(var0, var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::addItems" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.MultiPointItem>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::addItems([])")
        
            // 开始调用
            ref.addItems(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::addItem" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MultiPointItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::addItem([])")
        
            // 开始调用
            ref.addItem(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::destroy([\"var1\":$var1])")
        
            // 开始调用
            ref.destroy(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::onClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::onClick([])")
        
            // 开始调用
            val result = ref.onClick(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::setAnchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::setAnchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setAnchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay::remove" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMultiPointOverlay@$refId::remove([\"var1\":$var1])")
        
            // 开始调用
            ref.remove(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::equalsRemote" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::equalsRemote([])")
        
            // 开始调用
            val result = ref.equalsRemote(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::hashCodeRemote" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::hashCodeRemote([])")
        
            // 开始调用
            val result = ref.hashCodeRemote()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::isAboveMaskLayer" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::isAboveMaskLayer([])")
        
            // 开始调用
            val result = ref.isAboveMaskLayer()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlay::setAboveMaskLayer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlay@$refId::setAboveMaskLayer([\"var1\":$var1])")
        
            // 开始调用
            ref.setAboveMaskLayer(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IText::setText" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::setText([\"var1\":$var1])")
        
            // 开始调用
            ref.setText(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IText::getText" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::getText([])")
        
            // 开始调用
            val result = ref.getText()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IText::setBackgroundColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::setBackgroundColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setBackgroundColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IText::getBackgroundColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::getBackgroundColor([])")
        
            // 开始调用
            val result = ref.getBackgroundColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IText::setFontColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::setFontColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFontColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IText::getFontColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::getFontColor([])")
        
            // 开始调用
            val result = ref.getFontColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IText::setFontSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::setFontSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setFontSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IText::getFontSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::getFontSize([])")
        
            // 开始调用
            val result = ref.getFontSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IText::setAlign" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::setAlign([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setAlign(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IText::getAlignX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::getAlignX([])")
        
            // 开始调用
            val result = ref.getAlignX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IText::getAlignY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IText
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IText@$refId::getAlignY([])")
        
            // 开始调用
            val result = ref.getAlignY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAnimation::setAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.animation.GLAnimation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAnimation@$refId::setAnimation([])")
        
            // 开始调用
            ref.setAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAnimation::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAnimation@$refId::startAnimation([])")
        
            // 开始调用
            val result = ref.startAnimation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAnimation::setAnimationListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAnimation@$refId::setAnimationListener([])")
        
            // 开始调用
            ref.setAnimationListener(object : com.amap.api.maps.model.animation.Animation.AnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAnimation::setAnimationListener_Callback" + refId)
        
                // 回调方法们
                override fun onAnimationStart(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationStart([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationStart",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onAnimationEnd(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationEnd([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationEnd",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setRotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setRotateAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::getRotateAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::getRotateAngle([])")
        
            // 开始调用
            val result = ref.getRotateAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setAnimation([])")
        
            // 开始调用
            ref.setAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::startAnimation([])")
        
            // 开始调用
            val result = ref.startAnimation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::remove([])")
        
            // 开始调用
            val result = ref.remove()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setZoomLimit" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setZoomLimit([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomLimit(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setGeoPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setGeoPoint([])")
        
            // 开始调用
            ref.setGeoPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::showInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::showInfoWindow([])")
        
            // 开始调用
            ref.showInfoWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IglModel::setModelFixedLength" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IglModel
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IglModel@$refId::setModelFixedLength([\"var1\":$var1])")
        
            // 开始调用
            ref.setModelFixedLength(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IArc::setStrokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IArc
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IArc@$refId::setStrokeWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IArc::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IArc
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IArc@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IArc::setStrokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IArc
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IArc@$refId::setStrokeColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IArc::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IArc
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IArc@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isIndoorSwitchEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isIndoorSwitchEnabled([])")
        
            // 开始调用
            val result = ref.isIndoorSwitchEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setIndoorSwitchEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setIndoorSwitchEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setIndoorSwitchEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setScaleControlsEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setScaleControlsEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setScaleControlsEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setZoomControlsEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setZoomControlsEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomControlsEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setCompassEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setCompassEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setCompassEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setMyLocationButtonEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setMyLocationButtonEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationButtonEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setScrollGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setScrollGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setScrollGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setZoomGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setZoomGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setTiltGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setTiltGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setTiltGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setRotateGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setRotateGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setAllGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setAllGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setAllGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setLogoPosition" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setLogoPosition([\"var1\":$var1])")
        
            // 开始调用
            ref.setLogoPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setZoomPosition" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setZoomPosition([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isScaleControlsEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isScaleControlsEnabled([])")
        
            // 开始调用
            val result = ref.isScaleControlsEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isZoomControlsEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isZoomControlsEnabled([])")
        
            // 开始调用
            val result = ref.isZoomControlsEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isCompassEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isCompassEnabled([])")
        
            // 开始调用
            val result = ref.isCompassEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isMyLocationButtonEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isMyLocationButtonEnabled([])")
        
            // 开始调用
            val result = ref.isMyLocationButtonEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isScrollGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isScrollGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isScrollGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isZoomGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isZoomGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isZoomGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isTiltGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isTiltGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isTiltGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isRotateGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isRotateGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isRotateGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::getLogoPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::getLogoPosition([])")
        
            // 开始调用
            val result = ref.getLogoPosition()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::getZoomPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::getZoomPosition([])")
        
            // 开始调用
            val result = ref.getZoomPosition()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setZoomInByScreenCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setZoomInByScreenCenter([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomInByScreenCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isZoomInByScreenCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isZoomInByScreenCenter([])")
        
            // 开始调用
            val result = ref.isZoomInByScreenCenter()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setLogoBottomMargin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setLogoBottomMargin([\"var1\":$var1])")
        
            // 开始调用
            ref.setLogoBottomMargin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setLogoLeftMargin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setLogoLeftMargin([\"var1\":$var1])")
        
            // 开始调用
            ref.setLogoLeftMargin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::getLogoMarginRate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::getLogoMarginRate([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getLogoMarginRate(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setLogoMarginRate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setLogoMarginRate([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setLogoMarginRate(var1, var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setGestureScaleByMapCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setGestureScaleByMapCenter([\"var1\":$var1])")
        
            // 开始调用
            ref.setGestureScaleByMapCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isGestureScaleByMapCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isGestureScaleByMapCenter([])")
        
            // 开始调用
            val result = ref.isGestureScaleByMapCenter()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::setLogoEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::setLogoEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setLogoEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::requestRefreshLogo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::requestRefreshLogo([])")
        
            // 开始调用
            ref.requestRefreshLogo()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IUiSettings::isLogoEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IUiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IUiSettings@$refId::isLogoEnable([])")
        
            // 开始调用
            val result = ref.isLogoEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::remove([])")
        
            // 开始调用
            val result = ref.remove()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::destroy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::destroy([\"var1\":$var1])")
        
            // 开始调用
            ref.destroy(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::setRotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::setRotateAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::getRotateAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::getRotateAngle([])")
        
            // 开始调用
            val result = ref.getRotateAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::equalsRemote" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::equalsRemote([])")
        
            // 开始调用
            val result = ref.equalsRemote(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::hashCodeRemote" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::hashCodeRemote([])")
        
            // 开始调用
            val result = ref.hashCodeRemote()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::setAnchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::setAnchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setAnchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::getAnchorU" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::getAnchorU([])")
        
            // 开始调用
            val result = ref.getAnchorU()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IOverlayImage::getAnchorV" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IOverlayImage
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IOverlayImage@$refId::getAnchorV([])")
        
            // 开始调用
            val result = ref.getAnchorV()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::setTopColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::setTopColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setTopColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::setSideColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::setSideColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setSideColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::getTopColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::getTopColor([])")
        
            // 开始调用
            val result = ref.getTopColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::getSideColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::getSideColor([])")
        
            // 开始调用
            val result = ref.getSideColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::setWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::setWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::set3DModel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::set3DModel([\"var1\":$var1])")
        
            // 开始调用
            ref.set3DModel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.INavigateArrow::is3DModel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.INavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.INavigateArrow@$refId::is3DModel([])")
        
            // 开始调用
            val result = ref.is3DModel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::setDimensions" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::setDimensions([\"var1\":$var1])")
        
            // 开始调用
            ref.setDimensions(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::getHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::getHeight([])")
        
            // 开始调用
            val result = ref.getHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::setPositionFromBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::setPositionFromBounds([])")
        
            // 开始调用
            ref.setPositionFromBounds(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::getBounds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::getBounds([])")
        
            // 开始调用
            val result = ref.getBounds()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::setBearing" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::setBearing([\"var1\":$var1])")
        
            // 开始调用
            ref.setBearing(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::getBearing" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::getBearing([])")
        
            // 开始调用
            val result = ref.getBearing()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::setTransparency" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::setTransparency([\"var1\":$var1])")
        
            // 开始调用
            ref.setTransparency(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::getTransparency" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::getTransparency([])")
        
            // 开始调用
            val result = ref.getTransparency()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IGroundOverlay::setImage" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IGroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IGroundOverlay@$refId::setImage([])")
        
            // 开始调用
            ref.setImage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::getColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::getColor([])")
        
            // 开始调用
            val result = ref.getColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::isGeodesic" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::isGeodesic([])")
        
            // 开始调用
            val result = ref.isGeodesic()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setGeodesic" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setGeodesic([\"var1\":$var1])")
        
            // 开始调用
            ref.setGeodesic(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setDottedLine" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setDottedLine([\"var1\":$var1])")
        
            // 开始调用
            ref.setDottedLine(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::isDottedLine" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::isDottedLine([])")
        
            // 开始调用
            val result = ref.isDottedLine()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::getNearestLatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::getNearestLatLng([])")
        
            // 开始调用
            val result = ref.getNearestLatLng(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setTransparency" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setTransparency([\"var1\":$var1])")
        
            // 开始调用
            ref.setTransparency(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setCustomTexture" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setCustomTexture([])")
        
            // 开始调用
            ref.setCustomTexture(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolylineOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setOptions([])")
        
            // 开始调用
            ref.setOptions(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::getOptions" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::getOptions([])")
        
            // 开始调用
            val result = ref.getOptions()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setCustemTextureIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as List<Int>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setCustemTextureIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustemTextureIndex(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setShownRatio" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setShownRatio([\"var1\":$var1])")
        
            // 开始调用
            ref.setShownRatio(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setShowRange" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setShowRange([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setShowRange(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::getShownRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::getShownRatio([])")
        
            // 开始调用
            val result = ref.getShownRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolyline::setCustomTextureList" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BitmapDescriptor>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolyline
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolyline@$refId::setCustomTextureList([])")
        
            // 开始调用
            ref.setCustomTextureList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setPeriod" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setPeriod([\"var1\":$var1])")
        
            // 开始调用
            ref.setPeriod(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::getPeriod" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::getPeriod([])")
        
            // 开始调用
            val result = ref.getPeriod()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setIcons" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BitmapDescriptor>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setIcons([])")
        
            // 开始调用
            ref.setIcons(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::set2Top" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::set2Top([])")
        
            // 开始调用
            ref.set2Top()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setFlat" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setFlat([\"var1\":$var1])")
        
            // 开始调用
            ref.setFlat(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::isFlat" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::isFlat([])")
        
            // 开始调用
            val result = ref.isFlat()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setPerspective" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setPerspective([\"var1\":$var1])")
        
            // 开始调用
            ref.setPerspective(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::isPerspective" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::isPerspective([])")
        
            // 开始调用
            val result = ref.isPerspective()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setIcon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setIcon([])")
        
            // 开始调用
            ref.setIcon(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setDraggable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setDraggable([\"var1\":$var1])")
        
            // 开始调用
            ref.setDraggable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::isDraggable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::isDraggable([])")
        
            // 开始调用
            val result = ref.isDraggable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::isRemoved" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::isRemoved([])")
        
            // 开始调用
            val result = ref.isRemoved()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::showInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::showInfoWindow([])")
        
            // 开始调用
            ref.showInfoWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::hideInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::hideInfoWindow([])")
        
            // 开始调用
            ref.hideInfoWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::isInfoWindowShown" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::isInfoWindowShown([])")
        
            // 开始调用
            val result = ref.isInfoWindowShown()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setGeoPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setGeoPoint([])")
        
            // 开始调用
            ref.setGeoPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::getGeoPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::getGeoPoint([])")
        
            // 开始调用
            val result = ref.getGeoPoint()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setPositionByPixels" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setPositionByPixels([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setPositionByPixels(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setBelowMaskLayer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setBelowMaskLayer([\"var1\":$var1])")
        
            // 开始调用
            ref.setBelowMaskLayer(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setAnimation([])")
        
            // 开始调用
            ref.setAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::startAnimation([])")
        
            // 开始调用
            val result = ref.startAnimation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarker::setAnimationListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarker
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarker@$refId::setAnimationListener([])")
        
            // 开始调用
            ref.setAnimationListener(object : com.amap.api.maps.model.animation.Animation.AnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IMarker::setAnimationListener_Callback" + refId)
        
                // 回调方法们
                override fun onAnimationStart(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationStart([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationStart",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onAnimationEnd(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationEnd([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationEnd",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMapListener::afterDrawFrame" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMapListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMapListener@$refId::afterDrawFrame([\"var1\":$var1])")
        
            // 开始调用
            ref.afterDrawFrame(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMapListener::afterDrawLabel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMapListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMapListener@$refId::afterDrawLabel([\"var1\":$var1])")
        
            // 开始调用
            ref.afterDrawLabel(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMapListener::beforeDrawLabel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMapListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMapListener@$refId::beforeDrawLabel([\"var1\":$var1])")
        
            // 开始调用
            ref.beforeDrawLabel(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMapListener::afterRendererOver" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMapListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMapListener@$refId::afterRendererOver([\"var1\":$var1])")
        
            // 开始调用
            ref.afterRendererOver(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMapListener::afterAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMapListener
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMapListener@$refId::afterAnimation([])")
        
            // 开始调用
            ref.afterAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::setInfoWindowAnimation([])")
        
            // 开始调用
            ref.setInfoWindowAnimation(var1, object : com.amap.api.maps.model.animation.Animation.AnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowAnimation_Callback" + refId)
        
                // 回调方法们
                override fun onAnimationStart(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationStart([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationStart",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onAnimationEnd(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationEnd([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationEnd",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowAppearAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::setInfoWindowAppearAnimation([])")
        
            // 开始调用
            ref.setInfoWindowAppearAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowBackColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::setInfoWindowBackColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowBackColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowBackEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::setInfoWindowBackEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowBackEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowBackScale" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::setInfoWindowBackScale([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setInfoWindowBackScale(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowDisappearAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::setInfoWindowDisappearAnimation([])")
        
            // 开始调用
            ref.setInfoWindowDisappearAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::setInfoWindowMovingAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::setInfoWindowMovingAnimation([])")
        
            // 开始调用
            ref.setInfoWindowMovingAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IInfoWindowManager::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IInfoWindowManager
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IInfoWindowManager@$refId::startAnimation([])")
        
            // 开始调用
            ref.startAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::destroy([\"var1\":$var1])")
        
            // 开始调用
            ref.destroy(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::clearTileCache" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::clearTileCache([])")
        
            // 开始调用
            ref.clearTileCache()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::equalsRemote" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::equalsRemote([])")
        
            // 开始调用
            val result = ref.equalsRemote(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ITileOverlay::hashCodeRemote" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ITileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ITileOverlay@$refId::hashCodeRemote([])")
        
            // 开始调用
            val result = ref.hashCodeRemote()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::fromScreenLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Point
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::fromScreenLocation([])")
        
            // 开始调用
            val result = ref.fromScreenLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::toScreenLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::toScreenLocation([])")
        
            // 开始调用
            val result = ref.toScreenLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::toMapLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::toMapLocation([])")
        
            // 开始调用
            val result = ref.toMapLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::getVisibleRegion" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::getVisibleRegion([])")
        
            // 开始调用
            val result = ref.getVisibleRegion()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::toMapLenWithWin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::toMapLenWithWin([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.toMapLenWithWin(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::fromBoundsToTile" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::fromBoundsToTile([\"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = ref.fromBoundsToTile(var1, var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::getMapBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::getMapBounds([\"var2\":$var2])")
        
            // 开始调用
            val result = ref.getMapBounds(var1, var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IProjection::getCameraInfo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IProjection
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IProjection@$refId::getCameraInfo([])")
        
            // 开始调用
            val result = ref.getCameraInfo()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::setCenter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::setCenter([])")
        
            // 开始调用
            ref.setCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::setRadius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::setRadius([\"var1\":$var1])")
        
            // 开始调用
            ref.setRadius(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::setStrokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::setStrokeWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::setStrokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::setStrokeColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::setFillColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::setFillColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::getFillColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::getFillColor([])")
        
            // 开始调用
            val result = ref.getFillColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::contains" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::contains([])")
        
            // 开始调用
            val result = ref.contains(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::setHoleOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BaseHoleOptions>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::setHoleOptions([])")
        
            // 开始调用
            ref.setHoleOptions(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::getDottedLineType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::getDottedLineType([])")
        
            // 开始调用
            val result = ref.getDottedLineType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.ICircle::setDottedLineType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.ICircle
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.ICircle@$refId::setDottedLineType([\"var1\":$var1])")
        
            // 开始调用
            ref.setDottedLineType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getCameraPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getCameraPosition([])")
        
            // 开始调用
            val result = ref.getCameraPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMaxZoomLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMaxZoomLevel([])")
        
            // 开始调用
            val result = ref.getMaxZoomLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMinZoomLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMinZoomLevel([])")
        
            // 开始调用
            val result = ref.getMinZoomLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::moveCamera" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CameraUpdate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::moveCamera([])")
        
            // 开始调用
            ref.moveCamera(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::animateCamera" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CameraUpdate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::animateCamera([])")
        
            // 开始调用
            ref.animateCamera(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::animateCameraWithCallback" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CameraUpdate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::animateCameraWithCallback([])")
        
            // 开始调用
            ref.animateCameraWithCallback(var1, object : com.amap.api.maps.AMap.CancelableCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::animateCameraWithCallback_Callback" + refId)
        
                // 回调方法们
                override fun onFinish(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onFinish([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onFinish",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCancel(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCancel([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCancel",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::animateCameraWithDurationAndCallback" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CameraUpdate
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::animateCameraWithDurationAndCallback([\"var2\":$var2])")
        
            // 开始调用
            ref.animateCameraWithDurationAndCallback(var1, var2, object : com.amap.api.maps.AMap.CancelableCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::animateCameraWithDurationAndCallback_Callback" + refId)
        
                // 回调方法们
                override fun onFinish(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onFinish([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onFinish",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCancel(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCancel([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CancelableCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCancel",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::stopAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::stopAnimation([])")
        
            // 开始调用
            ref.stopAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addNavigateArrow" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addNavigateArrow([])")
        
            // 开始调用
            val result = ref.addNavigateArrow(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addPolyline" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolylineOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addPolyline([])")
        
            // 开始调用
            val result = ref.addPolyline(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addCircle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CircleOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addCircle([])")
        
            // 开始调用
            val result = ref.addCircle(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addArc" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.ArcOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addArc([])")
        
            // 开始调用
            val result = ref.addArc(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addPolygon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolygonOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addPolygon([])")
        
            // 开始调用
            val result = ref.addPolygon(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addGroundOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addGroundOverlay([])")
        
            // 开始调用
            val result = ref.addGroundOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addMultiPointOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MultiPointOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addMultiPointOverlay([])")
        
            // 开始调用
            val result = ref.addMultiPointOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addMarker" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MarkerOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addMarker([])")
        
            // 开始调用
            val result = ref.addMarker(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addText" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.TextOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addText([])")
        
            // 开始调用
            val result = ref.addText(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addTileOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.TileOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addTileOverlay([])")
        
            // 开始调用
            val result = ref.addTileOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::clear" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::clear([])")
        
            // 开始调用
            ref.clear()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapType([])")
        
            // 开始调用
            val result = ref.getMapType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMapType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMapType([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::isTrafficEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::isTrafficEnabled([])")
        
            // 开始调用
            val result = ref.isTrafficEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setTrafficEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setTrafficEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrafficEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::isIndoorEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::isIndoorEnabled([])")
        
            // 开始调用
            val result = ref.isIndoorEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setIndoorEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setIndoorEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setIndoorEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::set3DBuildingEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::set3DBuildingEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.set3DBuildingEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::isMyLocationEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::isMyLocationEnabled([])")
        
            // 开始调用
            val result = ref.isMyLocationEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMyLocationEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMyLocationEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setLoadOfflineData" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setLoadOfflineData([\"var1\":$var1])")
        
            // 开始调用
            ref.setLoadOfflineData(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMyLocationStyle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MyLocationStyle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMyLocationStyle([])")
        
            // 开始调用
            ref.setMyLocationStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMyLocationType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMyLocationType([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMapTextEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMapTextEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapTextEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setRoadArrowEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setRoadArrowEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoadArrowEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMyTrafficStyle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MyTrafficStyle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMyTrafficStyle([])")
        
            // 开始调用
            ref.setMyTrafficStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMyLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMyLocation([])")
        
            // 开始调用
            val result = ref.getMyLocation()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setLocationSource" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.LocationSource
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setLocationSource([])")
        
            // 开始调用
            ref.setLocationSource(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMyLocationRotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMyLocationRotateAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationRotateAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getAMapUiSettings" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getAMapUiSettings([])")
        
            // 开始调用
            val result = ref.getAMapUiSettings()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getAMapProjection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getAMapProjection([])")
        
            // 开始调用
            val result = ref.getAMapProjection()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnCameraChangeListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnCameraChangeListener([])")
        
            // 开始调用
            ref.setOnCameraChangeListener(object : com.amap.api.maps.AMap.OnCameraChangeListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnCameraChangeListener_Callback" + refId)
        
                // 回调方法们
                override fun onCameraChange(var1: com.amap.api.maps.model.CameraPosition): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCameraChange([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnCameraChangeListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCameraChange",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCameraChangeFinish(var1: com.amap.api.maps.model.CameraPosition): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCameraChangeFinish([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnCameraChangeListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCameraChangeFinish",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMapClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMapClickListener([])")
        
            // 开始调用
            ref.setOnMapClickListener(object : com.amap.api.maps.AMap.OnMapClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMapClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onMapClick(var1: com.amap.api.maps.model.LatLng): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMapTouchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMapTouchListener([])")
        
            // 开始调用
            ref.setOnMapTouchListener(object : com.amap.api.maps.AMap.OnMapTouchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMapTouchListener_Callback" + refId)
        
                // 回调方法们
                override fun onTouch(var1: android.view.MotionEvent): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onTouch([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapTouchListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onTouch",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMapLongClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMapLongClickListener([])")
        
            // 开始调用
            ref.setOnMapLongClickListener(object : com.amap.api.maps.AMap.OnMapLongClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMapLongClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onMapLongClick(var1: com.amap.api.maps.model.LatLng): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapLongClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapLongClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapLongClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMarkerClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMarkerClickListener([])")
        
            // 开始调用
            ref.setOnMarkerClickListener(object : com.amap.api.maps.AMap.OnMarkerClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMarkerClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onMarkerClick(var1: com.amap.api.maps.model.Marker): Boolean {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
                    return true
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnPolylineClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnPolylineClickListener([])")
        
            // 开始调用
            ref.setOnPolylineClickListener(object : com.amap.api.maps.AMap.OnPolylineClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnPolylineClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onPolylineClick(var1: com.amap.api.maps.model.Polyline): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPolylineClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnPolylineClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onPolylineClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMarkerDragListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMarkerDragListener([])")
        
            // 开始调用
            ref.setOnMarkerDragListener(object : com.amap.api.maps.AMap.OnMarkerDragListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMarkerDragListener_Callback" + refId)
        
                // 回调方法们
                override fun onMarkerDragStart(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerDragStart([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerDragListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerDragStart",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMarkerDrag(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerDrag([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerDragListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerDrag",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMarkerDragEnd(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerDragEnd([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerDragListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerDragEnd",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMaploadedListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMaploadedListener([])")
        
            // 开始调用
            ref.setOnMaploadedListener(object : com.amap.api.maps.AMap.OnMapLoadedListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMaploadedListener_Callback" + refId)
        
                // 回调方法们
                override fun onMapLoaded(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapLoaded([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapLoadedListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapLoaded",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnInfoWindowClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnInfoWindowClickListener([])")
        
            // 开始调用
            ref.setOnInfoWindowClickListener(object : com.amap.api.maps.AMap.OnInfoWindowClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnInfoWindowClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onInfoWindowClick(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onInfoWindowClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnInfoWindowClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onInfoWindowClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMyLocationChangeListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMyLocationChangeListener([])")
        
            // 开始调用
            ref.setOnMyLocationChangeListener(object : com.amap.api.maps.AMap.OnMyLocationChangeListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMyLocationChangeListener_Callback" + refId)
        
                // 回调方法们
                override fun onMyLocationChange(var1: android.location.Location): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMyLocationChange([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMyLocationChangeListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMyLocationChange",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnPOIClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnPOIClickListener([])")
        
            // 开始调用
            ref.setOnPOIClickListener(object : com.amap.api.maps.AMap.OnPOIClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnPOIClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onPOIClick(var1: com.amap.api.maps.model.Poi): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPOIClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnPOIClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onPOIClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setInfoWindowAdapter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.AMap.InfoWindowAdapter
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setInfoWindowAdapter([])")
        
            // 开始调用
            ref.setInfoWindowAdapter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnIndoorBuildingActiveListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnIndoorBuildingActiveListener([])")
        
            // 开始调用
            ref.setOnIndoorBuildingActiveListener(object : com.amap.api.maps.AMap.OnIndoorBuildingActiveListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnIndoorBuildingActiveListener_Callback" + refId)
        
                // 回调方法们
                override fun OnIndoorBuilding(var1: com.amap.api.maps.model.IndoorBuildingInfo): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: OnIndoorBuilding([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnIndoorBuildingActiveListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::OnIndoorBuilding",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapPrintScreen" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapPrintScreen([])")
        
            // 开始调用
            ref.getMapPrintScreen(object : com.amap.api.maps.AMap.onMapPrintScreenListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::getMapPrintScreen_Callback" + refId)
        
                // 回调方法们
                override fun onMapPrint(var1: android.graphics.drawable.Drawable): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapPrint([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.onMapPrintScreenListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapPrint",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapScreenShot" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapScreenShot([])")
        
            // 开始调用
            ref.getMapScreenShot(object : com.amap.api.maps.AMap.OnMapScreenShotListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::getMapScreenShot_Callback" + refId)
        
                // 回调方法们
                override fun onMapScreenShot(var1: android.graphics.Bitmap): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapScreenShot([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapScreenShotListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapScreenShot",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMapScreenShot(var1: android.graphics.Bitmap, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapScreenShot([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapScreenShotListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapScreenShot",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 },
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getScalePerPixel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getScalePerPixel([])")
        
            // 开始调用
            val result = ref.getScalePerPixel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setRunLowFrame" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setRunLowFrame([\"var1\":$var1])")
        
            // 开始调用
            ref.setRunLowFrame(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::removecache" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::removecache([])")
        
            // 开始调用
            ref.removecache()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setCustomRenderer" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CustomRenderer
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setCustomRenderer([])")
        
            // 开始调用
            ref.setCustomRenderer(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setCenterToPixel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setCenterToPixel([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setCenterToPixel(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMapTextZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMapTextZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapTextZIndex(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapTextZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapTextZIndex([])")
        
            // 开始调用
            val result = ref.getMapTextZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::reloadMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::reloadMap([])")
        
            // 开始调用
            ref.reloadMap()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setRenderFps" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setRenderFps([\"var1\":$var1])")
        
            // 开始调用
            ref.setRenderFps(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setIndoorBuildingInfo" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.IndoorBuildingInfo
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setIndoorBuildingInfo([])")
        
            // 开始调用
            ref.setIndoorBuildingInfo(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setAMapGestureListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setAMapGestureListener([])")
        
            // 开始调用
            ref.setAMapGestureListener(object : com.amap.api.maps.model.AMapGestureListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setAMapGestureListener_Callback" + refId)
        
                // 回调方法们
                override fun onDoubleTap(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDoubleTap([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onDoubleTap",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onSingleTap(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onSingleTap([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onSingleTap",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onFling(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onFling([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onFling",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onScroll(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onScroll([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onScroll",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onLongPress(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onLongPress([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onLongPress",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onDown(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDown([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onDown",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onUp(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onUp([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onUp",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMapStable(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapStable([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapStable",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getZoomToSpanLevel" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getZoomToSpanLevel([])")
        
            // 开始调用
            val result = ref.getZoomToSpanLevel(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getInfoWindowAnimationManager" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getInfoWindowAnimationManager([])")
        
            // 开始调用
            val result = ref.getInfoWindowAnimationManager()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMaskLayerParams" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMaskLayerParams([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6])")
        
            // 开始调用
            ref.setMaskLayerParams(var1, var2, var3, var4, var5, var6)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMaxZoomLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMaxZoomLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMaxZoomLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMinZoomLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMinZoomLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMinZoomLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::resetMinMaxZoomPreference" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::resetMinMaxZoomPreference([])")
        
            // 开始调用
            ref.resetMinMaxZoomPreference()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMapStatusLimits" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMapStatusLimits([])")
        
            // 开始调用
            ref.setMapStatusLimits(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setCustomMapStylePath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setCustomMapStylePath([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomMapStylePath(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMapCustomEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMapCustomEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapCustomEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::onChangeFinish" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::onChangeFinish([])")
        
            // 开始调用
            ref.onChangeFinish()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setZoomScaleParam" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setZoomScaleParam([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomScaleParam(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::onFling" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::onFling([])")
        
            // 开始调用
            ref.onFling()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapWidth([])")
        
            // 开始调用
            val result = ref.getMapWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapHeight([])")
        
            // 开始调用
            val result = ref.getMapHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getCameraAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getCameraAngle([])")
        
            // 开始调用
            val result = ref.getCameraAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getSkyHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getSkyHeight([])")
        
            // 开始调用
            val result = ref.getSkyHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::isMaploaded" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::isMaploaded([])")
        
            // 开始调用
            val result = ref.isMaploaded()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapConfig" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapConfig([])")
        
            // 开始调用
            val result = ref.getMapConfig()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getView" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getView([])")
        
            // 开始调用
            val result = ref.getView()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setZOrderOnTop" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setZOrderOnTop([\"var1\":$var1])")
        
            // 开始调用
            ref.setZOrderOnTop(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setVisibilityEx" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setVisibilityEx([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisibilityEx(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::onActivityPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::onActivityPause([])")
        
            // 开始调用
            ref.onActivityPause()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::onActivityResume" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::onActivityResume([])")
        
            // 开始调用
            ref.onActivityResume()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::createGLOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::createGLOverlay([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.createGLOverlay(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getGlOverlayMgrPtr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getGlOverlayMgrPtr([])")
        
            // 开始调用
            val result = ref.getGlOverlayMgrPtr()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addCrossVector" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CrossOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addCrossVector([])")
        
            // 开始调用
            val result = ref.addCrossVector(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addNaviRouteOverlay" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addNaviRouteOverlay([])")
        
            // 开始调用
            val result = ref.addNaviRouteOverlay()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addOverlayTexture" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.ae.gmap.gloverlay.GLTextureProperty
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addOverlayTexture([\"var1\":$var1])")
        
            // 开始调用
            ref.addOverlayTexture(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::onTouchEvent" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.view.MotionEvent
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::onTouchEvent([])")
        
            // 开始调用
            val result = ref.onTouchEvent(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::canStopMapRender" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::canStopMapRender([])")
        
            // 开始调用
            val result = ref.canStopMapRender()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setCustomTextureResourcePath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setCustomTextureResourcePath([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomTextureResourcePath(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMyLocationStyle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMyLocationStyle([])")
        
            // 开始调用
            val result = ref.getMyLocationStyle()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getRenderMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getRenderMode([])")
        
            // 开始调用
            val result = ref.getRenderMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::destroySurface" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::destroySurface([\"var1\":$var1])")
        
            // 开始调用
            ref.destroySurface(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::requestRender" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::requestRender([])")
        
            // 开始调用
            ref.requestRender()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::resetRenderTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::resetRenderTime([])")
        
            // 开始调用
            ref.resetRenderTime()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getCamerInfo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getCamerInfo([])")
        
            // 开始调用
            val result = ref.getCamerInfo()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::checkMapState" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.GLMapState
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::checkMapState([])")
        
            // 开始调用
            ref.checkMapState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setRenderMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setRenderMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setRenderMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMultiPointClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setOnMultiPointClickListener([])")
        
            // 开始调用
            ref.setOnMultiPointClickListener(object : com.amap.api.maps.AMap.OnMultiPointClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.autonavi.amap.mapcore.interfaces.IAMap::setOnMultiPointClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onPointClick(var1: com.amap.api.maps.model.MultiPointItem): Boolean {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPointClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMultiPointClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onPointClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
                    return true
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getMapContentApprovalNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getMapContentApprovalNumber([])")
        
            // 开始调用
            val result = ref.getMapContentApprovalNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::getSatelliteImageApprovalNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::getSatelliteImageApprovalNumber([])")
        
            // 开始调用
            val result = ref.getSatelliteImageApprovalNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setMapLanguage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setMapLanguage([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapLanguage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setCustomMapStyleID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setCustomMapStyleID([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomMapStyleID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addBuildingOverlay" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addBuildingOverlay([])")
        
            // 开始调用
            val result = ref.addBuildingOverlay()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addGLModel" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.GL3DModelOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addGLModel([])")
        
            // 开始调用
            val result = ref.addGLModel(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::addParticleOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::addParticleOverlay([])")
        
            // 开始调用
            val result = ref.addParticleOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IAMap::setCustomMapStyle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IAMap
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IAMap@$refId::setCustomMapStyle([])")
        
            // 开始调用
            ref.setCustomMapStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onInflate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.app.Activity
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.AMapOptions
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onInflate([])")
        
            // 开始调用
            ref.onInflate(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::setContext" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::setContext([])")
        
            // 开始调用
            ref.setContext(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::setOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.AMapOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::setOptions([])")
        
            // 开始调用
            ref.setOptions(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onCreate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onCreate([])")
        
            // 开始调用
            ref.onCreate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onResume" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onResume([])")
        
            // 开始调用
            ref.onResume()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onPause([])")
        
            // 开始调用
            ref.onPause()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onDestroyView" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onDestroyView([])")
        
            // 开始调用
            ref.onDestroyView()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onDestroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onDestroy([])")
        
            // 开始调用
            ref.onDestroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onLowMemory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onLowMemory([])")
        
            // 开始调用
            ref.onLowMemory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::onSaveInstanceState" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::onSaveInstanceState([])")
        
            // 开始调用
            ref.onSaveInstanceState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::isReady" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::isReady([])")
        
            // 开始调用
            val result = ref.isReady()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate::setVisibility" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMapFragmentDelegate@$refId::setVisibility([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisibility(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::getAlpha" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::getAlpha([])")
        
            // 开始调用
            val result = ref.getAlpha()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setAlpha" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setAlpha([\"var1\":$var1])")
        
            // 开始调用
            ref.setAlpha(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::getDisplayLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::getDisplayLevel([])")
        
            // 开始调用
            val result = ref.getDisplayLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::getOptions" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::getOptions([])")
        
            // 开始调用
            val result = ref.getOptions()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::isClickable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::isClickable([])")
        
            // 开始调用
            val result = ref.isClickable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::isInfoWindowAutoOverturn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::isInfoWindowAutoOverturn([])")
        
            // 开始调用
            val result = ref.isInfoWindowAutoOverturn()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::isInfoWindowEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::isInfoWindowEnable([])")
        
            // 开始调用
            val result = ref.isInfoWindowEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setInfoWindowEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setInfoWindowEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setMarkerOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MarkerOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setMarkerOptions([])")
        
            // 开始调用
            ref.setMarkerOptions(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setAutoOverturnInfoWindow" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setAutoOverturnInfoWindow([\"var1\":$var1])")
        
            // 开始调用
            ref.setAutoOverturnInfoWindow(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setClickable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setClickable([\"var1\":$var1])")
        
            // 开始调用
            ref.setClickable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setDisplayLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setDisplayLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setDisplayLevel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setFixingPointEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setFixingPointEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setFixingPointEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setPositionNotUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setPositionNotUpdate([])")
        
            // 开始调用
            ref.setPositionNotUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setRotateAngleNotUpdate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setRotateAngleNotUpdate([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateAngleNotUpdate(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IMarkerAction::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IMarkerAction
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IMarkerAction@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::setStrokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::setStrokeWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::setFillColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::setFillColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::getFillColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::getFillColor([])")
        
            // 开始调用
            val result = ref.getFillColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::setStrokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::setStrokeColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::contains" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::contains([])")
        
            // 开始调用
            val result = ref.contains(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.autonavi.amap.mapcore.interfaces.IPolygon::setHoleOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BaseHoleOptions>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.amap.mapcore.interfaces.IPolygon
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.amap.mapcore.interfaces.IPolygon@$refId::setHoleOptions([])")
        
            // 开始调用
            ref.setHoleOptions(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.custom.IUnityCallback::UnitySetGraphicsDevice" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.custom.IUnityCallback
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.custom.IUnityCallback@$refId::UnitySetGraphicsDevice([\"var1\":$var1])")
        
            // 开始调用
            ref.UnitySetGraphicsDevice(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.autonavi.custom.IUnityCallback::UnityRenderEvent" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.autonavi.custom.IUnityCallback
        
            // 日志打印
            println("fluttify-kotlin: com.autonavi.custom.IUnityCallback@$refId::UnityRenderEvent([\"var1\":$var1])")
        
            // 开始调用
            ref.UnityRenderEvent(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.CommonInfoWindowAdapter::getInfoWindowParams" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BasePointOverlay
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.CommonInfoWindowAdapter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.CommonInfoWindowAdapter@$refId::getInfoWindowParams([])")
        
            // 开始调用
            val result = ref.getInfoWindowParams(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap.OnCameraChangeListener::onCameraChange" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CameraPosition
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnCameraChangeListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnCameraChangeListener@$refId::onCameraChange([])")
        
            // 开始调用
            ref.onCameraChange(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnCameraChangeListener::onCameraChangeFinish" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CameraPosition
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnCameraChangeListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnCameraChangeListener@$refId::onCameraChangeFinish([])")
        
            // 开始调用
            ref.onCameraChangeFinish(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.LocationSource::activate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.LocationSource
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.LocationSource@$refId::activate([])")
        
            // 开始调用
            ref.activate(object : com.amap.api.maps.LocationSource.OnLocationChangedListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.LocationSource::activate_Callback" + refId)
        
                // 回调方法们
                override fun onLocationChanged(var1: android.location.Location): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.LocationSource.OnLocationChangedListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onLocationChanged",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.LocationSource::deactivate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.LocationSource
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.LocationSource@$refId::deactivate([])")
        
            // 开始调用
            ref.deactivate()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnCacheRemoveListener::onRemoveCacheFinish" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnCacheRemoveListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnCacheRemoveListener@$refId::onRemoveCacheFinish([\"var1\":$var1])")
        
            // 开始调用
            ref.onRemoveCacheFinish(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnMultiPointClickListener::onPointClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MultiPointItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMultiPointClickListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMultiPointClickListener@$refId::onPointClick([])")
        
            // 开始调用
            val result = ref.onPointClick(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::setScaleControlsEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setScaleControlsEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setScaleControlsEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setZoomControlsEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setZoomControlsEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomControlsEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setCompassEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setCompassEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setCompassEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setMyLocationButtonEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setMyLocationButtonEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationButtonEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setScrollGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setScrollGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setScrollGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setZoomGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setZoomGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setTiltGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setTiltGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setTiltGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setRotateGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setRotateGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setAllGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setAllGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setAllGesturesEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setLogoPosition" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setLogoPosition([\"var1\":$var1])")
        
            // 开始调用
            ref.setLogoPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setZoomPosition" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setZoomPosition([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::getZoomPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::getZoomPosition([])")
        
            // 开始调用
            val result = ref.getZoomPosition()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isScaleControlsEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isScaleControlsEnabled([])")
        
            // 开始调用
            val result = ref.isScaleControlsEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isZoomControlsEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isZoomControlsEnabled([])")
        
            // 开始调用
            val result = ref.isZoomControlsEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isCompassEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isCompassEnabled([])")
        
            // 开始调用
            val result = ref.isCompassEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isMyLocationButtonEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isMyLocationButtonEnabled([])")
        
            // 开始调用
            val result = ref.isMyLocationButtonEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isScrollGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isScrollGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isScrollGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isZoomGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isZoomGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isZoomGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isTiltGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isTiltGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isTiltGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isRotateGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isRotateGesturesEnabled([])")
        
            // 开始调用
            val result = ref.isRotateGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::getLogoPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::getLogoPosition([])")
        
            // 开始调用
            val result = ref.getLogoPosition()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::isIndoorSwitchEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isIndoorSwitchEnabled([])")
        
            // 开始调用
            val result = ref.isIndoorSwitchEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::setIndoorSwitchEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setIndoorSwitchEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setIndoorSwitchEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setLogoMarginRate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setLogoMarginRate([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setLogoMarginRate(var1, var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::getLogoMarginRate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::getLogoMarginRate([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getLogoMarginRate(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.UiSettings::setLogoLeftMargin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setLogoLeftMargin([\"var1\":$var1])")
        
            // 开始调用
            ref.setLogoLeftMargin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setLogoBottomMargin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setLogoBottomMargin([\"var1\":$var1])")
        
            // 开始调用
            ref.setLogoBottomMargin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setZoomInByScreenCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setZoomInByScreenCenter([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomInByScreenCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::setGestureScaleByMapCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::setGestureScaleByMapCenter([\"var1\":$var1])")
        
            // 开始调用
            ref.setGestureScaleByMapCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.UiSettings::isGestureScaleByMapCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.UiSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.UiSettings@$refId::isGestureScaleByMapCenter([])")
        
            // 开始调用
            val result = ref.isGestureScaleByMapCenter()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.WearMapView.OnDismissCallback::onDismiss" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView.OnDismissCallback
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView.OnDismissCallback@$refId::onDismiss([])")
        
            // 开始调用
            ref.onDismiss()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView.OnDismissCallback::onNotifySwipe" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView.OnDismissCallback
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView.OnDismissCallback@$refId::onNotifySwipe([])")
        
            // 开始调用
            ref.onNotifySwipe()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.SwipeDismissTouchListener::onTouch" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.view.View
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as android.view.MotionEvent
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.SwipeDismissTouchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.SwipeDismissTouchListener@$refId::onTouch([])")
        
            // 开始调用
            val result = ref.onTouch(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.InfoWindowParams::setInfoWindowUpdateTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::setInfoWindowUpdateTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowUpdateTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowParams::getInfoWindowUpdateTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::getInfoWindowUpdateTime([])")
        
            // 开始调用
            val result = ref.getInfoWindowUpdateTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.InfoWindowParams::setInfoWindowType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::setInfoWindowType([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowParams::getInfoWindowType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::getInfoWindowType([])")
        
            // 开始调用
            val result = ref.getInfoWindowType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.InfoWindowParams::getInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::getInfoWindow([])")
        
            // 开始调用
            val result = ref.getInfoWindow()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.InfoWindowParams::setInfoContent" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.view.View
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::setInfoContent([])")
        
            // 开始调用
            ref.setInfoContent(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowParams::setInfoWindow" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.view.View
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::setInfoWindow([])")
        
            // 开始调用
            ref.setInfoWindow(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowParams::getInfoContents" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowParams
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowParams@$refId::getInfoContents([])")
        
            // 开始调用
            val result = ref.getInfoContents()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::zoomIn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::zoomIn([])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.zoomIn()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::zoomOut" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::zoomOut([])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.zoomOut()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::scrollBy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::scrollBy([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.scrollBy(var0.toFloat(), var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::zoomTo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::zoomTo([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.zoomTo(var0.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::zoomBy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::zoomBy([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.zoomBy(var0.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::newCameraPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.CameraPosition
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::newCameraPosition([])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.newCameraPosition(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::newLatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::newLatLng([])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.newLatLng(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::newLatLngZoom" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::newLatLngZoom([\"var1\":$var1])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.newLatLngZoom(var0, var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::newLatLngBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLngBounds
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::newLatLngBounds([\"var1\":$var1])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.newLatLngBounds(var0, var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::changeLatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::changeLatLng([])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.changeLatLng(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::changeBearing" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::changeBearing([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.changeBearing(var0.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::changeBearingGeoCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::changeBearingGeoCenter([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.changeBearingGeoCenter(var0.toFloat(), var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::changeTilt" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::changeTilt([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.changeTilt(var0.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CameraUpdateFactory::newLatLngBoundsRect" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLngBounds
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdateFactory::newLatLngBoundsRect([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            val result = com.amap.api.maps.CameraUpdateFactory.newLatLngBoundsRect(var0, var1, var2, var3, var4)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap.CancelableCallback::onFinish" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.CancelableCallback
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.CancelableCallback@$refId::onFinish([])")
        
            // 开始调用
            ref.onFinish()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.CancelableCallback::onCancel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.CancelableCallback
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.CancelableCallback@$refId::onCancel([])")
        
            // 开始调用
            ref.onCancel()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapException::getErrorMessage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapException
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapException@$refId::getErrorMessage([])")
        
            // 开始调用
            val result = ref.getErrorMessage()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap.OnMapScreenShotListener::onMapScreenShot" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Bitmap
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMapScreenShotListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMapScreenShotListener@$refId::onMapScreenShot([])")
        
            // 开始调用
            ref.onMapScreenShot(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapOptions::logoPosition" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::logoPosition([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.logoPosition(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::zOrderOnTop" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::zOrderOnTop([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zOrderOnTop(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::mapType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::mapType([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.mapType(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::camera" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CameraPosition
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::camera([])")
        
            // 开始调用
            val result = ref.camera(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::scaleControlsEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::scaleControlsEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.scaleControlsEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::zoomControlsEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::zoomControlsEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zoomControlsEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::compassEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::compassEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.compassEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::scrollGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::scrollGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.scrollGesturesEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::zoomGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::zoomGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zoomGesturesEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::tiltGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::tiltGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.tiltGesturesEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::rotateGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::rotateGesturesEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.rotateGesturesEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::getLogoPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getLogoPosition([])")
        
            // 开始调用
            val result = ref.getLogoPosition()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getZOrderOnTop" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getZOrderOnTop([])")
        
            // 开始调用
            val result = ref.getZOrderOnTop()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getMapType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getMapType([])")
        
            // 开始调用
            val result = ref.getMapType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getCamera" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getCamera([])")
        
            // 开始调用
            val result = ref.getCamera()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMapOptions::getScaleControlsEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getScaleControlsEnabled([])")
        
            // 开始调用
            val result = ref.getScaleControlsEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getZoomControlsEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getZoomControlsEnabled([])")
        
            // 开始调用
            val result = ref.getZoomControlsEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getCompassEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getCompassEnabled([])")
        
            // 开始调用
            val result = ref.getCompassEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getScrollGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getScrollGesturesEnabled([])")
        
            // 开始调用
            val result = ref.getScrollGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getZoomGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getZoomGesturesEnabled([])")
        
            // 开始调用
            val result = ref.getZoomGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getTiltGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getTiltGesturesEnabled([])")
        
            // 开始调用
            val result = ref.getTiltGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapOptions::getRotateGesturesEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMapOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapOptions@$refId::getRotateGesturesEnabled([])")
        
            // 开始调用
            val result = ref.getRotateGesturesEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap.OnMapLoadedListener::onMapLoaded" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMapLoadedListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMapLoadedListener@$refId::onMapLoaded([])")
        
            // 开始调用
            ref.onMapLoaded()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnMarkerClickListener::onMarkerClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMarkerClickListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMarkerClickListener@$refId::onMarkerClick([])")
        
            // 开始调用
            val result = ref.onMarkerClick(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.CoordinateConverter::from" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.maps.CoordinateConverter.CoordType.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.CoordinateConverter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CoordinateConverter@$refId::from([])")
        
            // 开始调用
            val result = ref.from(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CoordinateConverter::coord" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.CoordinateConverter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CoordinateConverter@$refId::coord([])")
        
            // 开始调用
            val result = ref.coord(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CoordinateConverter::convert" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.CoordinateConverter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CoordinateConverter@$refId::convert([])")
        
            // 开始调用
            val result = ref.convert()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CoordinateConverter::isAMapDataAvailable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CoordinateConverter::isAMapDataAvailable([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            val result = com.amap.api.maps.CoordinateConverter.isAMapDataAvailable(var0, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap.InfoWindowAdapter::getInfoWindow" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.InfoWindowAdapter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.InfoWindowAdapter@$refId::getInfoWindow([])")
        
            // 开始调用
            val result = ref.getInfoWindow(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap.InfoWindowAdapter::getInfoContents" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.InfoWindowAdapter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.InfoWindowAdapter@$refId::getInfoContents([])")
        
            // 开始调用
            val result = ref.getInfoContents(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap.OnMyLocationChangeListener::onMyLocationChange" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.location.Location
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMyLocationChangeListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMyLocationChangeListener@$refId::onMyLocationChange([])")
        
            // 开始调用
            ref.onMyLocationChange(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.onMapPrintScreenListener::onMapPrint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.drawable.Drawable
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.onMapPrintScreenListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.onMapPrintScreenListener@$refId::onMapPrint([])")
        
            // 开始调用
            ref.onMapPrint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.ImageInfoWindowAdapter::getInfoWindowUpdateTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.ImageInfoWindowAdapter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.ImageInfoWindowAdapter@$refId::getInfoWindowUpdateTime([])")
        
            // 开始调用
            val result = ref.getInfoWindowUpdateTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap.OnMarkerDragListener::onMarkerDragStart" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMarkerDragListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMarkerDragListener@$refId::onMarkerDragStart([])")
        
            // 开始调用
            ref.onMarkerDragStart(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnMarkerDragListener::onMarkerDrag" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMarkerDragListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMarkerDragListener@$refId::onMarkerDrag([])")
        
            // 开始调用
            ref.onMarkerDrag(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnMarkerDragListener::onMarkerDragEnd" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMarkerDragListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMarkerDragListener@$refId::onMarkerDragEnd([])")
        
            // 开始调用
            ref.onMarkerDragEnd(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker.MoveListener::move" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker.MoveListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker.MoveListener@$refId::move([\"var1\":$var1])")
        
            // 开始调用
            ref.move(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::resetIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::resetIndex([])")
        
            // 开始调用
            ref.resetIndex()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::setTotalDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::setTotalDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setTotalDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::startSmoothMove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::startSmoothMove([])")
        
            // 开始调用
            ref.startSmoothMove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::stopMove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::stopMove([])")
        
            // 开始调用
            ref.stopMove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::getObject" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::getObject([])")
        
            // 开始调用
            val result = ref.getObject()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::getIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::getIndex([])")
        
            // 开始调用
            val result = ref.getIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::removeMarker" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::removeMarker([])")
        
            // 开始调用
            ref.removeMarker()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::setRotate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::setRotate([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotate(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay::setMoveListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay@$refId::setMoveListener([])")
        
            // 开始调用
            ref.setMoveListener(object : com.amap.api.maps.utils.overlay.MovingPointOverlay.MoveListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.utils.overlay.MovingPointOverlay::setMoveListener_Callback" + refId)
        
                // 回调方法们
                override fun move(var1: Double): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: move([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.utils.overlay.MovingPointOverlay.MoveListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::move",
                        mapOf<String, Any?>("var1" to var1)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.MovingPointOverlay.MoveListener::move" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.MovingPointOverlay.MoveListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.MovingPointOverlay.MoveListener@$refId::move([\"var1\":$var1])")
        
            // 开始调用
            ref.move(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setTotalDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::setTotalDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setTotalDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::startSmoothMove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::startSmoothMove([])")
        
            // 开始调用
            ref.startSmoothMove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::stopMove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::stopMove([])")
        
            // 开始调用
            ref.stopMove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::getMarker" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::getMarker([])")
        
            // 开始调用
            val result = ref.getMarker()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::getIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::getIndex([])")
        
            // 开始调用
            val result = ref.getIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::resetIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::resetIndex([])")
        
            // 开始调用
            ref.resetIndex()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::removeMarker" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::removeMarker([])")
        
            // 开始调用
            ref.removeMarker()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setDescriptor" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::setDescriptor([])")
        
            // 开始调用
            ref.setDescriptor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setRotate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::setRotate([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotate(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setMoveListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.utils.overlay.SmoothMoveMarker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.utils.overlay.SmoothMoveMarker@$refId::setMoveListener([])")
        
            // 开始调用
            ref.setMoveListener(object : com.amap.api.maps.utils.overlay.SmoothMoveMarker.MoveListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.utils.overlay.SmoothMoveMarker::setMoveListener_Callback" + refId)
        
                // 回调方法们
                override fun move(var1: Double): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: move([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.utils.overlay.SmoothMoveMarker.MoveListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::move",
                        mapOf<String, Any?>("var1" to var1)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.CameraUpdate::getCameraUpdateFactoryDelegate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.CameraUpdate
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CameraUpdate@$refId::getCameraUpdateFactoryDelegate([])")
        
            // 开始调用
            val result = ref.getCameraUpdateFactoryDelegate()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.CustomRenderer::OnMapReferencechanged" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.CustomRenderer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.CustomRenderer@$refId::OnMapReferencechanged([])")
        
            // 开始调用
            ref.OnMapReferencechanged()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.SwipeDismissCallBack::onNotifySwipe" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.SwipeDismissCallBack
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.SwipeDismissCallBack@$refId::onNotifySwipe([])")
        
            // 开始调用
            ref.onNotifySwipe()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.LocationSource.OnLocationChangedListener::onLocationChanged" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.location.Location
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.LocationSource.OnLocationChangedListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.LocationSource.OnLocationChangedListener@$refId::onLocationChanged([])")
        
            // 开始调用
            ref.onLocationChanged(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::initialize" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::initialize([])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.initialize(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::setNetWorkEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::setNetWorkEnable([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.setNetWorkEnable(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::getNetWorkEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::getNetWorkEnable([])")
        
            // 开始调用
            val result = com.amap.api.maps.MapsInitializer.getNetWorkEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.MapsInitializer::setApiKey" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::setApiKey([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.setApiKey(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::getVersion" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::getVersion([])")
        
            // 开始调用
            val result = com.amap.api.maps.MapsInitializer.getVersion()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.MapsInitializer::loadWorldGridMap" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::loadWorldGridMap([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.loadWorldGridMap(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::isLoadWorldGridMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::isLoadWorldGridMap([])")
        
            // 开始调用
            val result = com.amap.api.maps.MapsInitializer.isLoadWorldGridMap()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.MapsInitializer::setBuildingHeight" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::setBuildingHeight([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.setBuildingHeight(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::setDownloadCoordinateConvertLibrary" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::setDownloadCoordinateConvertLibrary([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.setDownloadCoordinateConvertLibrary(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::isDownloadCoordinateConvertLibrary" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::isDownloadCoordinateConvertLibrary([])")
        
            // 开始调用
            val result = com.amap.api.maps.MapsInitializer.isDownloadCoordinateConvertLibrary()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.MapsInitializer::setHost" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::setHost([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.setHost(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::setProtocol" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::setProtocol([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.setProtocol(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::getProtocol" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::getProtocol([])")
        
            // 开始调用
            val result = com.amap.api.maps.MapsInitializer.getProtocol()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.MapsInitializer::closeTileOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::closeTileOverlay([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.maps.MapsInitializer.closeTileOverlay(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapsInitializer::isTileOverlayClosed" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapsInitializer::isTileOverlayClosed([])")
        
            // 开始调用
            val result = com.amap.api.maps.MapsInitializer.isTileOverlayClosed()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::getUrl" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::getUrl([])")
        
            // 开始调用
            val result = ref.getUrl()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::setUrl" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::setUrl([\"var1\":$var1])")
        
            // 开始调用
            ref.setUrl(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::getState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::getState([])")
        
            // 开始调用
            val result = ref.getState()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::setState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::setState([\"var1\":$var1])")
        
            // 开始调用
            ref.setState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::getSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::getSize([])")
        
            // 开始调用
            val result = ref.getSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::setSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::setSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::getVersion" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::getVersion([])")
        
            // 开始调用
            val result = ref.getVersion()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::setVersion" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::setVersion([\"var1\":$var1])")
        
            // 开始调用
            ref.setVersion(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::getcompleteCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::getcompleteCode([])")
        
            // 开始调用
            val result = ref.getcompleteCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::setCompleteCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::setCompleteCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCompleteCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapProvince::setCityList" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.offlinemap.OfflineMapCity>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapProvince
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapProvince@$refId::setCityList([])")
        
            // 开始调用
            ref.setCityList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener::onDownload" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener@$refId::onDownload([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.onDownload(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener::onCheckUpdate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener@$refId::onCheckUpdate([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onCheckUpdate(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener::onRemove" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager.OfflineMapDownloadListener@$refId::onRemove([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.onRemove(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.DownloadProgressView::setProgress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.DownloadProgressView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.DownloadProgressView@$refId::setProgress([\"var1\":$var1])")
        
            // 开始调用
            ref.setProgress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.Province::getProvinceName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::getProvinceName([])")
        
            // 开始调用
            val result = ref.getProvinceName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.Province::getJianpin" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::getJianpin([])")
        
            // 开始调用
            val result = ref.getJianpin()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.Province::getPinyin" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::getPinyin([])")
        
            // 开始调用
            val result = ref.getPinyin()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.Province::setProvinceName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::setProvinceName([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvinceName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.Province::setJianpin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::setJianpin([\"var1\":$var1])")
        
            // 开始调用
            ref.setJianpin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.Province::setPinyin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::setPinyin([\"var1\":$var1])")
        
            // 开始调用
            ref.setPinyin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.Province::setProvinceCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::setProvinceCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvinceCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.Province::getProvinceCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.Province
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.Province@$refId::getProvinceCode([])")
        
            // 开始调用
            val result = ref.getProvinceCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::downloadByCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::downloadByCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.downloadByCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::downloadByCityName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::downloadByCityName([\"var1\":$var1])")
        
            // 开始调用
            ref.downloadByCityName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::downloadByProvinceName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::downloadByProvinceName([\"var1\":$var1])")
        
            // 开始调用
            ref.downloadByProvinceName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::remove" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::remove([\"var1\":$var1])")
        
            // 开始调用
            ref.remove(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::getItemByCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::getItemByCityCode([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getItemByCityCode(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::getItemByCityName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::getItemByCityName([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getItemByCityName(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::getItemByProvinceName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::getItemByProvinceName([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getItemByProvinceName(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::updateOfflineCityByCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::updateOfflineCityByCode([\"var1\":$var1])")
        
            // 开始调用
            ref.updateOfflineCityByCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::updateOfflineCityByName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::updateOfflineCityByName([\"var1\":$var1])")
        
            // 开始调用
            ref.updateOfflineCityByName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::updateOfflineMapProvinceByName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::updateOfflineMapProvinceByName([\"var1\":$var1])")
        
            // 开始调用
            ref.updateOfflineMapProvinceByName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::restart" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::restart([])")
        
            // 开始调用
            ref.restart()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::stop" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::stop([])")
        
            // 开始调用
            ref.stop()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::pause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::pause([])")
        
            // 开始调用
            ref.pause()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager::setOnOfflineLoadedListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager@$refId::setOnOfflineLoadedListener([])")
        
            // 开始调用
            ref.setOnOfflineLoadedListener(object : com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.offlinemap.OfflineMapManager::setOnOfflineLoadedListener_Callback" + refId)
        
                // 回调方法们
                override fun onVerifyComplete(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onVerifyComplete([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onVerifyComplete",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::getUrl" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::getUrl([])")
        
            // 开始调用
            val result = ref.getUrl()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::setUrl" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::setUrl([\"var1\":$var1])")
        
            // 开始调用
            ref.setUrl(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::getSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::getSize([])")
        
            // 开始调用
            val result = ref.getSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::setSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::setSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::getState" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::getState([])")
        
            // 开始调用
            val result = ref.getState()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::setState" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::setState([\"var1\":$var1])")
        
            // 开始调用
            ref.setState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::getVersion" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::getVersion([])")
        
            // 开始调用
            val result = ref.getVersion()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::setVersion" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::setVersion([\"var1\":$var1])")
        
            // 开始调用
            ref.setVersion(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::getcompleteCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::getcompleteCode([])")
        
            // 开始调用
            val result = ref.getcompleteCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.OfflineMapCity::setCompleteCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapCity@$refId::setCompleteCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCompleteCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapActivity::showScr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapActivity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapActivity@$refId::showScr([])")
        
            // 开始调用
            ref.showScr()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapActivity::closeScr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapActivity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapActivity@$refId::closeScr([])")
        
            // 开始调用
            ref.closeScr()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapActivity::onClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.view.View
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapActivity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapActivity@$refId::onClick([])")
        
            // 开始调用
            ref.onClick(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.City::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.City::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.City::setCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::setCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.City::getCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::getCode([])")
        
            // 开始调用
            val result = ref.getCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.City::getJianpin" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::getJianpin([])")
        
            // 开始调用
            val result = ref.getJianpin()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.City::setJianpin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::setJianpin([\"var1\":$var1])")
        
            // 开始调用
            ref.setJianpin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.City::getPinyin" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::getPinyin([])")
        
            // 开始调用
            val result = ref.getPinyin()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.City::setPinyin" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::setPinyin([\"var1\":$var1])")
        
            // 开始调用
            ref.setPinyin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.City::getAdcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::getAdcode([])")
        
            // 开始调用
            val result = ref.getAdcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.offlinemap.City::setAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.City
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.City@$refId::setAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener::onVerifyComplete" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener@$refId::onVerifyComplete([])")
        
            // 开始调用
            ref.onVerifyComplete()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnIndoorBuildingActiveListener::OnIndoorBuilding" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.IndoorBuildingInfo
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnIndoorBuildingActiveListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnIndoorBuildingActiveListener@$refId::OnIndoorBuilding([])")
        
            // 开始调用
            ref.OnIndoorBuilding(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnMapTouchListener::onTouch" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.view.MotionEvent
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMapTouchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMapTouchListener@$refId::onTouch([])")
        
            // 开始调用
            ref.onTouch(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.Projection::fromScreenLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Point
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::fromScreenLocation([])")
        
            // 开始调用
            val result = ref.fromScreenLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.Projection::toScreenLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::toScreenLocation([])")
        
            // 开始调用
            val result = ref.toScreenLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.Projection::toOpenGLLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::toOpenGLLocation([])")
        
            // 开始调用
            val result = ref.toOpenGLLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.Projection::toOpenGLWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::toOpenGLWidth([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.toOpenGLWidth(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.Projection::getVisibleRegion" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::getVisibleRegion([])")
        
            // 开始调用
            val result = ref.getVisibleRegion()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.Projection::fromBoundsToTile" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::fromBoundsToTile([\"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = ref.fromBoundsToTile(var1, var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.Projection::getMapBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::getMapBounds([\"var2\":$var2])")
        
            // 开始调用
            val result = ref.getMapBounds(var1, var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.Projection::getCameraInfo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.Projection
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.Projection@$refId::getCameraInfo([])")
        
            // 开始调用
            val result = ref.getCameraInfo()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter::getInfoWindowClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter@$refId::getInfoWindowClick([])")
        
            // 开始调用
            val result = ref.getInfoWindowClick(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter::getOverturnInfoWindow" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter@$refId::getOverturnInfoWindow([])")
        
            // 开始调用
            val result = ref.getOverturnInfoWindow(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter::getOverturnInfoWindowClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter@$refId::getOverturnInfoWindowClick([])")
        
            // 开始调用
            val result = ref.getOverturnInfoWindowClick(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Polygon::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polygon::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::setHoleOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BaseHoleOptions>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::setHoleOptions([])")
        
            // 开始调用
            ref.setHoleOptions(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::setStrokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::setStrokeWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polygon::setStrokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::setStrokeColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polygon::setFillColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::setFillColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::getFillColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::getFillColor([])")
        
            // 开始调用
            val result = ref.getFillColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polygon::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polygon::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polygon::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polygon::contains" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polygon
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polygon@$refId::contains([])")
        
            // 开始调用
            val result = ref.contains(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BitmapDescriptor::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BitmapDescriptor
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptor@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BitmapDescriptor::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BitmapDescriptor
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptor@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptor::getBitmap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BitmapDescriptor
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptor@$refId::getBitmap([])")
        
            // 开始调用
            val result = ref.getBitmap()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptor::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BitmapDescriptor
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptor@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BitmapDescriptor::getHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BitmapDescriptor
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptor@$refId::getHeight([])")
        
            // 开始调用
            val result = ref.getHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolygonHoleOptions::addAll" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonHoleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonHoleOptions@$refId::addAll([])")
        
            // 开始调用
            val result = ref.addAll(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Poi::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Poi
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Poi@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Poi::getCoordinate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Poi
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Poi@$refId::getCoordinate([])")
        
            // 开始调用
            val result = ref.getCoordinate()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Poi::getPoiId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Poi
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Poi@$refId::getPoiId([])")
        
            // 开始调用
            val result = ref.getPoiId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::myLocationIcon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::myLocationIcon([])")
        
            // 开始调用
            val result = ref.myLocationIcon(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::anchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::anchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.anchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::radiusFillColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::radiusFillColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.radiusFillColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::strokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::strokeColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::strokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::strokeWidth([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeWidth(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::myLocationType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::myLocationType([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.myLocationType(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::interval" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::interval([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.interval(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::showMyLocation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::showMyLocation([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.showMyLocation(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::getMyLocationIcon" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getMyLocationIcon([])")
        
            // 开始调用
            val result = ref.getMyLocationIcon()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MyLocationStyle::getAnchorU" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getAnchorU([])")
        
            // 开始调用
            val result = ref.getAnchorU()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::getAnchorV" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getAnchorV([])")
        
            // 开始调用
            val result = ref.getAnchorV()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::getRadiusFillColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getRadiusFillColor([])")
        
            // 开始调用
            val result = ref.getRadiusFillColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::getMyLocationType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getMyLocationType([])")
        
            // 开始调用
            val result = ref.getMyLocationType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::getInterval" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::getInterval([])")
        
            // 开始调用
            val result = ref.getInterval()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyLocationStyle::isMyLocationShowing" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyLocationStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyLocationStyle@$refId::isMyLocationShowing([])")
        
            // 开始调用
            val result = ref.isMyLocationShowing()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.RouteOverlay::removeRouteName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RouteOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RouteOverlay@$refId::removeRouteName([])")
        
            // 开始调用
            ref.removeRouteName()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.RouteOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RouteOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RouteOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.CircleHoleOptions::center" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleHoleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleHoleOptions@$refId::center([])")
        
            // 开始调用
            val result = ref.center(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleHoleOptions::radius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleHoleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleHoleOptions@$refId::radius([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.radius(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleHoleOptions::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleHoleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleHoleOptions@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleHoleOptions::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleHoleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleHoleOptions@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Text::setText" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setText([\"var1\":$var1])")
        
            // 开始调用
            ref.setText(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getText" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getText([])")
        
            // 开始调用
            val result = ref.getText()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setBackgroundColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setBackgroundColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setBackgroundColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getBackgroundColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getBackgroundColor([])")
        
            // 开始调用
            val result = ref.getBackgroundColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setFontColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setFontColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFontColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getFontColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getFontColor([])")
        
            // 开始调用
            val result = ref.getFontColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setFontSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setFontSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setFontSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getFontSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getFontSize([])")
        
            // 开始调用
            val result = ref.getFontSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setAlign" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setAlign([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setAlign(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getAlignX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getAlignX([])")
        
            // 开始调用
            val result = ref.getAlignX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::getAlignY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getAlignY([])")
        
            // 开始调用
            val result = ref.getAlignY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setRotate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setRotate([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotate(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getRotate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getRotate([])")
        
            // 开始调用
            val result = ref.getRotate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Text::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Text::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Text
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Text@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.LatLngBounds.Builder::build" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.LatLngBounds.Builder
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.LatLngBounds.Builder@$refId::build([])")
        
            // 开始调用
            val result = ref.build()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::add" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::add([])")
        
            // 开始调用
            val result = ref.add(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::addAll" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::addAll([])")
        
            // 开始调用
            val result = ref.addAll(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::width" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::width([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.width(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::topColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::topColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.topColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::sideColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::sideColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.sideColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::set3DModel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::set3DModel([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.set3DModel(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::getTopColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::getTopColor([])")
        
            // 开始调用
            val result = ref.getTopColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::getSideColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::getSideColor([])")
        
            // 开始调用
            val result = ref.getSideColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::is3DModel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::is3DModel([])")
        
            // 开始调用
            val result = ref.is3DModel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrowOptions::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrowOptions@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::fromResource" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::fromResource([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.fromResource(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::fromView" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.view.View
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::fromView([])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.fromView(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::fromPath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::fromPath([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.fromPath(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::fromAsset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::fromAsset([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.fromAsset(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::fromFile" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::fromFile([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.fromFile(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker([])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.defaultMarker()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::fromBitmap" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.graphics.Bitmap
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::fromBitmap([])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.fromBitmap(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BitmapDescriptorFactory::getContext" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BitmapDescriptorFactory::getContext([])")
        
            // 开始调用
            val result = com.amap.api.maps.model.BitmapDescriptorFactory.getContext()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CrossOverlay.GenerateCrossImageListener::onGenerateComplete" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Bitmap
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlay.GenerateCrossImageListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlay.GenerateCrossImageListener@$refId::onGenerateComplete([\"var2\":$var2])")
        
            // 开始调用
            ref.onGenerateComplete(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.UrlTileProvider::getTile" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.UrlTileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.UrlTileProvider@$refId::getTile([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = ref.getTile(var1, var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.UrlTileProvider::getTileWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.UrlTileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.UrlTileProvider@$refId::getTileWidth([])")
        
            // 开始调用
            val result = ref.getTileWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.UrlTileProvider::getTileHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.UrlTileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.UrlTileProvider@$refId::getTileHeight([])")
        
            // 开始调用
            val result = ref.getTileHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MultiPointOverlayOptions::anchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlayOptions@$refId::anchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.anchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MultiPointOverlayOptions::getAnchorU" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlayOptions@$refId::getAnchorU([])")
        
            // 开始调用
            val result = ref.getAnchorU()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MultiPointOverlayOptions::getAnchorV" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlayOptions@$refId::getAnchorV([])")
        
            // 开始调用
            val result = ref.getAnchorV()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MultiPointOverlayOptions::icon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlayOptions@$refId::icon([])")
        
            // 开始调用
            val result = ref.icon(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MultiPointOverlayOptions::getIcon" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlayOptions@$refId::getIcon([])")
        
            // 开始调用
            val result = ref.getIcon()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::setUseTexture" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setUseTexture([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setUseTexture(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::setCustomTexture" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setCustomTexture([])")
        
            // 开始调用
            val result = ref.setCustomTexture(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::getCustomTexture" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getCustomTexture([])")
        
            // 开始调用
            val result = ref.getCustomTexture()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::setCustomTextureList" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BitmapDescriptor>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setCustomTextureList([])")
        
            // 开始调用
            val result = ref.setCustomTextureList(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::setCustomTextureIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as List<Int>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setCustomTextureIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setCustomTextureIndex(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::colorValues" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as List<Int>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::colorValues([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.colorValues(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::useGradient" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::useGradient([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.useGradient(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::isUseGradient" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::isUseGradient([])")
        
            // 开始调用
            val result = ref.isUseGradient()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::isUseTexture" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::isUseTexture([])")
        
            // 开始调用
            val result = ref.isUseTexture()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::isGeodesic" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::isGeodesic([])")
        
            // 开始调用
            val result = ref.isGeodesic()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::add" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::add([])")
        
            // 开始调用
            val result = ref.add(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::addAll" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::addAll([])")
        
            // 开始调用
            val result = ref.addAll(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::width" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::width([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.width(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::color" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::color([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.color(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::geodesic" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::geodesic([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.geodesic(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::setDottedLine" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setDottedLine([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setDottedLine(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::isDottedLine" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::isDottedLine([])")
        
            // 开始调用
            val result = ref.isDottedLine()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::setDottedLineType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setDottedLineType([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setDottedLineType(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::lineCapType" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.maps.model.PolylineOptions.LineCapType.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::lineCapType([])")
        
            // 开始调用
            val result = ref.lineCapType(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::lineJoinType" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.maps.model.PolylineOptions.LineJoinType.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::lineJoinType([])")
        
            // 开始调用
            val result = ref.lineJoinType(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::getLineCapType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getLineCapType([])")
        
            // 开始调用
            val result = ref.getLineCapType()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::getLineJoinType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getLineJoinType([])")
        
            // 开始调用
            val result = ref.getLineJoinType()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::getDottedLineType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getDottedLineType([])")
        
            // 开始调用
            val result = ref.getDottedLineType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::getColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getColor([])")
        
            // 开始调用
            val result = ref.getColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::transparency" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::transparency([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.transparency(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::getTransparency" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getTransparency([])")
        
            // 开始调用
            val result = ref.getTransparency()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::aboveMaskLayer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::aboveMaskLayer([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.aboveMaskLayer(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::isAboveMaskLayer" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::isAboveMaskLayer([])")
        
            // 开始调用
            val result = ref.isAboveMaskLayer()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.PolylineOptions::getShownRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getShownRatio([])")
        
            // 开始调用
            val result = ref.getShownRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::setShownRatio" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setShownRatio([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setShownRatio(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::setShownRange" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::setShownRange([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.setShownRange(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions::getShownRangeBegin" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getShownRangeBegin([])")
        
            // 开始调用
            val result = ref.getShownRangeBegin()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions::getShownRangeEnd" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions@$refId::getShownRangeEnd([])")
        
            // 开始调用
            val result = ref.getShownRangeEnd()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::setAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::getAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::getAngle([])")
        
            // 开始调用
            val result = ref.getAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModel::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::setAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setAnimation([])")
        
            // 开始调用
            ref.setAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::startAnimation([])")
        
            // 开始调用
            val result = ref.startAnimation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::setModelFixedLength" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setModelFixedLength([\"var1\":$var1])")
        
            // 开始调用
            ref.setModelFixedLength(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::setRotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setRotateAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::getRotateAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::getRotateAngle([])")
        
            // 开始调用
            val result = ref.getRotateAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::setZoomLimit" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setZoomLimit([\"var1\":$var1])")
        
            // 开始调用
            ref.setZoomLimit(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::setGeoPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setGeoPoint([])")
        
            // 开始调用
            ref.setGeoPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModel::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GL3DModel::showInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModel
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModel@$refId::showInfoWindow([])")
        
            // 开始调用
            ref.showInfoWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.TileProvider::getTile" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileProvider@$refId::getTile([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = ref.getTile(var1, var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileProvider::getTileWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileProvider@$refId::getTileWidth([])")
        
            // 开始调用
            val result = ref.getTileWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileProvider::getTileHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileProvider@$refId::getTileHeight([])")
        
            // 开始调用
            val result = ref.getTileHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NaviPara::setTargetPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NaviPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NaviPara@$refId::setTargetPoint([])")
        
            // 开始调用
            ref.setTargetPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NaviPara::setNaviStyle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NaviPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NaviPara@$refId::setNaviStyle([\"var1\":$var1])")
        
            // 开始调用
            ref.setNaviStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NaviPara::getTargetPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NaviPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NaviPara@$refId::getTargetPoint([])")
        
            // 开始调用
            val result = ref.getTargetPoint()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.NaviPara::getNaviStyle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NaviPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NaviPara@$refId::getNaviStyle([])")
        
            // 开始调用
            val result = ref.getNaviStyle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::image" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::image([])")
        
            // 开始调用
            val result = ref.image(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::anchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::anchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.anchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::position" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::position([\"var2\":$var2])")
        
            // 开始调用
            val result = ref.position(var1, var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::positionFromBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::positionFromBounds([])")
        
            // 开始调用
            val result = ref.positionFromBounds(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::bearing" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::bearing([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.bearing(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::transparency" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::transparency([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.transparency(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getImage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getImage([])")
        
            // 开始调用
            val result = ref.getImage()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getLocation([])")
        
            // 开始调用
            val result = ref.getLocation()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getHeight([])")
        
            // 开始调用
            val result = ref.getHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getBounds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getBounds([])")
        
            // 开始调用
            val result = ref.getBounds()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getBearing" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getBearing([])")
        
            // 开始调用
            val result = ref.getBearing()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getTransparency" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getTransparency([])")
        
            // 开始调用
            val result = ref.getTransparency()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getAnchorU" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getAnchorU([])")
        
            // 开始调用
            val result = ref.getAnchorU()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::getAnchorV" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::getAnchorV([])")
        
            // 开始调用
            val result = ref.getAnchorV()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlayOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlayOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModelOptions::textureDrawable" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::textureDrawable([])")
        
            // 开始调用
            val result = ref.textureDrawable(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModelOptions::vertexData" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as List<Double>
            // jsonable参数
            val var2 = args["var2"] as List<Double>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::vertexData([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.vertexData(ArrayList(var1.map { it.toFloat() }), ArrayList(var2.map { it.toFloat() }))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModelOptions::position" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::position([])")
        
            // 开始调用
            val result = ref.position(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModelOptions::angle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::angle([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.angle(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModelOptions::getAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::getAngle([])")
        
            // 开始调用
            val result = ref.getAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GL3DModelOptions::getLatLng" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::getLatLng([])")
        
            // 开始调用
            val result = ref.getLatLng()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModelOptions::getBitmapDescriptor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::getBitmapDescriptor([])")
        
            // 开始调用
            val result = ref.getBitmapDescriptor()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModelOptions::setModelFixedLength" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::setModelFixedLength([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setModelFixedLength(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GL3DModelOptions::getModelFixedLength" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GL3DModelOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GL3DModelOptions@$refId::getModelFixedLength([])")
        
            // 开始调用
            val result = ref.getModelFixedLength()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlay::setDimensions" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setDimensions([\"var1\":$var1])")
        
            // 开始调用
            ref.setDimensions(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::setImage" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setImage([])")
        
            // 开始调用
            ref.setImage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::getHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getHeight([])")
        
            // 开始调用
            val result = ref.getHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::setPositionFromBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setPositionFromBounds([])")
        
            // 开始调用
            ref.setPositionFromBounds(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::getBounds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getBounds([])")
        
            // 开始调用
            val result = ref.getBounds()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.GroundOverlay::setBearing" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setBearing([\"var1\":$var1])")
        
            // 开始调用
            ref.setBearing(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::getBearing" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getBearing([])")
        
            // 开始调用
            val result = ref.getBearing()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::setTransparency" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::setTransparency([\"var1\":$var1])")
        
            // 开始调用
            ref.setTransparency(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.GroundOverlay::getTransparency" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::getTransparency([])")
        
            // 开始调用
            val result = ref.getTransparency()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.GroundOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.GroundOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.GroundOverlay@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MyTrafficStyle::getSmoothColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::getSmoothColor([])")
        
            // 开始调用
            val result = ref.getSmoothColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyTrafficStyle::setSmoothColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::setSmoothColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setSmoothColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MyTrafficStyle::getSlowColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::getSlowColor([])")
        
            // 开始调用
            val result = ref.getSlowColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyTrafficStyle::setSlowColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::setSlowColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setSlowColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MyTrafficStyle::getCongestedColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::getCongestedColor([])")
        
            // 开始调用
            val result = ref.getCongestedColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyTrafficStyle::setCongestedColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::setCongestedColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setCongestedColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MyTrafficStyle::getSeriousCongestedColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::getSeriousCongestedColor([])")
        
            // 开始调用
            val result = ref.getSeriousCongestedColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyTrafficStyle::setSeriousCongestedColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::setSeriousCongestedColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setSeriousCongestedColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MyTrafficStyle::getRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::getRatio([])")
        
            // 开始调用
            val result = ref.getRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyTrafficStyle::setRatio" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::setRatio([\"var1\":$var1])")
        
            // 开始调用
            ref.setRatio(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MyTrafficStyle::getTrafficRoadBackgroundColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::getTrafficRoadBackgroundColor([])")
        
            // 开始调用
            val result = ref.getTrafficRoadBackgroundColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MyTrafficStyle::setTrafficRoadBackgroundColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MyTrafficStyle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MyTrafficStyle@$refId::setTrafficRoadBackgroundColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrafficRoadBackgroundColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.CameraPosition::fromLatLngZoom" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CameraPosition::fromLatLngZoom([\"var1\":$var1])")
        
            // 开始调用
            val result = com.amap.api.maps.model.CameraPosition.fromLatLngZoom(var0, var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CameraPosition::builder" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CameraPosition::builder([])")
        
            // 开始调用
            val result = com.amap.api.maps.model.CameraPosition.builder()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PoiPara::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PoiPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PoiPara@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PoiPara::setCenter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PoiPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PoiPara@$refId::setCenter([])")
        
            // 开始调用
            ref.setCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.PoiPara::getKeywords" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PoiPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PoiPara@$refId::getKeywords([])")
        
            // 开始调用
            val result = ref.getKeywords()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PoiPara::setKeywords" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PoiPara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PoiPara@$refId::setKeywords([\"var1\":$var1])")
        
            // 开始调用
            ref.setKeywords(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MarkerOptions::icons" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BitmapDescriptor>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::icons([])")
        
            // 开始调用
            val result = ref.icons(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::rotatingIcons" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BitmapDescriptor>
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::rotatingIcons([\"var2\":$var2])")
        
            // 开始调用
            val result = ref.rotatingIcons(ArrayList(var1), var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getAngleOffset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getAngleOffset([])")
        
            // 开始调用
            val result = ref.getAngleOffset()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::isRotatingMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isRotatingMode([])")
        
            // 开始调用
            val result = ref.isRotatingMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::period" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::period([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.period(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getPeriod" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getPeriod([])")
        
            // 开始调用
            val result = ref.getPeriod()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::isPerspective" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isPerspective([])")
        
            // 开始调用
            val result = ref.isPerspective()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::perspective" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::perspective([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.perspective(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::position" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::position([])")
        
            // 开始调用
            val result = ref.position(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::setFlat" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::setFlat([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setFlat(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::icon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::icon([])")
        
            // 开始调用
            val result = ref.icon(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::anchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::anchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.anchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::setInfoWindowOffset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::setInfoWindowOffset([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.setInfoWindowOffset(var1, var2)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::title" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::title([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.title(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::snippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::snippet([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.snippet(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::draggable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::draggable([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.draggable(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::setGps" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::setGps([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setGps(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::getIcon" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getIcon([])")
        
            // 开始调用
            val result = ref.getIcon()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getAnchorU" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getAnchorU([])")
        
            // 开始调用
            val result = ref.getAnchorU()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::getInfoWindowOffsetX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getInfoWindowOffsetX([])")
        
            // 开始调用
            val result = ref.getInfoWindowOffsetX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::getInfoWindowOffsetY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getInfoWindowOffsetY([])")
        
            // 开始调用
            val result = ref.getInfoWindowOffsetY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::getAnchorV" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getAnchorV([])")
        
            // 开始调用
            val result = ref.getAnchorV()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::isDraggable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isDraggable([])")
        
            // 开始调用
            val result = ref.isDraggable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::isGps" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isGps([])")
        
            // 开始调用
            val result = ref.isGps()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::isFlat" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isFlat([])")
        
            // 开始调用
            val result = ref.isFlat()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::alpha" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::alpha([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.alpha(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getAlpha" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getAlpha([])")
        
            // 开始调用
            val result = ref.getAlpha()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::autoOverturnInfoWindow" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::autoOverturnInfoWindow([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.autoOverturnInfoWindow(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::isInfoWindowAutoOverturn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isInfoWindowAutoOverturn([])")
        
            // 开始调用
            val result = ref.isInfoWindowAutoOverturn()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::displayLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::displayLevel([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.displayLevel(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getDisplayLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getDisplayLevel([])")
        
            // 开始调用
            val result = ref.getDisplayLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::rotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::rotateAngle([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.rotateAngle(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::getRotateAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::getRotateAngle([])")
        
            // 开始调用
            val result = ref.getRotateAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::infoWindowEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::infoWindowEnable([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.infoWindowEnable(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::isInfoWindowEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isInfoWindowEnable([])")
        
            // 开始调用
            val result = ref.isInfoWindowEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MarkerOptions::belowMaskLayer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::belowMaskLayer([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.belowMaskLayer(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MarkerOptions::isBelowMaskLayer" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MarkerOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MarkerOptions@$refId::isBelowMaskLayer([])")
        
            // 开始调用
            val result = ref.isBelowMaskLayer()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.HeatmapTileProvider::getTile" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.HeatmapTileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.HeatmapTileProvider@$refId::getTile([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            val result = ref.getTile(var1, var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.HeatmapTileProvider::getTileHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.HeatmapTileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.HeatmapTileProvider@$refId::getTileHeight([])")
        
            // 开始调用
            val result = ref.getTileHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.HeatmapTileProvider::getTileWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.HeatmapTileProvider
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.HeatmapTileProvider@$refId::getTileWidth([])")
        
            // 开始调用
            val result = ref.getTileWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrow::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrow::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::setWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::setWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrow::setTopColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::setTopColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setTopColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::getTopColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::getTopColor([])")
        
            // 开始调用
            val result = ref.getTopColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrow::setSideColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::setSideColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setSideColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrow::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.NavigateArrow::set3DModel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::set3DModel([\"var1\":$var1])")
        
            // 开始调用
            ref.set3DModel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.NavigateArrow::is3DModel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.NavigateArrow
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.NavigateArrow@$refId::is3DModel([])")
        
            // 开始调用
            val result = ref.is3DModel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.animation.AnimationSet::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.AnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.AnimationSet@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.AnimationSet::addAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.AnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.AnimationSet@$refId::addAnimation([])")
        
            // 开始调用
            ref.addAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.AnimationSet::cleanAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.AnimationSet
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.AnimationSet@$refId::cleanAnimation([])")
        
            // 开始调用
            ref.cleanAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.RotateAnimation::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.RotateAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.RotateAnimation@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.TranslateAnimation::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.TranslateAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.TranslateAnimation@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation.AnimationListener::onAnimationStart" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation.AnimationListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation.AnimationListener@$refId::onAnimationStart([])")
        
            // 开始调用
            ref.onAnimationStart()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation.AnimationListener::onAnimationEnd" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation.AnimationListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation.AnimationListener@$refId::onAnimationEnd([])")
        
            // 开始调用
            ref.onAnimationEnd()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation::setAnimationListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::setAnimationListener([])")
        
            // 开始调用
            ref.setAnimationListener(object : com.amap.api.maps.model.animation.Animation.AnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation::setAnimationListener_Callback" + refId)
        
                // 回调方法们
                override fun onAnimationStart(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationStart([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationStart",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onAnimationEnd(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationEnd([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationEnd",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation::setFillMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::setFillMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation::getFillMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::getFillMode([])")
        
            // 开始调用
            val result = ref.getFillMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.animation.Animation::setRepeatCount" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::setRepeatCount([\"var1\":$var1])")
        
            // 开始调用
            ref.setRepeatCount(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation::setRepeatMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::setRepeatMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setRepeatMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.Animation::getRepeatMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::getRepeatMode([])")
        
            // 开始调用
            val result = ref.getRepeatMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.animation.Animation::getRepeatCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.Animation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.Animation@$refId::getRepeatCount([])")
        
            // 开始调用
            val result = ref.getRepeatCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.animation.EmergeAnimation::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.EmergeAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.EmergeAnimation@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.AlphaAnimation::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.AlphaAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.AlphaAnimation@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.animation.ScaleAnimation::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.animation.ScaleAnimation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.animation.ScaleAnimation@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.LatLngBounds::builder" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.LatLngBounds::builder([])")
        
            // 开始调用
            val result = com.amap.api.maps.model.LatLngBounds.builder()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.LatLngBounds::contains" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.LatLngBounds
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.LatLngBounds@$refId::contains([])")
        
            // 开始调用
            val result = ref.contains(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.LatLngBounds::intersects" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.LatLngBounds
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.LatLngBounds@$refId::intersects([])")
        
            // 开始调用
            val result = ref.intersects(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.LatLngBounds::including" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.LatLngBounds
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.LatLngBounds@$refId::including([])")
        
            // 开始调用
            val result = ref.including(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::getStyleDataPath" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::getStyleDataPath([])")
        
            // 开始调用
            val result = ref.getStyleDataPath()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::setStyleDataPath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::setStyleDataPath([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setStyleDataPath(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::getStyleTexturePath" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::getStyleTexturePath([])")
        
            // 开始调用
            val result = ref.getStyleTexturePath()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::setStyleTexturePath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::setStyleTexturePath([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setStyleTexturePath(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::getStyleId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::getStyleId([])")
        
            // 开始调用
            val result = ref.getStyleId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::setStyleId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::setStyleId([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setStyleId(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::isEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::isEnable([])")
        
            // 开始调用
            val result = ref.isEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::setEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::setEnable([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setEnable(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::getStyleExtraPath" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::getStyleExtraPath([])")
        
            // 开始调用
            val result = ref.getStyleExtraPath()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CustomMapStyleOptions::setStyleExtraPath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CustomMapStyleOptions@$refId::setStyleExtraPath([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setStyleExtraPath(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::setBuildingHeightScale" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::setBuildingHeightScale([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setBuildingHeightScale(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::getBuildingHeightScale" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::getBuildingHeightScale([])")
        
            // 开始调用
            val result = ref.getBuildingHeightScale()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::setBuildingTopColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::setBuildingTopColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setBuildingTopColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::setBuildingSideColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::setBuildingSideColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setBuildingSideColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::getBuildingSideColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::getBuildingSideColor([])")
        
            // 开始调用
            val result = ref.getBuildingSideColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::getBuildingTopColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::getBuildingTopColor([])")
        
            // 开始调用
            val result = ref.getBuildingTopColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::setBuildingHeight" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::setBuildingHeight([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setBuildingHeight(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::getBuildingHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::getBuildingHeight([])")
        
            // 开始调用
            val result = ref.getBuildingHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlayOptions::setBuildingLatlngs" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlayOptions@$refId::setBuildingLatlngs([])")
        
            // 开始调用
            val result = ref.setBuildingLatlngs(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CrossOverlayOptions::getAttribute" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlayOptions@$refId::getAttribute([])")
        
            // 开始调用
            val result = ref.getAttribute()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CrossOverlayOptions::setAttribute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlayOptions@$refId::setAttribute([])")
        
            // 开始调用
            val result = ref.setAttribute(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CrossOverlayOptions::setRes" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.graphics.Bitmap
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlayOptions@$refId::setRes([])")
        
            // 开始调用
            val result = ref.setRes(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CrossOverlayOptions::getRes" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlayOptions@$refId::getRes([])")
        
            // 开始调用
            val result = ref.getRes()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.LatLng::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.LatLng
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.LatLng@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CameraPosition.Builder::build" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CameraPosition.Builder
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CameraPosition.Builder@$refId::build([])")
        
            // 开始调用
            val result = ref.build()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions.LineCapType::valueOf" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions.LineCapType::valueOf([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.model.PolylineOptions.LineCapType.valueOf(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolylineOptions.LineCapType::getTypeValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions.LineCapType
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions.LineCapType@$refId::getTypeValue([])")
        
            // 开始调用
            val result = ref.getTypeValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BasePointOverlay::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BasePointOverlay::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BasePointOverlay::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BasePointOverlay::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BasePointOverlay::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BasePointOverlay::setRotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::setRotateAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::getRotateAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::getRotateAngle([])")
        
            // 开始调用
            val result = ref.getRotateAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BasePointOverlay::setAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::setAnimation([])")
        
            // 开始调用
            ref.setAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::setGeoPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::setGeoPoint([])")
        
            // 开始调用
            ref.setGeoPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BasePointOverlay::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::startAnimation([])")
        
            // 开始调用
            val result = ref.startAnimation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BasePointOverlay::showInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BasePointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BasePointOverlay@$refId::showInfoWindow([])")
        
            // 开始调用
            ref.showInfoWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Arc::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Arc::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Arc::setStrokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::setStrokeWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Arc::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Arc::setStrokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::setStrokeColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Arc::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Arc::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Arc::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Arc::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Arc::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Arc
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Arc@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.AMapCameraInfo::getFov" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapCameraInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapCameraInfo@$refId::getFov([])")
        
            // 开始调用
            val result = ref.getFov()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.AMapCameraInfo::getAspectRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapCameraInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapCameraInfo@$refId::getAspectRatio([])")
        
            // 开始调用
            val result = ref.getAspectRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.AMapCameraInfo::getRotate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapCameraInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapCameraInfo@$refId::getRotate([])")
        
            // 开始调用
            val result = ref.getRotate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.AMapCameraInfo::getX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapCameraInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapCameraInfo@$refId::getX([])")
        
            // 开始调用
            val result = ref.getX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.AMapCameraInfo::getY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapCameraInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapCameraInfo@$refId::getY([])")
        
            // 开始调用
            val result = ref.getY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.AMapCameraInfo::getZ" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapCameraInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapCameraInfo@$refId::getZ([])")
        
            // 开始调用
            val result = ref.getZ()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::setCenter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setCenter([])")
        
            // 开始调用
            ref.setCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Circle::setRadius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setRadius([\"var1\":$var1])")
        
            // 开始调用
            ref.setRadius(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::setStrokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setStrokeWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::setStrokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setStrokeColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::setFillColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setFillColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFillColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getFillColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getFillColor([])")
        
            // 开始调用
            val result = ref.getFillColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::contains" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::contains([])")
        
            // 开始调用
            val result = ref.contains(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Circle::setHoleOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BaseHoleOptions>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setHoleOptions([])")
        
            // 开始调用
            ref.setHoleOptions(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::setStrokeDottedLineType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::setStrokeDottedLineType([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrokeDottedLineType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Circle::getStrokeDottedLineType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Circle
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Circle@$refId::getStrokeDottedLineType([])")
        
            // 开始调用
            val result = ref.getStrokeDottedLineType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolygonOptions::add" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::add([])")
        
            // 开始调用
            val result = ref.add(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::addAll" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::addAll([])")
        
            // 开始调用
            val result = ref.addAll(ArrayList(var1))
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.PolygonOptions::setHoleOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BaseHoleOptions>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::setHoleOptions([])")
        
            // 开始调用
            ref.setHoleOptions(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.PolygonOptions::addHoles" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BaseHoleOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::addHoles([])")
        
            // 开始调用
            val result = ref.addHoles(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::strokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::strokeWidth([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeWidth(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::strokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::strokeColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::fillColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::fillColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.fillColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.PolygonOptions::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolygonOptions::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolygonOptions::getFillColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::getFillColor([])")
        
            // 开始调用
            val result = ref.getFillColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolygonOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolygonOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolygonOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolygonOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MultiPointItem::getLatLng" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::getLatLng([])")
        
            // 开始调用
            val result = ref.getLatLng()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MultiPointItem::setLatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::setLatLng([])")
        
            // 开始调用
            ref.setLatLng(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointItem::getCustomerId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::getCustomerId([])")
        
            // 开始调用
            val result = ref.getCustomerId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MultiPointItem::setCustomerId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::setCustomerId([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomerId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointItem::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MultiPointItem::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointItem::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.MultiPointItem::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointItem::getIPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::getIPoint([])")
        
            // 开始调用
            val result = ref.getIPoint()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MultiPointItem::setIPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointItem@$refId::setIPoint([])")
        
            // 开始调用
            ref.setIPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.ArcOptions::point" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::point([])")
        
            // 开始调用
            val result = ref.point(var1, var2, var3)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.ArcOptions::strokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::strokeWidth([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeWidth(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.ArcOptions::strokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::strokeColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.ArcOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.ArcOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.ArcOptions::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.ArcOptions::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.ArcOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.ArcOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.ArcOptions::getStart" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::getStart([])")
        
            // 开始调用
            val result = ref.getStart()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.ArcOptions::getPassed" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::getPassed([])")
        
            // 开始调用
            val result = ref.getPassed()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.ArcOptions::getEnd" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.ArcOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.ArcOptions@$refId::getEnd([])")
        
            // 开始调用
            val result = ref.getEnd()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::center" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::center([])")
        
            // 开始调用
            val result = ref.center(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::radius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::radius([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.radius(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::strokeWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::strokeWidth([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeWidth(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::strokeColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::strokeColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.strokeColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::fillColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::fillColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.fillColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CircleOptions::getStrokeWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::getStrokeWidth([])")
        
            // 开始调用
            val result = ref.getStrokeWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CircleOptions::getStrokeColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::getStrokeColor([])")
        
            // 开始调用
            val result = ref.getStrokeColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CircleOptions::getFillColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::getFillColor([])")
        
            // 开始调用
            val result = ref.getFillColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CircleOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CircleOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.CircleOptions::addHoles" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BaseHoleOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::addHoles([])")
        
            // 开始调用
            val result = ref.addHoles(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::setStrokeDottedLineType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::setStrokeDottedLineType([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setStrokeDottedLineType(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.CircleOptions::getStrokeDottedLineType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CircleOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CircleOptions@$refId::getStrokeDottedLineType([])")
        
            // 开始调用
            val result = ref.getStrokeDottedLineType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.AMapGestureListener::onDoubleTap" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onDoubleTap([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onDoubleTap(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.AMapGestureListener::onSingleTap" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onSingleTap([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onSingleTap(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.AMapGestureListener::onFling" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onFling([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onFling(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.AMapGestureListener::onScroll" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onScroll([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onScroll(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.AMapGestureListener::onLongPress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onLongPress([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onLongPress(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.AMapGestureListener::onDown" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onDown([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onDown(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.AMapGestureListener::onUp" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onUp([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onUp(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.AMapGestureListener::onMapStable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.AMapGestureListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.AMapGestureListener@$refId::onMapStable([])")
        
            // 开始调用
            ref.onMapStable()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.PolylineOptions.LineJoinType::getTypeValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.PolylineOptions.LineJoinType
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions.LineJoinType@$refId::getTypeValue([])")
        
            // 开始调用
            val result = ref.getTypeValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.PolylineOptions.LineJoinType::valueOf" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Int
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.PolylineOptions.LineJoinType::valueOf([\"var0\":$var0])")
        
            // 开始调用
            val result = com.amap.api.maps.model.PolylineOptions.LineJoinType.valueOf(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.HeatmapTileProvider.Builder::build" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.HeatmapTileProvider.Builder
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.HeatmapTileProvider.Builder@$refId::build([])")
        
            // 开始调用
            val result = ref.build()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.MultiPointOverlay::setItems" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.MultiPointItem>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlay@$refId::setItems([])")
        
            // 开始调用
            ref.setItems(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointOverlay::setAnchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlay@$refId::setAnchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setAnchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointOverlay::setEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlay@$refId::setEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.MultiPointOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.MultiPointOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.MultiPointOverlay@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setPeriod" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setPeriod([\"var1\":$var1])")
        
            // 开始调用
            ref.setPeriod(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getPeriod" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getPeriod([])")
        
            // 开始调用
            val result = ref.getPeriod()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setIcons" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BitmapDescriptor>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setIcons([])")
        
            // 开始调用
            ref.setIcons(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setPerspective" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setPerspective([\"var1\":$var1])")
        
            // 开始调用
            ref.setPerspective(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::isPerspective" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isPerspective([])")
        
            // 开始调用
            val result = ref.isPerspective()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setPosition([])")
        
            // 开始调用
            ref.setPosition(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Marker::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setIcon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setIcon([])")
        
            // 开始调用
            ref.setIcon(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setAnchor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setAnchor([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setAnchor(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setDraggable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setDraggable([\"var1\":$var1])")
        
            // 开始调用
            ref.setDraggable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::isDraggable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isDraggable([])")
        
            // 开始调用
            val result = ref.isDraggable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::showInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::showInfoWindow([])")
        
            // 开始调用
            ref.showInfoWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::hideInfoWindow" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::hideInfoWindow([])")
        
            // 开始调用
            ref.hideInfoWindow()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::isInfoWindowShown" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isInfoWindowShown([])")
        
            // 开始调用
            val result = ref.isInfoWindowShown()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setRotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setRotateAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getRotateAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getRotateAngle([])")
        
            // 开始调用
            val result = ref.getRotateAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setToTop" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setToTop([])")
        
            // 开始调用
            ref.setToTop()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setGeoPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setGeoPoint([])")
        
            // 开始调用
            ref.setGeoPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getGeoPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getGeoPoint([])")
        
            // 开始调用
            val result = ref.getGeoPoint()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Marker::setFlat" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setFlat([\"var1\":$var1])")
        
            // 开始调用
            ref.setFlat(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::isFlat" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isFlat([])")
        
            // 开始调用
            val result = ref.isFlat()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setPositionByPixels" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setPositionByPixels([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setPositionByPixels(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setAnimation([])")
        
            // 开始调用
            ref.setAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::startAnimation([])")
        
            // 开始调用
            val result = ref.startAnimation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setAnimationListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setAnimationListener([])")
        
            // 开始调用
            ref.setAnimationListener(object : com.amap.api.maps.model.animation.Animation.AnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.Marker::setAnimationListener_Callback" + refId)
        
                // 回调方法们
                override fun onAnimationStart(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationStart([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationStart",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onAnimationEnd(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationEnd([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationEnd",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getAlpha" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getAlpha([])")
        
            // 开始调用
            val result = ref.getAlpha()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setAlpha" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setAlpha([\"var1\":$var1])")
        
            // 开始调用
            ref.setAlpha(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getDisplayLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getDisplayLevel([])")
        
            // 开始调用
            val result = ref.getDisplayLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::getOptions" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getOptions([])")
        
            // 开始调用
            val result = ref.getOptions()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Marker::isClickable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isClickable([])")
        
            // 开始调用
            val result = ref.isClickable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::isInfoWindowAutoOverturn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isInfoWindowAutoOverturn([])")
        
            // 开始调用
            val result = ref.isInfoWindowAutoOverturn()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::isInfoWindowEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isInfoWindowEnable([])")
        
            // 开始调用
            val result = ref.isInfoWindowEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setInfoWindowEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setInfoWindowEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setMarkerOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MarkerOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setMarkerOptions([])")
        
            // 开始调用
            ref.setMarkerOptions(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setAutoOverturnInfoWindow" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setAutoOverturnInfoWindow([\"var1\":$var1])")
        
            // 开始调用
            ref.setAutoOverturnInfoWindow(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setClickable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setClickable([\"var1\":$var1])")
        
            // 开始调用
            ref.setClickable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setDisplayLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setDisplayLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setDisplayLevel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setFixingPointEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setFixingPointEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setFixingPointEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::isRemoved" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::isRemoved([])")
        
            // 开始调用
            val result = ref.isRemoved()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::setPositionNotUpdate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setPositionNotUpdate([])")
        
            // 开始调用
            ref.setPositionNotUpdate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setRotateAngleNotUpdate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setRotateAngleNotUpdate([\"var1\":$var1])")
        
            // 开始调用
            ref.setRotateAngleNotUpdate(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::setBelowMaskLayer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::setBelowMaskLayer([\"var1\":$var1])")
        
            // 开始调用
            ref.setBelowMaskLayer(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Marker::getAnchorU" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getAnchorU([])")
        
            // 开始调用
            val result = ref.getAnchorU()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Marker::getAnchorV" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Marker
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Marker@$refId::getAnchorV([])")
        
            // 开始调用
            val result = ref.getAnchorV()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlayOptions::tileProvider" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.TileProvider
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::tileProvider([])")
        
            // 开始调用
            val result = ref.tileProvider(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::memCacheSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::memCacheSize([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.memCacheSize(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::diskCacheSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::diskCacheSize([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.diskCacheSize(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::diskCacheDir" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::diskCacheDir([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.diskCacheDir(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::memoryCacheEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::memoryCacheEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.memoryCacheEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::diskCacheEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::diskCacheEnabled([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.diskCacheEnabled(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TileOverlayOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlayOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlayOptions::getMemCacheSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::getMemCacheSize([])")
        
            // 开始调用
            val result = ref.getMemCacheSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlayOptions::getDiskCacheSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::getDiskCacheSize([])")
        
            // 开始调用
            val result = ref.getDiskCacheSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlayOptions::getDiskCacheDir" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::getDiskCacheDir([])")
        
            // 开始调用
            val result = ref.getDiskCacheDir()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlayOptions::getMemoryCacheEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::getMemoryCacheEnabled([])")
        
            // 开始调用
            val result = ref.getMemoryCacheEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlayOptions::getDiskCacheEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlayOptions@$refId::getDiskCacheEnabled([])")
        
            // 开始调用
            val result = ref.getDiskCacheEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.RoutePara::getDrivingRouteStyle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::getDrivingRouteStyle([])")
        
            // 开始调用
            val result = ref.getDrivingRouteStyle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.RoutePara::setDrivingRouteStyle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::setDrivingRouteStyle([\"var1\":$var1])")
        
            // 开始调用
            ref.setDrivingRouteStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.RoutePara::getTransitRouteStyle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::getTransitRouteStyle([])")
        
            // 开始调用
            val result = ref.getTransitRouteStyle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.RoutePara::setTransitRouteStyle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::setTransitRouteStyle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTransitRouteStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.RoutePara::getStartPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::getStartPoint([])")
        
            // 开始调用
            val result = ref.getStartPoint()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.RoutePara::setStartPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::setStartPoint([])")
        
            // 开始调用
            ref.setStartPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.RoutePara::getEndPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::getEndPoint([])")
        
            // 开始调用
            val result = ref.getEndPoint()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.RoutePara::setEndPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::setEndPoint([])")
        
            // 开始调用
            ref.setEndPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.RoutePara::getEndName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::getEndName([])")
        
            // 开始调用
            val result = ref.getEndName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.RoutePara::setEndName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::setEndName([\"var1\":$var1])")
        
            // 开始调用
            ref.setEndName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.RoutePara::getStartName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::getStartName([])")
        
            // 开始调用
            val result = ref.getStartName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.RoutePara::setStartName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.RoutePara
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.RoutePara@$refId::setStartName([\"var1\":$var1])")
        
            // 开始调用
            ref.setStartName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.CrossOverlay::setAttribute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlay@$refId::setAttribute([])")
        
            // 开始调用
            ref.setAttribute(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.CrossOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.CrossOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.CrossOverlay::setImageMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlay@$refId::setImageMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setImageMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.CrossOverlay::setGenerateCrossImageListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.CrossOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.CrossOverlay@$refId::setGenerateCrossImageListener([])")
        
            // 开始调用
            ref.setGenerateCrossImageListener(object : com.amap.api.maps.model.CrossOverlay.GenerateCrossImageListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.CrossOverlay::setGenerateCrossImageListener_Callback" + refId)
        
                // 回调方法们
                override fun onGenerateComplete(var1: android.graphics.Bitmap, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGenerateComplete([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.CrossOverlay.GenerateCrossImageListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onGenerateComplete",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 },
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverLifeModule::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverLifeModule
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverLifeModule@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverLifeModule::setVelocityOverLife" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.VelocityGenerate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverLifeModule
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverLifeModule@$refId::setVelocityOverLife([])")
        
            // 开始调用
            ref.setVelocityOverLife(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverLifeModule::setRotateOverLife" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.RotationOverLife
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverLifeModule
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverLifeModule@$refId::setRotateOverLife([])")
        
            // 开始调用
            ref.setRotateOverLife(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverLifeModule::setSizeOverLife" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.SizeOverLife
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverLifeModule
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverLifeModule@$refId::setSizeOverLife([])")
        
            // 开始调用
            ref.setSizeOverLife(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverLifeModule::setColorGenerate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ColorGenerate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverLifeModule
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverLifeModule@$refId::setColorGenerate([])")
        
            // 开始调用
            ref.setColorGenerate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ConstantRotationOverLife::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ConstantRotationOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ConstantRotationOverLife@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ConstantRotationOverLife::getRotate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ConstantRotationOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ConstantRotationOverLife@$refId::getRotate([])")
        
            // 开始调用
            val result = ref.getRotate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.SinglePointParticleShape::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.SinglePointParticleShape
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.SinglePointParticleShape@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants::getX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants@$refId::getX([])")
        
            // 开始调用
            val result = ref.getX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants::getY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants@$refId::getY([])")
        
            // 开始调用
            val result = ref.getY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants::getZ" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants@$refId::getZ([])")
        
            // 开始调用
            val result = ref.getZ()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.CurveSizeOverLife::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.CurveSizeOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.CurveSizeOverLife@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.CurveSizeOverLife::getSizeX" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.CurveSizeOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.CurveSizeOverLife@$refId::getSizeX([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getSizeX(var1.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.CurveSizeOverLife::getSizeY" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.CurveSizeOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.CurveSizeOverLife@$refId::getSizeY([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getSizeY(var1.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.CurveSizeOverLife::getSizeZ" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.CurveSizeOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.CurveSizeOverLife@$refId::getSizeZ([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getSizeZ(var1.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleEmissionModule::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleEmissionModule
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleEmissionModule@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.SizeOverLife::getSizeX" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.SizeOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.SizeOverLife@$refId::getSizeX([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getSizeX(var1.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.SizeOverLife::getSizeY" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.SizeOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.SizeOverLife@$refId::getSizeY([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getSizeY(var1.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.SizeOverLife::getSizeZ" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.SizeOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.SizeOverLife@$refId::getSizeZ([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getSizeZ(var1.toFloat())
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.RectParticleShape::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.RectParticleShape
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.RectParticleShape@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.VelocityGenerate::getX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.VelocityGenerate
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.VelocityGenerate@$refId::getX([])")
        
            // 开始调用
            val result = ref.getX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.VelocityGenerate::getY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.VelocityGenerate
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.VelocityGenerate@$refId::getY([])")
        
            // 开始调用
            val result = ref.getY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.VelocityGenerate::getZ" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.VelocityGenerate
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.VelocityGenerate@$refId::getZ([])")
        
            // 开始调用
            val result = ref.getZ()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.RotationOverLife::getRotate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.RotationOverLife
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.RotationOverLife@$refId::getRotate([])")
        
            // 开始调用
            val result = ref.getRotate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants::createNativeInstace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants@$refId::createNativeInstace([])")
        
            // 开始调用
            ref.createNativeInstace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleShapeModule::isUseRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleShapeModule
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleShapeModule@$refId::isUseRatio([])")
        
            // 开始调用
            val result = ref.isUseRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::icon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::icon([])")
        
            // 开始调用
            val result = ref.icon(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getIcon" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getIcon([])")
        
            // 开始调用
            val result = ref.getIcon()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getMaxParticles" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getMaxParticles([])")
        
            // 开始调用
            val result = ref.getMaxParticles()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setMaxParticles" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setMaxParticles([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setMaxParticles(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::isLoop" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::isLoop([])")
        
            // 开始调用
            val result = ref.isLoop()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setLoop" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setLoop([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setLoop(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setDuration(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getParticleLifeTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getParticleLifeTime([])")
        
            // 开始调用
            val result = ref.getParticleLifeTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setParticleLifeTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setParticleLifeTime([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setParticleLifeTime(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getParticleEmissionModule" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getParticleEmissionModule([])")
        
            // 开始调用
            val result = ref.getParticleEmissionModule()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setParticleEmissionModule" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleEmissionModule
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setParticleEmissionModule([])")
        
            // 开始调用
            val result = ref.setParticleEmissionModule(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getParticleShapeModule" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getParticleShapeModule([])")
        
            // 开始调用
            val result = ref.getParticleShapeModule()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setParticleShapeModule" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleShapeModule
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setParticleShapeModule([])")
        
            // 开始调用
            val result = ref.setParticleShapeModule(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getParticleStartSpeed" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getParticleStartSpeed([])")
        
            // 开始调用
            val result = ref.getParticleStartSpeed()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setParticleStartSpeed" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.VelocityGenerate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setParticleStartSpeed([])")
        
            // 开始调用
            val result = ref.setParticleStartSpeed(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setParticleStartColor" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ColorGenerate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setParticleStartColor([])")
        
            // 开始调用
            val result = ref.setParticleStartColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getParticleStartColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getParticleStartColor([])")
        
            // 开始调用
            val result = ref.getParticleStartColor()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setParticleOverLifeModule" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleOverLifeModule
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setParticleOverLifeModule([])")
        
            // 开始调用
            val result = ref.setParticleOverLifeModule(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getParticleOverLifeModule" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getParticleOverLifeModule([])")
        
            // 开始调用
            val result = ref.getParticleOverLifeModule()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setStartParticleSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setStartParticleSize([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.setStartParticleSize(var1, var2)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getStartParticleW" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getStartParticleW([])")
        
            // 开始调用
            val result = ref.getStartParticleW()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getstartParticleH" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getstartParticleH([])")
        
            // 开始调用
            val result = ref.getstartParticleH()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setVisible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.particle.ParticleOverlayOptions::isVisibile" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlayOptions@$refId::isVisibile([])")
        
            // 开始调用
            val result = ref.isVisibile()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setStartParticleSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setStartParticleSize([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setStartParticleSize(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setMaxParticles" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setMaxParticles([\"var1\":$var1])")
        
            // 开始调用
            ref.setMaxParticles(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setParticleLifeTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setParticleLifeTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setParticleLifeTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setParticleStartSpeed" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.VelocityGenerate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setParticleStartSpeed([])")
        
            // 开始调用
            ref.setParticleStartSpeed(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setLoop" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setLoop([\"var1\":$var1])")
        
            // 开始调用
            ref.setLoop(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setParticleShapeModule" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleShapeModule
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setParticleShapeModule([])")
        
            // 开始调用
            ref.setParticleShapeModule(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setParticleEmission" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleEmissionModule
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setParticleEmission([])")
        
            // 开始调用
            ref.setParticleEmission(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::getCurrentParticleNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::getCurrentParticleNum([])")
        
            // 开始调用
            val result = ref.getCurrentParticleNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setParticleOverLifeModule" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleOverLifeModule
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setParticleOverLifeModule([])")
        
            // 开始调用
            ref.setParticleOverLifeModule(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.particle.ParticleOverlay::setStartColor" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ColorGenerate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.particle.ParticleOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.particle.ParticleOverlay@$refId::setStartColor([])")
        
            // 开始调用
            ref.setStartColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.TextOptions::position" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::position([])")
        
            // 开始调用
            val result = ref.position(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::text" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::text([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.text(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::visible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::visible([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.visible(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::zIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::zIndex([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.zIndex(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::rotate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::rotate([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.rotate(var1.toFloat())
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::align" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::align([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            val result = ref.align(var1, var2)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::backgroundColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::backgroundColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.backgroundColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::fontColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::fontColor([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.fontColor(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::fontSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::fontSize([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.fontSize(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::getPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getPosition([])")
        
            // 开始调用
            val result = ref.getPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.TextOptions::getText" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getText([])")
        
            // 开始调用
            val result = ref.getText()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::getRotate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getRotate([])")
        
            // 开始调用
            val result = ref.getRotate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::getAlignX" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getAlignX([])")
        
            // 开始调用
            val result = ref.getAlignX()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::getAlignY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getAlignY([])")
        
            // 开始调用
            val result = ref.getAlignY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::getBackgroundColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getBackgroundColor([])")
        
            // 开始调用
            val result = ref.getBackgroundColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::getFontColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getFontColor([])")
        
            // 开始调用
            val result = ref.getFontColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::getFontSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getFontSize([])")
        
            // 开始调用
            val result = ref.getFontSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TextOptions::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TextOptions
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TextOptions@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.TileOverlay::clearTileCache" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlay@$refId::clearTileCache([])")
        
            // 开始调用
            ref.clearTileCache()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.TileOverlay::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlay@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlay::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlay@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.TileOverlay::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlay@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.TileOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.TileOverlay::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.TileOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.TileOverlay@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::setPoints" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setPoints([])")
        
            // 开始调用
            ref.setPoints(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::setGeodesic" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setGeodesic([\"var1\":$var1])")
        
            // 开始调用
            ref.setGeodesic(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::isGeodesic" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::isGeodesic([])")
        
            // 开始调用
            val result = ref.isGeodesic()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::setDottedLine" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setDottedLine([\"var1\":$var1])")
        
            // 开始调用
            ref.setDottedLine(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::isDottedLine" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::isDottedLine([])")
        
            // 开始调用
            val result = ref.isDottedLine()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::setWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::getWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::getWidth([])")
        
            // 开始调用
            val result = ref.getWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::setColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::getColor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::getColor([])")
        
            // 开始调用
            val result = ref.getColor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::getNearestLatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::getNearestLatLng([])")
        
            // 开始调用
            val result = ref.getNearestLatLng(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Polyline::setTransparency" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setTransparency([\"var1\":$var1])")
        
            // 开始调用
            ref.setTransparency(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::setAboveMaskLayer" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setAboveMaskLayer([\"var1\":$var1])")
        
            // 开始调用
            ref.setAboveMaskLayer(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::setCustomTexture" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BitmapDescriptor
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setCustomTexture([])")
        
            // 开始调用
            ref.setCustomTexture(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::setOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolylineOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setOptions([])")
        
            // 开始调用
            ref.setOptions(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::getOptions" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::getOptions([])")
        
            // 开始调用
            val result = ref.getOptions()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.Polyline::setCustemTextureIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as List<Int>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setCustemTextureIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustemTextureIndex(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::setShownRatio" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setShownRatio([\"var1\":$var1])")
        
            // 开始调用
            ref.setShownRatio(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::setShownRange" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setShownRange([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setShownRange(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.Polyline::getShownRatio" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::getShownRatio([])")
        
            // 开始调用
            val result = ref.getShownRatio()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.Polyline::setCustomTextureList" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BitmapDescriptor>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.Polyline
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.Polyline@$refId::setCustomTextureList([])")
        
            // 开始调用
            ref.setCustomTextureList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlay::setDefaultOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.BuildingOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::setDefaultOptions([])")
        
            // 开始调用
            ref.setDefaultOptions(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlay::getDefaultOptions" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::getDefaultOptions([])")
        
            // 开始调用
            val result = ref.getDefaultOptions()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.model.BuildingOverlay::setCustomOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.BuildingOverlayOptions>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::setCustomOptions([])")
        
            // 开始调用
            ref.setCustomOptions(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlay::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlay::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlay::setZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::setZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setZIndex(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlay::getZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::getZIndex([])")
        
            // 开始调用
            val result = ref.getZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.model.BuildingOverlay::setVisible" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::setVisible([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisible(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.model.BuildingOverlay::isVisible" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.model.BuildingOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.model.BuildingOverlay@$refId::isVisible([])")
        
            // 开始调用
            val result = ref.isVisible()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.SwipeDismissTouchListener.DismissCallbacks::onNotifySwipe" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.SwipeDismissTouchListener.DismissCallbacks
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.SwipeDismissTouchListener.DismissCallbacks@$refId::onNotifySwipe([])")
        
            // 开始调用
            ref.onNotifySwipe()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.TextureMapView::getMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::getMap([])")
        
            // 开始调用
            val result = ref.getMap()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.TextureMapView::onCreate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::onCreate([])")
        
            // 开始调用
            ref.onCreate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.TextureMapView::onResume" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::onResume([])")
        
            // 开始调用
            ref.onResume()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.TextureMapView::onPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::onPause([])")
        
            // 开始调用
            ref.onPause()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.TextureMapView::onDestroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::onDestroy([])")
        
            // 开始调用
            ref.onDestroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.TextureMapView::onLowMemory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::onLowMemory([])")
        
            // 开始调用
            ref.onLowMemory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.TextureMapView::onSaveInstanceState" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::onSaveInstanceState([])")
        
            // 开始调用
            ref.onSaveInstanceState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.TextureMapView::setVisibility" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.TextureMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.TextureMapView@$refId::setVisibility([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisibility(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapUtils::calculateLineDistance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::calculateLineDistance([])")
        
            // 开始调用
            val result = com.amap.api.maps.AMapUtils.calculateLineDistance(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapUtils::calculateArea" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::calculateArea([])")
        
            // 开始调用
            val result = com.amap.api.maps.AMapUtils.calculateArea(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMapUtils::getLatestAMapApp" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::getLatestAMapApp([])")
        
            // 开始调用
            com.amap.api.maps.AMapUtils.getLatestAMapApp(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapUtils::openAMapNavi" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.NaviPara
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::openAMapNavi([])")
        
            // 开始调用
            com.amap.api.maps.AMapUtils.openAMapNavi(var0, var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapUtils::openAMapPoiNearbySearch" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.PoiPara
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::openAMapPoiNearbySearch([])")
        
            // 开始调用
            com.amap.api.maps.AMapUtils.openAMapPoiNearbySearch(var0, var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapUtils::openAMapDrivingRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.RoutePara
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::openAMapDrivingRoute([])")
        
            // 开始调用
            com.amap.api.maps.AMapUtils.openAMapDrivingRoute(var0, var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapUtils::openAMapTransitRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.RoutePara
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::openAMapTransitRoute([])")
        
            // 开始调用
            com.amap.api.maps.AMapUtils.openAMapTransitRoute(var0, var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMapUtils::openAMapWalkingRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as com.amap.api.maps.model.RoutePara
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMapUtils::openAMapWalkingRoute([])")
        
            // 开始调用
            com.amap.api.maps.AMapUtils.openAMapWalkingRoute(var0, var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnPOIClickListener::onPOIClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Poi
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnPOIClickListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnPOIClickListener@$refId::onPOIClick([])")
        
            // 开始调用
            ref.onPOIClick(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnInfoWindowClickListener::onInfoWindowClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Marker
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnInfoWindowClickListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnInfoWindowClickListener@$refId::onInfoWindowClick([])")
        
            // 开始调用
            ref.onInfoWindowClick(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnMapClickListener::onMapClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMapClickListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMapClickListener@$refId::onMapClick([])")
        
            // 开始调用
            ref.onMapClick(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::setInfoWindowAnimation([])")
        
            // 开始调用
            ref.setInfoWindowAnimation(var1, object : com.amap.api.maps.model.animation.Animation.AnimationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowAnimation_Callback" + refId)
        
                // 回调方法们
                override fun onAnimationStart(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationStart([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationStart",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onAnimationEnd(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onAnimationEnd([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.animation.Animation.AnimationListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onAnimationEnd",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowAppearAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::setInfoWindowAppearAnimation([])")
        
            // 开始调用
            ref.setInfoWindowAppearAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowBackColor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::setInfoWindowBackColor([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowBackColor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowBackEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::setInfoWindowBackEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setInfoWindowBackEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowBackScale" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::setInfoWindowBackScale([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setInfoWindowBackScale(var1.toFloat(), var2.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowDisappearAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::setInfoWindowDisappearAnimation([])")
        
            // 开始调用
            ref.setInfoWindowDisappearAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowMovingAnimation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.animation.Animation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::setInfoWindowMovingAnimation([])")
        
            // 开始调用
            ref.setInfoWindowMovingAnimation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.InfoWindowAnimationManager::startAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.InfoWindowAnimationManager
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.InfoWindowAnimationManager@$refId::startAnimation([])")
        
            // 开始调用
            ref.startAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnPolylineClickListener::onPolylineClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.Polyline
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnPolylineClickListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnPolylineClickListener@$refId::onPolylineClick([])")
        
            // 开始调用
            ref.onPolylineClick(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::getMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::getMap([])")
        
            // 开始调用
            val result = ref.getMap()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.WearMapView::onCreate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onCreate([])")
        
            // 开始调用
            ref.onCreate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onResume" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onResume([])")
        
            // 开始调用
            ref.onResume()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onPause([])")
        
            // 开始调用
            ref.onPause()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onDestroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onDestroy([])")
        
            // 开始调用
            ref.onDestroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onLowMemory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onLowMemory([])")
        
            // 开始调用
            ref.onLowMemory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onSaveInstanceState" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onSaveInstanceState([])")
        
            // 开始调用
            ref.onSaveInstanceState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::setVisibility" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::setVisibility([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisibility(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::setOnDismissCallbackListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::setOnDismissCallbackListener([])")
        
            // 开始调用
            ref.setOnDismissCallbackListener(object : com.amap.api.maps.WearMapView.OnDismissCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.WearMapView::setOnDismissCallbackListener_Callback" + refId)
        
                // 回调方法们
                override fun onDismiss(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDismiss([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.WearMapView.OnDismissCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onDismiss",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNotifySwipe(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNotifySwipe([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.WearMapView.OnDismissCallback::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onNotifySwipe",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onDismiss" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onDismiss([])")
        
            // 开始调用
            ref.onDismiss()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onEnterAmbient" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onEnterAmbient([])")
        
            // 开始调用
            ref.onEnterAmbient(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.WearMapView::onExitAmbient" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.WearMapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.WearMapView@$refId::onExitAmbient([])")
        
            // 开始调用
            ref.onExitAmbient()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap.OnMapLongClickListener::onMapLongClick" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap.OnMapLongClickListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap.OnMapLongClickListener@$refId::onMapLongClick([])")
        
            // 开始调用
            ref.onMapLongClick(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getCameraPosition" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getCameraPosition([])")
        
            // 开始调用
            val result = ref.getCameraPosition()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::getMaxZoomLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMaxZoomLevel([])")
        
            // 开始调用
            val result = ref.getMaxZoomLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::getMinZoomLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMinZoomLevel([])")
        
            // 开始调用
            val result = ref.getMinZoomLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::moveCamera" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CameraUpdate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::moveCamera([])")
        
            // 开始调用
            ref.moveCamera(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::animateCamera" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CameraUpdate
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::animateCamera([])")
        
            // 开始调用
            ref.animateCamera(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::stopAnimation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::stopAnimation([])")
        
            // 开始调用
            ref.stopAnimation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::addNavigateArrow" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.NavigateArrowOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addNavigateArrow([])")
        
            // 开始调用
            val result = ref.addNavigateArrow(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addPolyline" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolylineOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addPolyline([])")
        
            // 开始调用
            val result = ref.addPolyline(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addBuildingOverlay" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addBuildingOverlay([])")
        
            // 开始调用
            val result = ref.addBuildingOverlay()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addCircle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CircleOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addCircle([])")
        
            // 开始调用
            val result = ref.addCircle(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addArc" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.ArcOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addArc([])")
        
            // 开始调用
            val result = ref.addArc(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addPolygon" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolygonOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addPolygon([])")
        
            // 开始调用
            val result = ref.addPolygon(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addGroundOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.GroundOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addGroundOverlay([])")
        
            // 开始调用
            val result = ref.addGroundOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addMarker" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MarkerOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addMarker([])")
        
            // 开始调用
            val result = ref.addMarker(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addGL3DModel" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.GL3DModelOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addGL3DModel([])")
        
            // 开始调用
            val result = ref.addGL3DModel(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addText" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.TextOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addText([])")
        
            // 开始调用
            val result = ref.addText(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addTileOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.TileOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addTileOverlay([])")
        
            // 开始调用
            val result = ref.addTileOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addMultiPointOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MultiPointOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addMultiPointOverlay([])")
        
            // 开始调用
            val result = ref.addMultiPointOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addParticleOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.particle.ParticleOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addParticleOverlay([])")
        
            // 开始调用
            val result = ref.addParticleOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::clear" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::clear([])")
        
            // 开始调用
            ref.clear()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMapType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMapType([])")
        
            // 开始调用
            val result = ref.getMapType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::setMapType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMapType([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::isTrafficEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::isTrafficEnabled([])")
        
            // 开始调用
            val result = ref.isTrafficEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::setTrafficEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setTrafficEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrafficEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::showMapText" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::showMapText([\"var1\":$var1])")
        
            // 开始调用
            ref.showMapText(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::showIndoorMap" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::showIndoorMap([\"var1\":$var1])")
        
            // 开始调用
            ref.showIndoorMap(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::showBuildings" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::showBuildings([\"var1\":$var1])")
        
            // 开始调用
            ref.showBuildings(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setMyTrafficStyle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MyTrafficStyle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMyTrafficStyle([])")
        
            // 开始调用
            ref.setMyTrafficStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMyTrafficStyle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMyTrafficStyle([])")
        
            // 开始调用
            val result = ref.getMyTrafficStyle()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::isMyLocationEnabled" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::isMyLocationEnabled([])")
        
            // 开始调用
            val result = ref.isMyLocationEnabled()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::setMyLocationEnabled" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMyLocationEnabled([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationEnabled(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMyLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMyLocation([])")
        
            // 开始调用
            val result = ref.getMyLocation()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::setLocationSource" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.LocationSource
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setLocationSource([])")
        
            // 开始调用
            ref.setLocationSource(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setMyLocationStyle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.MyLocationStyle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMyLocationStyle([])")
        
            // 开始调用
            ref.setMyLocationStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMyLocationStyle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMyLocationStyle([])")
        
            // 开始调用
            val result = ref.getMyLocationStyle()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::setMyLocationType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMyLocationType([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setMyLocationRotateAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMyLocationRotateAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setMyLocationRotateAngle(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getUiSettings" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getUiSettings([])")
        
            // 开始调用
            val result = ref.getUiSettings()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::getProjection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getProjection([])")
        
            // 开始调用
            val result = ref.getProjection()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::setOnCameraChangeListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnCameraChangeListener([])")
        
            // 开始调用
            ref.setOnCameraChangeListener(object : com.amap.api.maps.AMap.OnCameraChangeListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnCameraChangeListener_Callback" + refId)
        
                // 回调方法们
                override fun onCameraChange(var1: com.amap.api.maps.model.CameraPosition): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCameraChange([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnCameraChangeListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCameraChange",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCameraChangeFinish(var1: com.amap.api.maps.model.CameraPosition): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCameraChangeFinish([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnCameraChangeListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onCameraChangeFinish",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMapClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMapClickListener([])")
        
            // 开始调用
            ref.setOnMapClickListener(object : com.amap.api.maps.AMap.OnMapClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMapClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onMapClick(var1: com.amap.api.maps.model.LatLng): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMapTouchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMapTouchListener([])")
        
            // 开始调用
            ref.setOnMapTouchListener(object : com.amap.api.maps.AMap.OnMapTouchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMapTouchListener_Callback" + refId)
        
                // 回调方法们
                override fun onTouch(var1: android.view.MotionEvent): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onTouch([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapTouchListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onTouch",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnPOIClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnPOIClickListener([])")
        
            // 开始调用
            ref.setOnPOIClickListener(object : com.amap.api.maps.AMap.OnPOIClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnPOIClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onPOIClick(var1: com.amap.api.maps.model.Poi): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPOIClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnPOIClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onPOIClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMyLocationChangeListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMyLocationChangeListener([])")
        
            // 开始调用
            ref.setOnMyLocationChangeListener(object : com.amap.api.maps.AMap.OnMyLocationChangeListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMyLocationChangeListener_Callback" + refId)
        
                // 回调方法们
                override fun onMyLocationChange(var1: android.location.Location): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMyLocationChange([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMyLocationChangeListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMyLocationChange",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMapLongClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMapLongClickListener([])")
        
            // 开始调用
            ref.setOnMapLongClickListener(object : com.amap.api.maps.AMap.OnMapLongClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMapLongClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onMapLongClick(var1: com.amap.api.maps.model.LatLng): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapLongClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapLongClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapLongClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMarkerClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMarkerClickListener([])")
        
            // 开始调用
            ref.setOnMarkerClickListener(object : com.amap.api.maps.AMap.OnMarkerClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMarkerClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onMarkerClick(var1: com.amap.api.maps.model.Marker): Boolean {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
                    return true
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnPolylineClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnPolylineClickListener([])")
        
            // 开始调用
            ref.setOnPolylineClickListener(object : com.amap.api.maps.AMap.OnPolylineClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnPolylineClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onPolylineClick(var1: com.amap.api.maps.model.Polyline): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPolylineClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnPolylineClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onPolylineClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMarkerDragListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMarkerDragListener([])")
        
            // 开始调用
            ref.setOnMarkerDragListener(object : com.amap.api.maps.AMap.OnMarkerDragListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMarkerDragListener_Callback" + refId)
        
                // 回调方法们
                override fun onMarkerDragStart(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerDragStart([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerDragListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerDragStart",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMarkerDrag(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerDrag([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerDragListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerDrag",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMarkerDragEnd(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMarkerDragEnd([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMarkerDragListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMarkerDragEnd",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnInfoWindowClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnInfoWindowClickListener([])")
        
            // 开始调用
            ref.setOnInfoWindowClickListener(object : com.amap.api.maps.AMap.OnInfoWindowClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnInfoWindowClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onInfoWindowClick(var1: com.amap.api.maps.model.Marker): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onInfoWindowClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnInfoWindowClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onInfoWindowClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setInfoWindowAdapter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.AMap.InfoWindowAdapter
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setInfoWindowAdapter([])")
        
            // 开始调用
            ref.setInfoWindowAdapter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setCommonInfoWindowAdapter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setCommonInfoWindowAdapter([])")
        
            // 开始调用
            ref.setCommonInfoWindowAdapter(object : com.amap.api.maps.AMap.CommonInfoWindowAdapter {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setCommonInfoWindowAdapter_Callback" + refId)
        
                // 回调方法们
                override fun getInfoWindowParams(var1: com.amap.api.maps.model.BasePointOverlay): com.amap.api.maps.InfoWindowParams? {
                    // 日志打印
                    println("fluttify-kotlin-callback: getInfoWindowParams([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.CommonInfoWindowAdapter::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::getInfoWindowParams",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
                    return null
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMapLoadedListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMapLoadedListener([])")
        
            // 开始调用
            ref.setOnMapLoadedListener(object : com.amap.api.maps.AMap.OnMapLoadedListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMapLoadedListener_Callback" + refId)
        
                // 回调方法们
                override fun onMapLoaded(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapLoaded([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapLoadedListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapLoaded",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnIndoorBuildingActiveListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnIndoorBuildingActiveListener([])")
        
            // 开始调用
            ref.setOnIndoorBuildingActiveListener(object : com.amap.api.maps.AMap.OnIndoorBuildingActiveListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnIndoorBuildingActiveListener_Callback" + refId)
        
                // 回调方法们
                override fun OnIndoorBuilding(var1: com.amap.api.maps.model.IndoorBuildingInfo): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: OnIndoorBuilding([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnIndoorBuildingActiveListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::OnIndoorBuilding",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setOnMultiPointClickListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setOnMultiPointClickListener([])")
        
            // 开始调用
            ref.setOnMultiPointClickListener(object : com.amap.api.maps.AMap.OnMultiPointClickListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setOnMultiPointClickListener_Callback" + refId)
        
                // 回调方法们
                override fun onPointClick(var1: com.amap.api.maps.model.MultiPointItem): Boolean {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPointClick([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMultiPointClickListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onPointClick",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
                    return true
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMapPrintScreen" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMapPrintScreen([])")
        
            // 开始调用
            ref.getMapPrintScreen(object : com.amap.api.maps.AMap.onMapPrintScreenListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::getMapPrintScreen_Callback" + refId)
        
                // 回调方法们
                override fun onMapPrint(var1: android.graphics.drawable.Drawable): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapPrint([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.onMapPrintScreenListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapPrint",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMapScreenShot" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMapScreenShot([])")
        
            // 开始调用
            ref.getMapScreenShot(object : com.amap.api.maps.AMap.OnMapScreenShotListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::getMapScreenShot_Callback" + refId)
        
                // 回调方法们
                override fun onMapScreenShot(var1: android.graphics.Bitmap): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapScreenShot([\"var1\":$var1])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapScreenShotListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapScreenShot",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 })
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMapScreenShot(var1: android.graphics.Bitmap, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapScreenShot([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap.OnMapScreenShotListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapScreenShot",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 },
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getScalePerPixel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getScalePerPixel([])")
        
            // 开始调用
            val result = ref.getScalePerPixel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::runOnDrawFrame" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::runOnDrawFrame([])")
        
            // 开始调用
            ref.runOnDrawFrame()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::removecache" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::removecache([])")
        
            // 开始调用
            ref.removecache()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setCustomRenderer" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.CustomRenderer
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setCustomRenderer([])")
        
            // 开始调用
            ref.setCustomRenderer(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setPointToCenter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setPointToCenter([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setPointToCenter(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setMapTextZIndex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMapTextZIndex([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapTextZIndex(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setLoadOfflineData" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setLoadOfflineData([\"var1\":$var1])")
        
            // 开始调用
            ref.setLoadOfflineData(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMapTextZIndex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMapTextZIndex([])")
        
            // 开始调用
            val result = ref.getMapTextZIndex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::reloadMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::reloadMap([])")
        
            // 开始调用
            ref.reloadMap()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setRenderFps" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setRenderFps([\"var1\":$var1])")
        
            // 开始调用
            ref.setRenderFps(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setIndoorBuildingInfo" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.IndoorBuildingInfo
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setIndoorBuildingInfo([])")
        
            // 开始调用
            ref.setIndoorBuildingInfo(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setAMapGestureListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setAMapGestureListener([])")
        
            // 开始调用
            ref.setAMapGestureListener(object : com.amap.api.maps.model.AMapGestureListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.AMap::setAMapGestureListener_Callback" + refId)
        
                // 回调方法们
                override fun onDoubleTap(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDoubleTap([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onDoubleTap",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onSingleTap(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onSingleTap([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onSingleTap",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onFling(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onFling([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onFling",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onScroll(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onScroll([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onScroll",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onLongPress(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onLongPress([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onLongPress",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onDown(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDown([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onDown",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onUp(var1: Float, var2: Float): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onUp([\"var1\":$var1, \"var2\":$var2])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onUp",
                        mapOf<String, Any?>("var1" to var1,
                "var2" to var2)
                    )
        
                    // 方法返回值
        
                }
        
                override fun onMapStable(): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onMapStable([])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.maps.model.AMapGestureListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onMapStable",
                        mapOf<String, Any?>()
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getZoomToSpanLevel" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getZoomToSpanLevel([])")
        
            // 开始调用
            val result = ref.getZoomToSpanLevel(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::getInfoWindowAnimationManager" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getInfoWindowAnimationManager([])")
        
            // 开始调用
            val result = ref.getInfoWindowAnimationManager()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::setMaskLayerParams" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMaskLayerParams([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6])")
        
            // 开始调用
            ref.setMaskLayerParams(var1, var2, var3, var4, var5, var6)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setMaxZoomLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMaxZoomLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMaxZoomLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setMinZoomLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMinZoomLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setMinZoomLevel(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::resetMinMaxZoomPreference" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::resetMinMaxZoomPreference([])")
        
            // 开始调用
            ref.resetMinMaxZoomPreference()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setMapStatusLimits" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMapStatusLimits([])")
        
            // 开始调用
            ref.setMapStatusLimits(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::addCrossOverlay" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CrossOverlayOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addCrossOverlay([])")
        
            // 开始调用
            val result = ref.addCrossOverlay(var1)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::addRouteOverlay" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::addRouteOverlay([])")
        
            // 开始调用
            val result = ref.addRouteOverlay()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.AMap::setMapCustomEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMapCustomEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapCustomEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setCustomMapStylePath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setCustomMapStylePath([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomMapStylePath(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setCustomMapStyle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CustomMapStyleOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setCustomMapStyle([])")
        
            // 开始调用
            ref.setCustomMapStyle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setCustomMapStyleID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setCustomMapStyleID([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomMapStyleID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setCustomTextureResourcePath" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setCustomTextureResourcePath([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomTextureResourcePath(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setRenderMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setRenderMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setRenderMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getP20MapCenter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.IPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getP20MapCenter([])")
        
            // 开始调用
            ref.getP20MapCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::getMapContentApprovalNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getMapContentApprovalNumber([])")
        
            // 开始调用
            val result = ref.getMapContentApprovalNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::getSatelliteImageApprovalNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::getSatelliteImageApprovalNumber([])")
        
            // 开始调用
            val result = ref.getSatelliteImageApprovalNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.AMap::setMapLanguage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setMapLanguage([\"var1\":$var1])")
        
            // 开始调用
            ref.setMapLanguage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.AMap::setRoadArrowEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.AMap
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.AMap@$refId::setRoadArrowEnable([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoadArrowEnable(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.interfaces.IGlOverlayLayer::removeOverlay" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.interfaces.IGlOverlayLayer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.interfaces.IGlOverlayLayer@$refId::removeOverlay([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.removeOverlay(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.interfaces.IGlOverlayLayer::getCurrentParticleNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.interfaces.IGlOverlayLayer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.interfaces.IGlOverlayLayer@$refId::getCurrentParticleNum([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.getCurrentParticleNum(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.interfaces.IGlOverlayLayer::getNearestLatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolylineOptions
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.interfaces.IGlOverlayLayer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.interfaces.IGlOverlayLayer@$refId::getNearestLatLng([])")
        
            // 开始调用
            val result = ref.getNearestLatLng(var1, var2)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.interfaces.IGlOverlayLayer::IsPolygonContainsPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolygonOptions
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.interfaces.IGlOverlayLayer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.interfaces.IGlOverlayLayer@$refId::IsPolygonContainsPoint([])")
        
            // 开始调用
            val result = ref.IsPolygonContainsPoint(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.interfaces.IGlOverlayLayer::processPolygonHoleOption" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.PolygonOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.interfaces.IGlOverlayLayer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.interfaces.IGlOverlayLayer@$refId::processPolygonHoleOption([])")
        
            // 开始调用
            ref.processPolygonHoleOption(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.interfaces.IGlOverlayLayer::IsCircleContainPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CircleOptions
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.interfaces.IGlOverlayLayer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.interfaces.IGlOverlayLayer@$refId::IsCircleContainPoint([])")
        
            // 开始调用
            val result = ref.IsCircleContainPoint(var1, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.maps.interfaces.IGlOverlayLayer::processCircleHoleOption" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CircleOptions
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.interfaces.IGlOverlayLayer
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.interfaces.IGlOverlayLayer@$refId::processCircleHoleOption([])")
        
            // 开始调用
            ref.processCircleHoleOption(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapView::getMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::getMap([])")
        
            // 开始调用
            val result = ref.getMap()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.maps.MapView::onCreate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::onCreate([])")
        
            // 开始调用
            ref.onCreate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapView::onResume" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::onResume([])")
        
            // 开始调用
            ref.onResume()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapView::onPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::onPause([])")
        
            // 开始调用
            ref.onPause()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapView::onDestroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::onDestroy([])")
        
            // 开始调用
            ref.onDestroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapView::onLowMemory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::onLowMemory([])")
        
            // 开始调用
            ref.onLowMemory()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapView::onSaveInstanceState" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.os.Bundle
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::onSaveInstanceState([])")
        
            // 开始调用
            ref.onSaveInstanceState(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.maps.MapView::setVisibility" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.maps.MapView
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.maps.MapView@$refId::setVisibility([\"var1\":$var1])")
        
            // 开始调用
            ref.setVisibility(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceBase::queryProcessedTrace" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as List<com.amap.api.trace.TraceLocation>
            // jsonable参数
            val var3 = args["var3"] as Int
            // 引用参数
            val var4 = REF_MAP[args["var4"] as Int] as com.amap.api.trace.TraceListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceBase@$refId::queryProcessedTrace([\"var1\":$var1, \"var3\":$var3])")
        
            // 开始调用
            ref.queryProcessedTrace(var1, ArrayList(var2), var3, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceBase::setLocationInterval" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceBase@$refId::setLocationInterval([\"var1\":$var1])")
        
            // 开始调用
            ref.setLocationInterval(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceBase::setTraceStatusInterval" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceBase@$refId::setTraceStatusInterval([\"var1\":$var1])")
        
            // 开始调用
            ref.setTraceStatusInterval(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceBase::startTrace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceBase@$refId::startTrace([])")
        
            // 开始调用
            ref.startTrace(object : com.amap.api.trace.TraceStatusListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.trace.LBSTraceBase::startTrace_Callback" + refId)
        
                // 回调方法们
                override fun onTraceStatus(var1: List<com.amap.api.trace.TraceLocation>, var2: List<com.amap.api.maps.model.LatLng>, var3: String): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onTraceStatus([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.trace.TraceStatusListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onTraceStatus",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 },
                "var2" to var2.hashCode().apply { REF_MAP[this] = var2 },
                "var3" to var3)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceBase::stopTrace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceBase@$refId::stopTrace([])")
        
            // 开始调用
            ref.stopTrace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceBase::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceBase@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceStatusListener::onTraceStatus" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.trace.TraceLocation>
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as List<com.amap.api.maps.model.LatLng>
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceStatusListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceStatusListener@$refId::onTraceStatus([\"var3\":$var3])")
        
            // 开始调用
            ref.onTraceStatus(ArrayList(var1), ArrayList(var2), var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceListener::onRequestFailed" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceListener@$refId::onRequestFailed([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onRequestFailed(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceListener::onTraceProcessing" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceListener@$refId::onTraceProcessing([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onTraceProcessing(var1, var2, ArrayList(var3))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceListener::onFinished" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as List<com.amap.api.maps.model.LatLng>
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceListener@$refId::onFinished([\"var1\":$var1, \"var3\":$var3, \"var4\":$var4])")
        
            // 开始调用
            ref.onFinished(var1, ArrayList(var2), var3, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceLocation::getLatitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::getLatitude([])")
        
            // 开始调用
            val result = ref.getLatitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceLocation::setLatitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::setLatitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLatitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceLocation::getLongitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::getLongitude([])")
        
            // 开始调用
            val result = ref.getLongitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceLocation::setLongitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::setLongitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLongitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceLocation::getSpeed" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::getSpeed([])")
        
            // 开始调用
            val result = ref.getSpeed()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceLocation::setSpeed" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::setSpeed([\"var1\":$var1])")
        
            // 开始调用
            ref.setSpeed(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceLocation::getBearing" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::getBearing([])")
        
            // 开始调用
            val result = ref.getBearing()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceLocation::setBearing" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::setBearing([\"var1\":$var1])")
        
            // 开始调用
            ref.setBearing(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceLocation::getTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::getTime([])")
        
            // 开始调用
            val result = ref.getTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceLocation::setTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::setTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceLocation::copy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceLocation@$refId::copy([])")
        
            // 开始调用
            val result = ref.copy()
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.trace.LBSTraceClient::getInstance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = REF_MAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceClient::getInstance([])")
        
            // 开始调用
            val result = com.amap.api.trace.LBSTraceClient.getInstance(var0)
        
            // 调用结果
            val returnRefId = result.hashCode()
            REF_MAP[returnRefId] = result
        
            methodResult.success(returnRefId)
        },
        "com.amap.api.trace.LBSTraceClient::queryProcessedTrace" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as List<com.amap.api.trace.TraceLocation>
            // jsonable参数
            val var3 = args["var3"] as Int
            // 引用参数
            val var4 = REF_MAP[args["var4"] as Int] as com.amap.api.trace.TraceListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceClient@$refId::queryProcessedTrace([\"var1\":$var1, \"var3\":$var3])")
        
            // 开始调用
            ref.queryProcessedTrace(var1, ArrayList(var2), var3, var4)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceClient::startTrace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceClient@$refId::startTrace([])")
        
            // 开始调用
            ref.startTrace(object : com.amap.api.trace.TraceStatusListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.trace.LBSTraceClient::startTrace_Callback" + refId)
        
                // 回调方法们
                override fun onTraceStatus(var1: List<com.amap.api.trace.TraceLocation>, var2: List<com.amap.api.maps.model.LatLng>, var3: String): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onTraceStatus([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
                    val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.trace.TraceStatusListener::Callback")
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::onTraceStatus",
                        mapOf<String, Any?>("var1" to var1.hashCode().apply { REF_MAP[this] = var1 },
                "var2" to var2.hashCode().apply { REF_MAP[this] = var2 },
                "var3" to var3)
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceClient::stopTrace" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceClient@$refId::stopTrace([])")
        
            // 开始调用
            ref.stopTrace()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.LBSTraceClient::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.LBSTraceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.LBSTraceClient@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceOverlay::add" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::add([])")
        
            // 开始调用
            ref.add(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceOverlay::remove" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::remove([])")
        
            // 开始调用
            ref.remove()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceOverlay::setProperCamera" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as List<com.amap.api.maps.model.LatLng>
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::setProperCamera([])")
        
            // 开始调用
            ref.setProperCamera(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceOverlay::zoopToSpan" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::zoopToSpan([])")
        
            // 开始调用
            ref.zoopToSpan()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceOverlay::getTraceStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::getTraceStatus([])")
        
            // 开始调用
            val result = ref.getTraceStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceOverlay::setTraceStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::setTraceStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setTraceStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceOverlay::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceOverlay::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.trace.TraceOverlay::getWaitTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::getWaitTime([])")
        
            // 开始调用
            val result = ref.getWaitTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.trace.TraceOverlay::setWaitTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = REF_MAP[refId] as com.amap.api.trace.TraceOverlay
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.trace.TraceOverlay@$refId::setWaitTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setWaitTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "ObjectFactory::createcom_autonavi_ae_gmap_maploader_ProcessingTile__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.maploader.ProcessingTile(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glinterface_MapLabelItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glinterface.MapLabelItem()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimationMgr__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglAnimation2V__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AdglAnimation2V(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglAnimationContantValues__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AdglAnimationContantValues()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimFling__int__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AdglMapAnimFling(var1, var2, var3)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglAnimation1V__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AdglAnimation1V(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimPivotZoom__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam1V__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimGroup__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam2V__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_style_StyleItem__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.style.StyleItem(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_style_StyleElement__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.style.StyleElement()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_GLMapEngine_MapViewInitParam__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_gesture_EAMapPlatformGestureInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_GLMapState__int__long" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Long
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.GLMapState(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_GLMapState__long__long" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
            // jsonable参数
            val var3 = args["var3"] as Long
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.GLMapState(var1, var3)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLTextureProperty__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.gloverlay.GLTextureProperty()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLOverlayBundle_GLAmapFocusHits__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLCrossVector_AVectorCrossAttr__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLRouteProperty__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.gloverlay.GLRouteProperty()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.gloverlay.GLOverlayTexture(var1, var2, var3, var4)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__float__float__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Int
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.gloverlay.GLOverlayTexture(var1, var2, var3.toFloat(), var4.toFloat(), var5, var6)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_ae_gmap_GLMapEngine_InitParam__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.ae.gmap.GLMapEngine.InitParam()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_maploader_AMapLoader_ADataRequestParam__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_maploader_NetworkState__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.maploader.NetworkState()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_MapProjection__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.MapProjection()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_tools_TextTextureGenerator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.tools.TextTextureGenerator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_tools_GLFileUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.tools.GLFileUtil()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_tools_GlMapUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.tools.GlMapUtil()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_tools_GLMapStaticValue__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.tools.GLMapStaticValue()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_tools_GLConvertUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.tools.GLConvertUtil()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_MsgProcessor__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.MsgProcessor()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AeUtil_UnZipFileBrake__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AbstractNativeInstance__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AbstractNativeInstance()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_LinkInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.LinkInfo()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativePolyline__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AMapNativePolyline()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_IPoint__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.IPoint()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_IPoint__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.IPoint(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_gles_AMapNativeGLShaderManager__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_DPoint__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.DPoint()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_DPoint__double__double" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.DPoint(var1, var3)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeRenderer__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AMapNativeRenderer()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_FileUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.FileUtil()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLTranslateAnimation__com_amap_api_maps_model_LatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLTranslateAnimation(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLRotateAnimation__float__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLRotateAnimation(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLAlphaAnimation__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLAlphaAnimation(var1.toFloat(), var2.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLScaleAnimation__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLScaleAnimation(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLTransformation__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLTransformation()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLAnimationSet__boolean" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLAnimationSet(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLEmergeAnimation__com_amap_api_maps_model_LatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLEmergeAnimation(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLAnimation__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.animation.GLAnimation()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_MapConfig__boolean" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.MapConfig(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_message_HoverGestureMapMessage__int__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.message.HoverGestureMapMessage(var1, var2.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_message_MoveGestureMapMessage__int__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.message.MoveGestureMapMessage(var1, var2.toFloat(), var3.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_message_ScaleGestureMapMessage__int__float__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.message.ScaleGestureMapMessage(var1, var2.toFloat(), var3, var4)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_message_RotateGestureMapMessage__int__float__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.message.RotateGestureMapMessage(var1, var2.toFloat(), var3, var4)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_FPointBounds__com_autonavi_amap_mapcore_FPoint__com_autonavi_amap_mapcore_FPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.autonavi.amap.mapcore.FPoint
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.autonavi.amap.mapcore.FPoint
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.FPointBounds(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_CoordUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.CoordUtil()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AeUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AeUtil()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_VirtualEarthProjection__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.VirtualEarthProjection()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_Rectangle__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.Rectangle()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_Rectangle__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.Rectangle(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_location__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.Inner_3dMap_location(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_location__android_location_Location" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.location.Location
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.Inner_3dMap_location(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AMapEngineUtils__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AMapEngineUtils()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_FPoint3__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.FPoint3()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_FPoint3__float__float__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.FPoint3(var1.toFloat(), var2.toFloat(), var3)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AMapEtaDecoder__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AMapEtaDecoder()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_FPointBounds_Builder__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.FPointBounds.Builder()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_locationOption__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.Inner_3dMap_locationOption()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_FPoint__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.FPoint()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_FPoint__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.FPoint(var1.toFloat(), var2.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeParticleSystem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AMapNativeParticleSystem()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeBuildingRenderer__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.AMapNativeBuildingRenderer()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_autonavi_amap_mapcore_Convert__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.autonavi.amap.mapcore.Convert()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_offlineservice_AMapPermissionActivity__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.offlineservice.AMapPermissionActivity()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_InfoWindowParams__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.InfoWindowParams()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_CameraUpdateFactory__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.CameraUpdateFactory()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_AMapException__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 创建对象
            val obj = com.amap.api.maps.AMapException(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_AMapException__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.AMapException()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_AMapOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.AMapOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_AMapOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.AMapOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_CoordinateConverter__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.maps.CoordinateConverter(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_utils_SpatialRelationUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.utils.SpatialRelationUtil()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_MapsInitializer__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.MapsInitializer()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapStatus__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.offlinemap.OfflineMapStatus()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapProvince__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.offlinemap.OfflineMapProvince()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_offlinemap_DownloadProgressView__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.maps.offlinemap.DownloadProgressView(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_offlinemap_Province__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.offlinemap.Province()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapCity__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.offlinemap.OfflineMapCity()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapActivity__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.offlinemap.OfflineMapActivity()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_offlinemap_City__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.offlinemap.City()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_PolygonHoleOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.PolygonHoleOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_TileOverlayOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.TileOverlayOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_Poi__String__com_amap_api_maps_model_LatLng__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 创建对象
            val obj = com.amap.api.maps.model.Poi(var1, var2, var3)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_MyLocationStyle__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.MyLocationStyle()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_VisibleRegion__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLngBounds" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var3 = REF_MAP[args["var3"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var4 = REF_MAP[args["var4"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var5 = REF_MAP[args["var5"] as Int] as com.amap.api.maps.model.LatLngBounds
        
            // 创建对象
            val obj = com.amap.api.maps.model.VisibleRegion(var1, var2, var3, var4, var5)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_LatLngCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.LatLngCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CircleHoleOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.CircleHoleOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_LatLngBounds_Builder__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.LatLngBounds.Builder()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_NavigateArrowOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.NavigateArrowOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_BitmapDescriptorFactory__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.BitmapDescriptorFactory()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_MultiPointOverlayOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.MultiPointOverlayOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_PoiCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.PoiCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_PolylineOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.PolylineOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_NaviPara__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.NaviPara()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_GroundOverlayOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.GroundOverlayOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_GL3DModelOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.GL3DModelOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_MyTrafficStyle__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.MyTrafficStyle()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CameraPosition__com_amap_api_maps_model_LatLng__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.CameraPosition(var1, var2.toFloat(), var3.toFloat(), var4.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_TextOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.TextOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_PoiPara__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.PoiPara()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_MarkerOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.MarkerOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_animation_AnimationSet__boolean" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 创建对象
            val obj = com.amap.api.maps.model.animation.AnimationSet(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_animation_RotateAnimation__float__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.animation.RotateAnimation(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_animation_RotateAnimation__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.animation.RotateAnimation(var1.toFloat(), var2.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_animation_TranslateAnimation__com_amap_api_maps_model_LatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 创建对象
            val obj = com.amap.api.maps.model.animation.TranslateAnimation(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_animation_EmergeAnimation__com_amap_api_maps_model_LatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 创建对象
            val obj = com.amap.api.maps.model.animation.EmergeAnimation(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_animation_AlphaAnimation__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.animation.AlphaAnimation(var1.toFloat(), var2.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_animation_ScaleAnimation__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.animation.ScaleAnimation(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_LatLngBounds__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.model.LatLng
        
            // 创建对象
            val obj = com.amap.api.maps.model.LatLngBounds(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CustomMapStyleOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.CustomMapStyleOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_BuildingOverlayOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.BuildingOverlayOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CrossOverlayOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.CrossOverlayOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_VisibleRegionCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.VisibleRegionCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_LatLng__double__double" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.LatLng(var1, var3)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_LatLng__double__double__boolean" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var5 = args["var5"] as Boolean
        
            // 创建对象
            val obj = com.amap.api.maps.model.LatLng(var1, var3, var5)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_TileProjection__int__int__int__int__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as Int
        
            // 创建对象
            val obj = com.amap.api.maps.model.TileProjection(var1, var2, var3, var4, var5, var6)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_AMapPara__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.AMapPara()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CameraPosition_Builder__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.CameraPosition.Builder()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CameraPosition_Builder__com_amap_api_maps_model_CameraPosition" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.CameraPosition
        
            // 创建对象
            val obj = com.amap.api.maps.model.CameraPosition.Builder(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CircleOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.CircleOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_AMapCameraInfo__float__float__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
            // jsonable参数
            val var6 = args["var6"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.AMapCameraInfo(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5.toFloat(), var6.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_PolygonOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.PolygonOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng__double" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.WeightedLatLng(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 创建对象
            val obj = com.amap.api.maps.model.WeightedLatLng(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_MyLocationStyleCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.MyLocationStyleCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_MarkerOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.MarkerOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_MultiPointItem__com_amap_api_maps_model_LatLng" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as com.amap.api.maps.model.LatLng
        
            // 创建对象
            val obj = com.amap.api.maps.model.MultiPointItem(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_LatLngBoundsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.LatLngBoundsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_ArcOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.ArcOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_BitmapDescriptorCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.BitmapDescriptorCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CircleOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.CircleOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_NavigateArrowOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.NavigateArrowOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_RuntimeRemoteException__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 创建对象
            val obj = com.amap.api.maps.model.RuntimeRemoteException(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_HeatmapTileProvider_Builder__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.HeatmapTileProvider.Builder()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_BaseOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.BaseOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_PolylineOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.PolylineOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_BaseOverlay__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.BaseOverlay()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_TileOverlayOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.TileOverlayOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_RoutePara__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.RoutePara()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_ArcOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.ArcOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_CameraPositionCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.CameraPositionCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverLifeModule__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.ParticleOverLifeModule()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_ConstantRotationOverLife__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.ConstantRotationOverLife(var1.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float__boolean" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Boolean
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.SinglePointParticleShape(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.SinglePointParticleShape(var1.toFloat(), var2.toFloat(), var3.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_RandomVelocityBetweenTwoConstants__float__float__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
            // jsonable参数
            val var6 = args["var6"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5.toFloat(), var6.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_CurveSizeOverLife__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.CurveSizeOverLife(var1.toFloat(), var2.toFloat(), var3.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_ParticleEmissionModule__int__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.ParticleEmissionModule(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_RectParticleShape__float__float__float__float__boolean" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Boolean
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.RectParticleShape(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_RandomColorBetWeenTwoConstants__float__float__float__float__float__float__float__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
            // jsonable参数
            val var6 = args["var6"] as Double
            // jsonable参数
            val var7 = args["var7"] as Double
            // jsonable参数
            val var8 = args["var8"] as Double
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants(var1.toFloat(), var2.toFloat(), var3.toFloat(), var4.toFloat(), var5.toFloat(), var6.toFloat(), var7.toFloat(), var8.toFloat())
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverlayOptionsFactory__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.ParticleOverlayOptionsFactory()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverlayOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.particle.ParticleOverlayOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_TextOptions__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.TextOptions()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_PolygonOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.PolygonOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_TileProjectionCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.TileProjectionCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_GroundOverlayOptionsCreator__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.GroundOverlayOptionsCreator()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_model_IndoorBuildingInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.model.IndoorBuildingInfo()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_TextureMapView__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.maps.TextureMapView(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_TextureMapView__android_content_Context__com_amap_api_maps_AMapOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.AMapOptions
        
            // 创建对象
            val obj = com.amap.api.maps.TextureMapView(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_AMapUtils__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.maps.AMapUtils()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_WearMapView__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.maps.WearMapView(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_WearMapView__android_content_Context__com_amap_api_maps_AMapOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.AMapOptions
        
            // 创建对象
            val obj = com.amap.api.maps.WearMapView(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_MapView__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.maps.MapView(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_maps_MapView__android_content_Context__com_amap_api_maps_AMapOptions" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
            // 引用参数
            val var2 = REF_MAP[args["var2"] as Int] as com.amap.api.maps.AMapOptions
        
            // 创建对象
            val obj = com.amap.api.maps.MapView(var1, var2)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_trace_TraceLocation__double__double__float__float__long" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var5 = args["var5"] as Double
            // jsonable参数
            val var6 = args["var6"] as Double
            // jsonable参数
            val var7 = args["var7"] as Long
        
            // 创建对象
            val obj = com.amap.api.trace.TraceLocation(var1, var3, var5.toFloat(), var6.toFloat(), var7)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_trace_TraceLocation__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.trace.TraceLocation()
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_trace_LBSTraceClient__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = REF_MAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.trace.LBSTraceClient(var1)
            REF_MAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        
    )

    override fun onMethodCall(methodCall: MethodCall, methodResult: MethodChannel.Result) {
        val args = methodCall.arguments as? Map<String, Any> ?: mapOf()
        when (methodCall.method) {
            // 获取Application对象
            "ObjectFactory::getandroid_app_Application" -> {
                methodResult.success(registrar.activity().application.apply { REF_MAP[hashCode()] = this }.hashCode())
            }
            // 获取FlutterActivity对象
            "ObjectFactory::getandroid_app_Activity" -> {
                methodResult.success(registrar.activity().apply { REF_MAP[hashCode()] = this }.hashCode())
            }
            // 创建android.os.Bundle对象
            "ObjectFactory::createandroid_os_Bundle" -> {
                methodResult.success(Bundle().apply { REF_MAP[hashCode()] = this }.hashCode())
            }
            // 释放一个对象
            "ObjectFactory::release" -> {
                REF_MAP.remove(args["refId"] as Int)
                methodResult.success("success")
            }
            // 清空REF_MAP中所有对象
            "ObjectFactory::clearRefMap" -> {
                REF_MAP.clear()
                methodResult.success("success")
            }
            else -> {
                handlerMap[methodCall.method]?.invoke(registrar, args, methodResult) ?: methodResult.notImplemented()
            }
        }
    }
}
