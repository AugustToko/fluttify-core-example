//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_base_flutter/src/ios/ios.export.g.dart';
import 'package:amap_base_flutter/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
mixin com_autonavi_amap_mapcore_interfaces_IglModel on java_lang_Object {
  

  

  @mustCallSuper
  Future<String> getTitle() {
  
  
    if (!kReleaseMode) {
      debugPrint('getTitle::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<String> getSnippet() {
  
  
    if (!kReleaseMode) {
      debugPrint('getSnippet::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<String> getId() {
  
  
    if (!kReleaseMode) {
      debugPrint('getId::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setPosition(com_amap_api_maps_model_LatLng var1) {
    kNativeObjectPool.add(var1);
  
    if (!kReleaseMode) {
      debugPrint('setPosition::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setRotateAngle(double var1) {
  
  
    if (!kReleaseMode) {
      debugPrint('setRotateAngle::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<double> getRotateAngle() {
  
  
    if (!kReleaseMode) {
      debugPrint('getRotateAngle::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<com_amap_api_maps_model_LatLng> getPosition() {
  
  
    if (!kReleaseMode) {
      debugPrint('getPosition::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setAnimation(com_amap_api_maps_model_animation_Animation var1) {
    kNativeObjectPool.add(var1);
  
    if (!kReleaseMode) {
      debugPrint('setAnimation::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> startAnimation() {
  
  
    if (!kReleaseMode) {
      debugPrint('startAnimation::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> remove() {
  
  
    if (!kReleaseMode) {
      debugPrint('remove::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setVisible(bool var1) {
  
  
    if (!kReleaseMode) {
      debugPrint('setVisible::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> isVisible() {
  
  
    if (!kReleaseMode) {
      debugPrint('isVisible::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setZoomLimit(double var1) {
  
  
    if (!kReleaseMode) {
      debugPrint('setZoomLimit::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> destroy() {
  
  
    if (!kReleaseMode) {
      debugPrint('destroy::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setGeoPoint(com_autonavi_amap_mapcore_IPoint var1) {
    kNativeObjectPool.add(var1);
  
    if (!kReleaseMode) {
      debugPrint('setGeoPoint::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> showInfoWindow() {
  
  
    if (!kReleaseMode) {
      debugPrint('showInfoWindow::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setTitle(String var1) {
  
  
    if (!kReleaseMode) {
      debugPrint('setTitle::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setSnippet(String var1) {
  
  
    if (!kReleaseMode) {
      debugPrint('setSnippet::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setModelFixedLength(int var1) {
  
  
    if (!kReleaseMode) {
      debugPrint('setModelFixedLength::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}