//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_base_flutter/src/ios/ios.export.g.dart';
import 'package:amap_base_flutter/src/android/android.export.g.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_api_maps_model_BitmapDescriptorFactory extends java_lang_Object  {
  // generate getters
  

  // generate setters
  

  // generate methods
  static Future<com_amap_api_maps_model_BitmapDescriptor> fromResource(int var0) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::fromResource([\'var0\':$var0])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::fromResource', {"var0": var0});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  static Future<com_amap_api_maps_model_BitmapDescriptor> fromView(android_view_View var0) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::fromView([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::fromView', {"var0": var0.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  static Future<com_amap_api_maps_model_BitmapDescriptor> fromPath(String var0) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::fromPath([\'var0\':$var0])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::fromPath', {"var0": var0});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  static Future<com_amap_api_maps_model_BitmapDescriptor> fromAsset(String var0) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::fromAsset([\'var0\':$var0])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::fromAsset', {"var0": var0});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  static Future<com_amap_api_maps_model_BitmapDescriptor> fromFile(String var0) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::fromFile([\'var0\':$var0])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::fromFile', {"var0": var0});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  static Future<com_amap_api_maps_model_BitmapDescriptor> defaultMarker() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  static Future<com_amap_api_maps_model_BitmapDescriptor> fromBitmap(android_graphics_Bitmap var0) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::fromBitmap([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::fromBitmap', {"var0": var0.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_BitmapDescriptor()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  static Future<android_content_Context> getContext() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.BitmapDescriptorFactory::getContext([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.BitmapDescriptorFactory::getContext', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(android_content_Context()..refId = result..tag = 'amap_base_flutter');
      return android_content_Context()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
}