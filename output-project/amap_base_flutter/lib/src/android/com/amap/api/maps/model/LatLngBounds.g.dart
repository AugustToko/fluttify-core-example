//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_base_flutter/src/ios/ios.export.g.dart';
import 'package:amap_base_flutter/src/android/android.export.g.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_api_maps_model_LatLngBounds extends java_lang_Object with android_os_Parcelable {
  // generate getters
  Future<com_amap_api_maps_model_LatLng> get_southwest() async {
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod("com.amap.api.maps.model.LatLngBounds::get_southwest", {'refId': refId});
    kNativeObjectPool.add(com_amap_api_maps_model_LatLng()..refId = result..tag = 'amap_base_flutter');
    return com_amap_api_maps_model_LatLng()..refId = result..tag = 'amap_base_flutter';
  }
  
  Future<com_amap_api_maps_model_LatLng> get_northeast() async {
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod("com.amap.api.maps.model.LatLngBounds::get_northeast", {'refId': refId});
    kNativeObjectPool.add(com_amap_api_maps_model_LatLng()..refId = result..tag = 'amap_base_flutter');
    return com_amap_api_maps_model_LatLng()..refId = result..tag = 'amap_base_flutter';
  }
  

  // generate setters
  

  // generate methods
  static Future<com_amap_api_maps_model_LatLngBounds_Builder> builder() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.LatLngBounds::builder([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.LatLngBounds::builder', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_LatLngBounds_Builder()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_LatLngBounds_Builder()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<bool> contains(com_amap_api_maps_model_LatLng var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.LatLngBounds@$refId::contains([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.LatLngBounds::contains', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> intersects(com_amap_api_maps_model_LatLngBounds var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.LatLngBounds@$refId::intersects([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.LatLngBounds::intersects', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<com_amap_api_maps_model_LatLngBounds> including(com_amap_api_maps_model_LatLng var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.LatLngBounds@$refId::including([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.LatLngBounds::including', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_LatLngBounds()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_LatLngBounds()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
}