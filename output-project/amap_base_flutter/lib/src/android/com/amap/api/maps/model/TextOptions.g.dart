//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_base_flutter/src/ios/ios.export.g.dart';
import 'package:amap_base_flutter/src/android/android.export.g.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_api_maps_model_TextOptions extends java_lang_Object with android_os_Parcelable {
  // generate getters
  

  // generate setters
  

  // generate methods
  Future<com_amap_api_maps_model_TextOptions> position(com_amap_api_maps_model_LatLng var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::position([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::position', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> text(String var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::text([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::text', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> visible(bool var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::visible([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::visible', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> zIndex(double var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::zIndex([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::zIndex', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> rotate(double var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::rotate([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::rotate', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> align(int var1, int var2) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::align([\'var1\':$var1, \'var2\':$var2])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::align', {"var1": var1, "var2": var2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> backgroundColor(int var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::backgroundColor([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::backgroundColor', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> fontColor(int var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::fontColor([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::fontColor', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_TextOptions> fontSize(int var1) async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::fontSize([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::fontSize', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_TextOptions()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<com_amap_api_maps_model_LatLng> getPosition() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getPosition([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getPosition', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_maps_model_LatLng()..refId = result..tag = 'amap_base_flutter');
      return com_amap_api_maps_model_LatLng()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<String> getText() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getText([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getText', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<double> getRotate() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getRotate([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getRotate', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getAlignX() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getAlignX([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getAlignX', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getAlignY() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getAlignY([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getAlignY', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getBackgroundColor() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getBackgroundColor([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getBackgroundColor', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getFontColor() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getFontColor([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getFontColor', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getFontSize() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getFontSize([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getFontSize', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<double> getZIndex() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::getZIndex([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::getZIndex', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> isVisible() async {
    // print log
    print('fluttify-dart: com.amap.api.maps.model.TextOptions@$refId::isVisible([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('com.amap.api.maps.model.TextOptions::isVisible', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}