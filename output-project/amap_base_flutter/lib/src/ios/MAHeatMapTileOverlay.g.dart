//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_base_flutter/src/ios/ios.export.g.dart';
import 'package:amap_base_flutter/src/android/android.export.g.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class MAHeatMapTileOverlay extends MATileOverlay  {
  // generate getters
  Future<List<MAHeatMapNode>> get_data() async {
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod("MAHeatMapTileOverlay::get_data", {'refId': refId});
    kNativeObjectPool.addAll((result as List).cast<int>().map((it) => MAHeatMapNode()..refId = it..tag = 'amap_base_flutter').toList());
    return (result as List).cast<int>().map((it) => MAHeatMapNode()..refId = it..tag = 'amap_base_flutter').toList();
  }
  
  Future<int> get_radius() async {
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod("MAHeatMapTileOverlay::get_radius", {'refId': refId});
  
    return result;
  }
  
  Future<double> get_opacity() async {
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod("MAHeatMapTileOverlay::get_opacity", {'refId': refId});
  
    return result;
  }
  
  Future<MAHeatMapGradient> get_gradient() async {
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod("MAHeatMapTileOverlay::get_gradient", {'refId': refId});
    kNativeObjectPool.add(MAHeatMapGradient()..refId = result..tag = 'amap_base_flutter');
    return MAHeatMapGradient()..refId = result..tag = 'amap_base_flutter';
  }
  
  Future<bool> get_allowRetinaAdapting() async {
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod("MAHeatMapTileOverlay::get_allowRetinaAdapting", {'refId': refId});
  
    return result;
  }
  

  // generate setters
  Future<void> set_data(List<MAHeatMapNode> data) async {
    await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MAHeatMapTileOverlay::set_data', {'refId': refId, "data": data.map((it) => it.refId).toList()});
  
  
  }
  
  Future<void> set_radius(int radius) async {
    await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MAHeatMapTileOverlay::set_radius', {'refId': refId, "radius": radius});
  
  
  }
  
  Future<void> set_opacity(double opacity) async {
    await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MAHeatMapTileOverlay::set_opacity', {'refId': refId, "opacity": opacity});
  
  
  }
  
  Future<void> set_gradient(MAHeatMapGradient gradient) async {
    await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MAHeatMapTileOverlay::set_gradient', {'refId': refId, "gradient": gradient.refId});
  
  
  }
  
  Future<void> set_allowRetinaAdapting(bool allowRetinaAdapting) async {
    await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MAHeatMapTileOverlay::set_allowRetinaAdapting', {'refId': refId, "allowRetinaAdapting": allowRetinaAdapting});
  
  
  }
  

  // generate methods
  
}