//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:flutter/services.dart';

import 'package:amap_base_flutter/src/ios/ios.export.g.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class AmapBaseFlutterFactoryIOS {
  static final _channel = MethodChannel('me.yohom/amap_base_flutter');

  static Future<AMapURLSearch> createAMapURLSearch() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapURLSearch');
    final object = AMapURLSearch()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapNaviConfig> createAMapNaviConfig() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapNaviConfig');
    final object = AMapNaviConfig()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRouteConfig> createAMapRouteConfig() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRouteConfig');
    final object = AMapRouteConfig()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOIConfig> createAMapPOIConfig() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOIConfig');
    final object = AMapPOIConfig()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapServices> createAMapServices() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapServices');
    final object = AMapServices()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOfflineCity> createMAOfflineCity() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOfflineCity');
    final object = MAOfflineCity()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOfflineItemNationWide> createMAOfflineItemNationWide() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOfflineItemNationWide');
    final object = MAOfflineItemNationWide()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMultiPoint> createMAMultiPoint() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMultiPoint');
    final object = MAMultiPoint()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAGroundOverlay> createMAGroundOverlay() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAGroundOverlay');
    final object = MAGroundOverlay()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAPolygonRenderer> createMAPolygonRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAPolygonRenderer');
    final object = MAPolygonRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAPinAnnotationView> createMAPinAnnotationView() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAPinAnnotationView');
    final object = MAPinAnnotationView()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAHeatMapNode> createMAHeatMapNode() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAHeatMapNode');
    final object = MAHeatMapNode()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAHeatMapGradient> createMAHeatMapGradient() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAHeatMapGradient');
    final object = MAHeatMapGradient()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAHeatMapTileOverlay> createMAHeatMapTileOverlay() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAHeatMapTileOverlay');
    final object = MAHeatMapTileOverlay()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMapStatus> createMAMapStatus() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMapStatus');
    final object = MAMapStatus()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAPointAnnotation> createMAPointAnnotation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAPointAnnotation');
    final object = MAPointAnnotation()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACircle> createMACircle() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACircle');
    final object = MACircle()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAArcRenderer> createMAArcRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAArcRenderer');
    final object = MAArcRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMapCustomStyleOptions> createMAMapCustomStyleOptions() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMapCustomStyleOptions');
    final object = MAMapCustomStyleOptions()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAPolygon> createMAPolygon() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAPolygon');
    final object = MAPolygon()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleOverlay> createMAParticleOverlay() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleOverlay');
    final object = MAParticleOverlay()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAPolyline> createMAPolyline() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAPolyline');
    final object = MAPolyline()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMultiColoredPolylineRenderer> createMAMultiColoredPolylineRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMultiColoredPolylineRenderer');
    final object = MAMultiColoredPolylineRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAAnimatedAnnotation> createMAAnimatedAnnotation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAAnimatedAnnotation');
    final object = MAAnimatedAnnotation()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMultiTexturePolylineRenderer> createMAMultiTexturePolylineRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMultiTexturePolylineRenderer');
    final object = MAMultiTexturePolylineRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOfflineProvince> createMAOfflineProvince() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOfflineProvince');
    final object = MAOfflineProvince()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MATileOverlayRenderer> createMATileOverlayRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMATileOverlayRenderer');
    final object = MATileOverlayRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOfflineItem> createMAOfflineItem() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOfflineItem');
    final object = MAOfflineItem()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAGeodesicPolyline> createMAGeodesicPolyline() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAGeodesicPolyline');
    final object = MAGeodesicPolyline()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MATouchPoi> createMATouchPoi() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMATouchPoi');
    final object = MATouchPoi()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOfflineItemMunicipality> createMAOfflineItemMunicipality() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOfflineItemMunicipality');
    final object = MAOfflineItemMunicipality()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMultiPolyline> createMAMultiPolyline() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMultiPolyline');
    final object = MAMultiPolyline()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MATraceManager> createMATraceManager() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMATraceManager');
    final object = MATraceManager()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMultiPointOverlayRenderer> createMAMultiPointOverlayRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMultiPointOverlayRenderer');
    final object = MAMultiPointOverlayRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAIndoorFloorInfo> createMAIndoorFloorInfo() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAIndoorFloorInfo');
    final object = MAIndoorFloorInfo()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAIndoorInfo> createMAIndoorInfo() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAIndoorInfo');
    final object = MAIndoorInfo()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAPolylineRenderer> createMAPolylineRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAPolylineRenderer');
    final object = MAPolylineRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAAnnotationMoveAnimation> createMAAnnotationMoveAnimation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAAnnotationMoveAnimation');
    final object = MAAnnotationMoveAnimation()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAShape> createMAShape() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAShape');
    final object = MAShape()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAAnnotationView> createMAAnnotationView() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAAnnotationView');
    final object = MAAnnotationView()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MATileOverlay> createMATileOverlay() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMATileOverlay');
    final object = MATileOverlay()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MATileOverlayPath> createMATileOverlayPath() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMATileOverlayPath');
    final object = MATileOverlayPath()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACustomCalloutView> createMACustomCalloutView() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACustomCalloutView');
    final object = MACustomCalloutView()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOfflineItemCommonCity> createMAOfflineItemCommonCity() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOfflineItemCommonCity');
    final object = MAOfflineItemCommonCity()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOfflineMap> createMAOfflineMap() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOfflineMap');
    final object = MAOfflineMap()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACircleRenderer> createMACircleRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACircleRenderer');
    final object = MACircleRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleOverlayRenderer> createMAParticleOverlayRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleOverlayRenderer');
    final object = MAParticleOverlayRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACoordinateBounds> createMACoordinateBounds() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACoordinateBounds');
    final object = MACoordinateBounds()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACoordinateSpan> createMACoordinateSpan() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACoordinateSpan');
    final object = MACoordinateSpan()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACoordinateRegion> createMACoordinateRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACoordinateRegion');
    final object = MACoordinateRegion()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMapPoint> createMAMapPoint() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMapPoint');
    final object = MAMapPoint()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMapSize> createMAMapSize() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMapSize');
    final object = MAMapSize()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMapRect> createMAMapRect() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMapRect');
    final object = MAMapRect()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleRandomVelocityGenerate> createMAParticleRandomVelocityGenerate() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleRandomVelocityGenerate');
    final object = MAParticleRandomVelocityGenerate()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleRandomColorGenerate> createMAParticleRandomColorGenerate() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleRandomColorGenerate');
    final object = MAParticleRandomColorGenerate()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleConstantRotationGenerate> createMAParticleConstantRotationGenerate() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleConstantRotationGenerate');
    final object = MAParticleConstantRotationGenerate()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleCurveSizeGenerate> createMAParticleCurveSizeGenerate() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleCurveSizeGenerate');
    final object = MAParticleCurveSizeGenerate()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleEmissionModule> createMAParticleEmissionModule() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleEmissionModule');
    final object = MAParticleEmissionModule()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleSinglePointShapeModule> createMAParticleSinglePointShapeModule() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleSinglePointShapeModule');
    final object = MAParticleSinglePointShapeModule()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleRectShapeModule> createMAParticleRectShapeModule() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleRectShapeModule');
    final object = MAParticleRectShapeModule()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleOverLifeModule> createMAParticleOverLifeModule() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleOverLifeModule');
    final object = MAParticleOverLifeModule()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleOverlayOptions> createMAParticleOverlayOptions() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleOverlayOptions');
    final object = MAParticleOverlayOptions()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAParticleOverlayOptionsFactory> createMAParticleOverlayOptionsFactory() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAParticleOverlayOptionsFactory');
    final object = MAParticleOverlayOptionsFactory()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOverlayRenderer> createMAOverlayRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOverlayRenderer');
    final object = MAOverlayRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAUserLocation> createMAUserLocation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAUserLocation');
    final object = MAUserLocation()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMultiPointItem> createMAMultiPointItem() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMultiPointItem');
    final object = MAMultiPointItem()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMultiPointOverlay> createMAMultiPointOverlay() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMultiPointOverlay');
    final object = MAMultiPointOverlay()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACustomBuildingOverlayOption> createMACustomBuildingOverlayOption() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACustomBuildingOverlayOption');
    final object = MACustomBuildingOverlayOption()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACustomBuildingOverlay> createMACustomBuildingOverlay() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACustomBuildingOverlay');
    final object = MACustomBuildingOverlay()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MATracePoint> createMATracePoint() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMATracePoint');
    final object = MATracePoint()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MATraceLocation> createMATraceLocation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMATraceLocation');
    final object = MATraceLocation()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAArc> createMAArc() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAArc');
    final object = MAArc()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAUserLocationRepresentation> createMAUserLocationRepresentation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAUserLocationRepresentation');
    final object = MAUserLocationRepresentation()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAMapView> createMAMapView() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAMapView');
    final object = MAMapView()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAOverlayPathRenderer> createMAOverlayPathRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAOverlayPathRenderer');
    final object = MAOverlayPathRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MAGroundOverlayRenderer> createMAGroundOverlayRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMAGroundOverlayRenderer');
    final object = MAGroundOverlayRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<MACustomBuildingOverlayRenderer> createMACustomBuildingOverlayRenderer() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createMACustomBuildingOverlayRenderer');
    final object = MACustomBuildingOverlayRenderer()..refId = refId..tag = 'amap_base_flutter';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
}
