//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:amap_base_flutter/src/android/android.export.g.dart';
import 'package:amap_base_flutter/src/ios/ios.export.g.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
Future<bool> isKindOfAMapURLSearch(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfAMapURLSearch', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfAMapNaviConfig(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfAMapNaviConfig', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfAMapRouteConfig(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfAMapRouteConfig', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfAMapPOIConfig(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfAMapPOIConfig', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfAMapServices(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfAMapServices', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOfflineCity(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOfflineCity', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOfflineItemNationWide(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOfflineItemNationWide', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMultiPoint(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMultiPoint', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAGroundOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAGroundOverlay', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAPolygonRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAPolygonRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAPinAnnotationView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAPinAnnotationView', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAHeatMapNode(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAHeatMapNode', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAHeatMapGradient(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAHeatMapGradient', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAHeatMapTileOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAHeatMapTileOverlay', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMapStatus(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMapStatus', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAPointAnnotation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAPointAnnotation', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACircle(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACircle', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAArcRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAArcRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMapCustomStyleOptions(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMapCustomStyleOptions', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAPolygon(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAPolygon', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleOverlay', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAPolyline(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAPolyline', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMultiColoredPolylineRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMultiColoredPolylineRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAAnimatedAnnotation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAAnimatedAnnotation', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMultiTexturePolylineRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMultiTexturePolylineRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOfflineProvince(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOfflineProvince', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMATileOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMATileOverlayRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOfflineItem(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOfflineItem', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAGeodesicPolyline(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAGeodesicPolyline', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMATouchPoi(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMATouchPoi', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOfflineItemMunicipality(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOfflineItemMunicipality', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMultiPolyline(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMultiPolyline', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMATraceManager(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMATraceManager', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMultiPointOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMultiPointOverlayRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAIndoorFloorInfo(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAIndoorFloorInfo', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAIndoorInfo(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAIndoorInfo', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAPolylineRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAPolylineRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAAnnotationMoveAnimation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAAnnotationMoveAnimation', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAShape(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAShape', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAAnnotationView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAAnnotationView', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMATileOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMATileOverlay', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMATileOverlayPath(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMATileOverlayPath', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACustomCalloutView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACustomCalloutView', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOfflineItemCommonCity(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOfflineItemCommonCity', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOfflineMap(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOfflineMap', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACircleRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACircleRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleOverlayRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACoordinateBounds(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACoordinateBounds', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACoordinateSpan(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACoordinateSpan', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACoordinateRegion(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACoordinateRegion', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMapPoint(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMapPoint', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMapSize(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMapSize', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMapRect(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMapRect', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleRandomVelocityGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleRandomVelocityGenerate', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleRandomColorGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleRandomColorGenerate', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleConstantRotationGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleConstantRotationGenerate', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleCurveSizeGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleCurveSizeGenerate', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleEmissionModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleEmissionModule', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleSinglePointShapeModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleSinglePointShapeModule', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleRectShapeModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleRectShapeModule', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleOverLifeModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleOverLifeModule', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleOverlayOptions(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleOverlayOptions', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAParticleOverlayOptionsFactory(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAParticleOverlayOptionsFactory', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOverlayRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAUserLocation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAUserLocation', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMultiPointItem(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMultiPointItem', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMultiPointOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMultiPointOverlay', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACustomBuildingOverlayOption(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACustomBuildingOverlayOption', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACustomBuildingOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACustomBuildingOverlay', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMATracePoint(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMATracePoint', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMATraceLocation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMATraceLocation', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAArc(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAArc', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAUserLocationRepresentation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAUserLocationRepresentation', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAMapView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAMapView', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAOverlayPathRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAOverlayPathRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMAGroundOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMAGroundOverlayRenderer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfMACustomBuildingOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::isKindOfMACustomBuildingOverlayRenderer', {'refId': ref.refId});
  return result;
}


Future<AMapURLSearch> asAMapURLSearch(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asAMapURLSearch', {'refId': ref.refId});
  return AMapURLSearch()..refId = result;
}

Future<AMapNaviConfig> asAMapNaviConfig(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asAMapNaviConfig', {'refId': ref.refId});
  return AMapNaviConfig()..refId = result;
}

Future<AMapRouteConfig> asAMapRouteConfig(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asAMapRouteConfig', {'refId': ref.refId});
  return AMapRouteConfig()..refId = result;
}

Future<AMapPOIConfig> asAMapPOIConfig(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asAMapPOIConfig', {'refId': ref.refId});
  return AMapPOIConfig()..refId = result;
}

Future<AMapServices> asAMapServices(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asAMapServices', {'refId': ref.refId});
  return AMapServices()..refId = result;
}

Future<MAOfflineCity> asMAOfflineCity(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOfflineCity', {'refId': ref.refId});
  return MAOfflineCity()..refId = result;
}

Future<MAOfflineItemNationWide> asMAOfflineItemNationWide(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOfflineItemNationWide', {'refId': ref.refId});
  return MAOfflineItemNationWide()..refId = result;
}

Future<MAMultiPoint> asMAMultiPoint(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMultiPoint', {'refId': ref.refId});
  return MAMultiPoint()..refId = result;
}

Future<MAGroundOverlay> asMAGroundOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAGroundOverlay', {'refId': ref.refId});
  return MAGroundOverlay()..refId = result;
}

Future<MAPolygonRenderer> asMAPolygonRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAPolygonRenderer', {'refId': ref.refId});
  return MAPolygonRenderer()..refId = result;
}

Future<MAPinAnnotationView> asMAPinAnnotationView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAPinAnnotationView', {'refId': ref.refId});
  return MAPinAnnotationView()..refId = result;
}

Future<MAHeatMapNode> asMAHeatMapNode(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAHeatMapNode', {'refId': ref.refId});
  return MAHeatMapNode()..refId = result;
}

Future<MAHeatMapGradient> asMAHeatMapGradient(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAHeatMapGradient', {'refId': ref.refId});
  return MAHeatMapGradient()..refId = result;
}

Future<MAHeatMapTileOverlay> asMAHeatMapTileOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAHeatMapTileOverlay', {'refId': ref.refId});
  return MAHeatMapTileOverlay()..refId = result;
}

Future<MAMapStatus> asMAMapStatus(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMapStatus', {'refId': ref.refId});
  return MAMapStatus()..refId = result;
}

Future<MAPointAnnotation> asMAPointAnnotation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAPointAnnotation', {'refId': ref.refId});
  return MAPointAnnotation()..refId = result;
}

Future<MACircle> asMACircle(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACircle', {'refId': ref.refId});
  return MACircle()..refId = result;
}

Future<MAArcRenderer> asMAArcRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAArcRenderer', {'refId': ref.refId});
  return MAArcRenderer()..refId = result;
}

Future<MAMapCustomStyleOptions> asMAMapCustomStyleOptions(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMapCustomStyleOptions', {'refId': ref.refId});
  return MAMapCustomStyleOptions()..refId = result;
}

Future<MAPolygon> asMAPolygon(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAPolygon', {'refId': ref.refId});
  return MAPolygon()..refId = result;
}

Future<MAParticleOverlay> asMAParticleOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleOverlay', {'refId': ref.refId});
  return MAParticleOverlay()..refId = result;
}

Future<MAPolyline> asMAPolyline(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAPolyline', {'refId': ref.refId});
  return MAPolyline()..refId = result;
}

Future<MAMultiColoredPolylineRenderer> asMAMultiColoredPolylineRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMultiColoredPolylineRenderer', {'refId': ref.refId});
  return MAMultiColoredPolylineRenderer()..refId = result;
}

Future<MAAnimatedAnnotation> asMAAnimatedAnnotation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAAnimatedAnnotation', {'refId': ref.refId});
  return MAAnimatedAnnotation()..refId = result;
}

Future<MAMultiTexturePolylineRenderer> asMAMultiTexturePolylineRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMultiTexturePolylineRenderer', {'refId': ref.refId});
  return MAMultiTexturePolylineRenderer()..refId = result;
}

Future<MAOfflineProvince> asMAOfflineProvince(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOfflineProvince', {'refId': ref.refId});
  return MAOfflineProvince()..refId = result;
}

Future<MATileOverlayRenderer> asMATileOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMATileOverlayRenderer', {'refId': ref.refId});
  return MATileOverlayRenderer()..refId = result;
}

Future<MAOfflineItem> asMAOfflineItem(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOfflineItem', {'refId': ref.refId});
  return MAOfflineItem()..refId = result;
}

Future<MAGeodesicPolyline> asMAGeodesicPolyline(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAGeodesicPolyline', {'refId': ref.refId});
  return MAGeodesicPolyline()..refId = result;
}

Future<MATouchPoi> asMATouchPoi(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMATouchPoi', {'refId': ref.refId});
  return MATouchPoi()..refId = result;
}

Future<MAOfflineItemMunicipality> asMAOfflineItemMunicipality(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOfflineItemMunicipality', {'refId': ref.refId});
  return MAOfflineItemMunicipality()..refId = result;
}

Future<MAMultiPolyline> asMAMultiPolyline(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMultiPolyline', {'refId': ref.refId});
  return MAMultiPolyline()..refId = result;
}

Future<MATraceManager> asMATraceManager(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMATraceManager', {'refId': ref.refId});
  return MATraceManager()..refId = result;
}

Future<MAMultiPointOverlayRenderer> asMAMultiPointOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMultiPointOverlayRenderer', {'refId': ref.refId});
  return MAMultiPointOverlayRenderer()..refId = result;
}

Future<MAIndoorFloorInfo> asMAIndoorFloorInfo(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAIndoorFloorInfo', {'refId': ref.refId});
  return MAIndoorFloorInfo()..refId = result;
}

Future<MAIndoorInfo> asMAIndoorInfo(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAIndoorInfo', {'refId': ref.refId});
  return MAIndoorInfo()..refId = result;
}

Future<MAPolylineRenderer> asMAPolylineRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAPolylineRenderer', {'refId': ref.refId});
  return MAPolylineRenderer()..refId = result;
}

Future<MAAnnotationMoveAnimation> asMAAnnotationMoveAnimation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAAnnotationMoveAnimation', {'refId': ref.refId});
  return MAAnnotationMoveAnimation()..refId = result;
}

Future<MAShape> asMAShape(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAShape', {'refId': ref.refId});
  return MAShape()..refId = result;
}

Future<MAAnnotationView> asMAAnnotationView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAAnnotationView', {'refId': ref.refId});
  return MAAnnotationView()..refId = result;
}

Future<MATileOverlay> asMATileOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMATileOverlay', {'refId': ref.refId});
  return MATileOverlay()..refId = result;
}

Future<MATileOverlayPath> asMATileOverlayPath(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMATileOverlayPath', {'refId': ref.refId});
  return MATileOverlayPath()..refId = result;
}

Future<MACustomCalloutView> asMACustomCalloutView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACustomCalloutView', {'refId': ref.refId});
  return MACustomCalloutView()..refId = result;
}

Future<MAOfflineItemCommonCity> asMAOfflineItemCommonCity(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOfflineItemCommonCity', {'refId': ref.refId});
  return MAOfflineItemCommonCity()..refId = result;
}

Future<MAOfflineMap> asMAOfflineMap(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOfflineMap', {'refId': ref.refId});
  return MAOfflineMap()..refId = result;
}

Future<MACircleRenderer> asMACircleRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACircleRenderer', {'refId': ref.refId});
  return MACircleRenderer()..refId = result;
}

Future<MAParticleOverlayRenderer> asMAParticleOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleOverlayRenderer', {'refId': ref.refId});
  return MAParticleOverlayRenderer()..refId = result;
}

Future<MACoordinateBounds> asMACoordinateBounds(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACoordinateBounds', {'refId': ref.refId});
  return MACoordinateBounds()..refId = result;
}

Future<MACoordinateSpan> asMACoordinateSpan(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACoordinateSpan', {'refId': ref.refId});
  return MACoordinateSpan()..refId = result;
}

Future<MACoordinateRegion> asMACoordinateRegion(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACoordinateRegion', {'refId': ref.refId});
  return MACoordinateRegion()..refId = result;
}

Future<MAMapPoint> asMAMapPoint(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMapPoint', {'refId': ref.refId});
  return MAMapPoint()..refId = result;
}

Future<MAMapSize> asMAMapSize(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMapSize', {'refId': ref.refId});
  return MAMapSize()..refId = result;
}

Future<MAMapRect> asMAMapRect(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMapRect', {'refId': ref.refId});
  return MAMapRect()..refId = result;
}

Future<MAParticleRandomVelocityGenerate> asMAParticleRandomVelocityGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleRandomVelocityGenerate', {'refId': ref.refId});
  return MAParticleRandomVelocityGenerate()..refId = result;
}

Future<MAParticleRandomColorGenerate> asMAParticleRandomColorGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleRandomColorGenerate', {'refId': ref.refId});
  return MAParticleRandomColorGenerate()..refId = result;
}

Future<MAParticleConstantRotationGenerate> asMAParticleConstantRotationGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleConstantRotationGenerate', {'refId': ref.refId});
  return MAParticleConstantRotationGenerate()..refId = result;
}

Future<MAParticleCurveSizeGenerate> asMAParticleCurveSizeGenerate(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleCurveSizeGenerate', {'refId': ref.refId});
  return MAParticleCurveSizeGenerate()..refId = result;
}

Future<MAParticleEmissionModule> asMAParticleEmissionModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleEmissionModule', {'refId': ref.refId});
  return MAParticleEmissionModule()..refId = result;
}

Future<MAParticleSinglePointShapeModule> asMAParticleSinglePointShapeModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleSinglePointShapeModule', {'refId': ref.refId});
  return MAParticleSinglePointShapeModule()..refId = result;
}

Future<MAParticleRectShapeModule> asMAParticleRectShapeModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleRectShapeModule', {'refId': ref.refId});
  return MAParticleRectShapeModule()..refId = result;
}

Future<MAParticleOverLifeModule> asMAParticleOverLifeModule(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleOverLifeModule', {'refId': ref.refId});
  return MAParticleOverLifeModule()..refId = result;
}

Future<MAParticleOverlayOptions> asMAParticleOverlayOptions(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleOverlayOptions', {'refId': ref.refId});
  return MAParticleOverlayOptions()..refId = result;
}

Future<MAParticleOverlayOptionsFactory> asMAParticleOverlayOptionsFactory(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAParticleOverlayOptionsFactory', {'refId': ref.refId});
  return MAParticleOverlayOptionsFactory()..refId = result;
}

Future<MAOverlayRenderer> asMAOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOverlayRenderer', {'refId': ref.refId});
  return MAOverlayRenderer()..refId = result;
}

Future<MAUserLocation> asMAUserLocation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAUserLocation', {'refId': ref.refId});
  return MAUserLocation()..refId = result;
}

Future<MAMultiPointItem> asMAMultiPointItem(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMultiPointItem', {'refId': ref.refId});
  return MAMultiPointItem()..refId = result;
}

Future<MAMultiPointOverlay> asMAMultiPointOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMultiPointOverlay', {'refId': ref.refId});
  return MAMultiPointOverlay()..refId = result;
}

Future<MACustomBuildingOverlayOption> asMACustomBuildingOverlayOption(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACustomBuildingOverlayOption', {'refId': ref.refId});
  return MACustomBuildingOverlayOption()..refId = result;
}

Future<MACustomBuildingOverlay> asMACustomBuildingOverlay(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACustomBuildingOverlay', {'refId': ref.refId});
  return MACustomBuildingOverlay()..refId = result;
}

Future<MATracePoint> asMATracePoint(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMATracePoint', {'refId': ref.refId});
  return MATracePoint()..refId = result;
}

Future<MATraceLocation> asMATraceLocation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMATraceLocation', {'refId': ref.refId});
  return MATraceLocation()..refId = result;
}

Future<MAArc> asMAArc(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAArc', {'refId': ref.refId});
  return MAArc()..refId = result;
}

Future<MAUserLocationRepresentation> asMAUserLocationRepresentation(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAUserLocationRepresentation', {'refId': ref.refId});
  return MAUserLocationRepresentation()..refId = result;
}

Future<MAMapView> asMAMapView(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAMapView', {'refId': ref.refId});
  return MAMapView()..refId = result;
}

Future<MAOverlayPathRenderer> asMAOverlayPathRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAOverlayPathRenderer', {'refId': ref.refId});
  return MAOverlayPathRenderer()..refId = result;
}

Future<MAGroundOverlayRenderer> asMAGroundOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMAGroundOverlayRenderer', {'refId': ref.refId});
  return MAGroundOverlayRenderer()..refId = result;
}

Future<MACustomBuildingOverlayRenderer> asMACustomBuildingOverlayRenderer(Ref ref) async {
  final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('RefClass::asMACustomBuildingOverlayRenderer', {'refId': ref.refId});
  return MACustomBuildingOverlayRenderer()..refId = result;
}
