//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_base_flutter/src/ios/ios.export.g.dart';
import 'package:amap_base_flutter/src/android/android.export.g.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class MATraceManager extends NSObject  {
  // generate getters
  

  // generate setters
  Future<void> set_delegate(MATraceDelegate delegate) async {
    await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MATraceManager::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('MATraceDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::MATraceDelegate::traceManagerDidTracecorrectdistancewithError':
            // print log
            print('fluttify-dart-callback: traceManagerDidTracecorrectdistancewithError([\'distance\':$args[distance]])');
        
            // handle the native call
            delegate?.traceManagerDidTracecorrectdistancewithError(MATraceManager()..refId = (args['manager'])..tag = 'amap_base_flutter', (args['locations'] as List).cast<int>().map((it) => CLLocation()..refId = it..tag = 'amap_base_flutter').toList(), (args['tracePoints'] as List).cast<int>().map((it) => MATracePoint()..refId = it..tag = 'amap_base_flutter').toList(), args['distance'], NSError()..refId = (args['error'])..tag = 'amap_base_flutter');
            break;
          case 'Callback::MATraceDelegate::mapViewRequireLocationAuth':
            // print log
            print('fluttify-dart-callback: mapViewRequireLocationAuth([])');
        
            // handle the native call
            delegate?.mapViewRequireLocationAuth(CLLocationManager()..refId = (args['locationManager'])..tag = 'amap_base_flutter');
            break;
          default:
            break;
        }
      });
  }
  

  // generate methods
  static Future<MATraceManager> sharedInstance() async {
    // print log
    print('fluttify-dart: MATraceManager::sharedInstance([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MATraceManager::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(MATraceManager()..refId = result..tag = 'amap_base_flutter');
      return MATraceManager()..refId = result..tag = 'amap_base_flutter';
    }
  }
  
  Future<void> start() async {
    // print log
    print('fluttify-dart: MATraceManager@$refId::start([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MATraceManager::start', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stop() async {
    // print log
    print('fluttify-dart: MATraceManager@$refId::stop([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_base_flutter').invokeMethod('MATraceManager::stop', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}